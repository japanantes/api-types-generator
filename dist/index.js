(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("ATGen", [], factory);
	else if(typeof exports === 'object')
		exports["ATGen"] = factory();
	else
		root["ATGen"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/index.js":
/*!***********************!*\
  !*** ./dist/index.js ***!
  \***********************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

!function(e,t){ true?module.exports=t():0}(this,(()=>{return e={442:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ApiGenerator=void 0;const o=n(r(292)),s=r(812),a=r(650),i=r(179);class u{static instance=new u;routes;typesRegister=i.TypesRegister.getInstance();constructor(){this.routes=new Map}static getInstance(){return u.instance}registerRoute(e,t){this.routes.set(e,t)}generateApiRegister(){let e="// Generated content, don't touch\n\n";e+=this.generateRouteTypeTS(),e+=this.generateMethodEnumTS(),e+=this.generateRegisteredTypesTS();const t={get:[],post:[]};for(let[r,n]of this.routes.entries())e+=this.generateRouteTS(r,n),t[n.method].push(r);e+=this.generateRoutesTypes(t),this.writeApiRegisterToFile(e)}generateMethodEnumTS(){let e="\nexport enum Method {";return Object.values(s.Method).forEach((t=>e+=`\n\t${t},`)),e+="\n}\n\n",e}generateRegisteredTypesTS(){let e="\n";return this.typesRegister.enums.forEach(((t,r)=>{e+=`\nexport enum ${r} {`,Object.entries(t).forEach((([t,r])=>e+=`\n\t${t} = ${"number"==typeof r?r:`"${r}"`},`)),e+="\n}\n"})),e}generateRouteTypeTS(){return"\ntype Route = {name: string; method: Method; path: string; requireAuth?: boolean | undefined; data?: any | undefined; res:any};\n\n"}generateRoutesTypes(e){let t="";return Object.entries(e).forEach((([e,r])=>{t+=`\nexport type T${e.toUpperCase()}Routes = Route${r.join(" | Route")};`})),t}generateRouteTS(e,t){let r=`export type TRoute${e}Input = ${this.getDataTypeTS(t.required?.body)};\n`;return r+=`export type TRoute${e}Output = ${this.generateOutputTypeTS(t.response)};\n`,r+=`\nexport type Route${e} = {\n    name: "${e}";\n    method: Method.${t.method};\n    path: "${t.path}";\n    requireAuth: ${t.auth};\n    ${t.required?.body?`data: TRoute${e}Input`:`data?: TRoute${e}Input`}\n    res: TRoute${e}Output;\n};\nexport const getRequest${e} = (${t.required?.body?`data: Route${e}["data"]`:""}): Omit<Route${e}, "res"> => ({\n    name: "${e}",\n    method: Method.${t.method},\n    path: "${t.path}",\n    requireAuth: ${t.auth},\n    ${t.required?.body?"data,":""}\n});\n\n`,r}getDataTypeTS(e){return e?"boolean"==typeof e?"any":this.generateInputTypeTS(e):'Route["data"]'}generateInputTypeTS(e){let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateInputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateInputTypeTS(r)};`}})),t+="\n\t}",t}generateOutputTypeTS(e){if(!e)return"any";let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateOutputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateOutputTypeTS(r)};`}})),t+="\n\t}",t}writeApiRegisterToFile(e){o.default.writeFile(process.env.ATGEN_TYPES_FOLDERPATH+"/api.d.ts",e)}}t.ApiGenerator=u},179:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TypesRegister=void 0;class r{static instance=new r;enums;constructor(){this.enums=new Map}static getInstance(){return r.instance}registerEnum(e,t){this.enums.set(e,t)}}t.TypesRegister=r},812:function(e,t,r){var n;n=()=>{return e={442:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ApiGenerator=void 0;const o=n(r(292)),s=r(812),a=r(650),i=r(179);class u{static instance=new u;routes;typesRegister=i.TypesRegister.getInstance();constructor(){this.routes=new Map}static getInstance(){return u.instance}registerRoute(e,t){this.routes.set(e,t)}generateApiRegister(){let e="// Generated content, don't touch\n\n";e+=this.generateRouteTypeTS(),e+=this.generateMethodEnumTS(),e+=this.generateRegisteredTypesTS();const t={get:[],post:[]};for(let[r,n]of this.routes.entries())e+=this.generateRouteTS(r,n),t[n.method].push(r);e+=this.generateRoutesTypes(t),this.writeApiRegisterToFile(e)}generateMethodEnumTS(){let e="\nexport enum Method {";return Object.values(s.Method).forEach((t=>e+=`\n\t${t},`)),e+="\n}\n\n",e}generateRegisteredTypesTS(){let e="\n";return this.typesRegister.enums.forEach(((t,r)=>{e+=`\nexport enum ${r} {`,Object.entries(t).forEach((([t,r])=>e+=`\n\t${t} = ${"number"==typeof r?r:`"${r}"`},`)),e+="\n}\n"})),e}generateRouteTypeTS(){return"\ntype Route = {name: string; method: Method; path: string; requireAuth?: boolean | undefined; data?: any | undefined; res:any};\n\n"}generateRoutesTypes(e){let t="";return Object.entries(e).forEach((([e,r])=>{t+=`\nexport type T${e.toUpperCase()}Routes = Route${r.join(" | Route")};`})),t}generateRouteTS(e,t){let r=`export type TRoute${e}Input = ${this.getDataTypeTS(t.required?.body)};\n`;return r+=`export type TRoute${e}Output = ${this.generateOutputTypeTS(t.response)};\n`,r+=`\nexport type Route${e} = {\n    name: "${e}";\n    method: Method.${t.method};\n    path: "${t.path}";\n    requireAuth: ${t.auth};\n    ${t.required?.body?`data: TRoute${e}Input`:`data?: TRoute${e}Input`}\n    res: TRoute${e}Output;\n};\nexport const getRequest${e} = (${t.required?.body?`data: Route${e}["data"]`:""}): Omit<Route${e}, "res"> => ({\n    name: "${e}",\n    method: Method.${t.method},\n    path: "${t.path}",\n    requireAuth: ${t.auth},\n    ${t.required?.body?"data,":""}\n});\n\n`,r}getDataTypeTS(e){return e?"boolean"==typeof e?"any":this.generateInputTypeTS(e):'Route["data"]'}generateInputTypeTS(e){let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateInputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateInputTypeTS(r)};`}})),t+="\n\t}",t}generateOutputTypeTS(e){if(!e)return"any";let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateOutputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateOutputTypeTS(r)};`}})),t+="\n\t}",t}writeApiRegisterToFile(e){o.default.writeFile(process.env.ATGEN_TYPES_FOLDERPATH+"/api.d.ts",e)}}t.ApiGenerator=u},179:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TypesRegister=void 0;class r{static instance=new r;enums;constructor(){this.enums=new Map}static getInstance(){return r.instance}registerEnum(e,t){this.enums.set(e,t)}}t.TypesRegister=r},812:function(e,t,r){var n;n=()=>(()=>{"use strict";var e={442:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ApiGenerator=void 0;const o=n(r(292)),s=r(492),a=r(650),i=r(179);class u{static instance=new u;routes;typesRegister=i.TypesRegister.getInstance();constructor(){this.routes=new Map}static getInstance(){return u.instance}registerRoute(e,t){this.routes.set(e,t)}generateApiRegister(){let e="// Generated content, don't touch\n\n";e+=this.generateRouteTypeTS(),e+=this.generateMethodEnumTS(),e+=this.generateRegisteredTypesTS();const t={get:[],post:[]};for(let[r,n]of this.routes.entries())e+=this.generateRouteTS(r,n),t[n.method].push(r);e+=this.generateRoutesTypes(t),this.writeApiRegisterToFile(e)}generateMethodEnumTS(){let e="\nexport enum Method {";return Object.values(s.Method).forEach((t=>e+=`\n\t${t},`)),e+="\n}\n\n",e}generateRegisteredTypesTS(){let e="\n";return this.typesRegister.enums.forEach(((t,r)=>{e+=`\nexport enum ${r} {`,Object.entries(t).forEach((([t,r])=>e+=`\n\t${t} = ${"number"==typeof r?r:`"${r}"`},`)),e+="\n}\n"})),e}generateRouteTypeTS(){return"\ntype Route = {name: string; method: Method; path: string; requireAuth?: boolean | undefined; data?: any | undefined; res:any};\n\n"}generateRoutesTypes(e){let t="";return Object.entries(e).forEach((([e,r])=>{t+=`\nexport type T${e.toUpperCase()}Routes = Route${r.join(" | Route")};`})),t}generateRouteTS(e,t){let r=`export type TRoute${e}Input = ${this.getDataTypeTS(t.required?.body)};\n`;return r+=`export type TRoute${e}Output = ${this.generateOutputTypeTS(t.response)};\n`,r+=`\nexport type Route${e} = {\n    name: "${e}";\n    method: Method.${t.method};\n    path: "${t.path}";\n    requireAuth: ${t.auth};\n    ${t.required?.body?`data: TRoute${e}Input`:`data?: TRoute${e}Input`}\n    res: TRoute${e}Output;\n};\nexport const getRequest${e} = (${t.required?.body?`data: Route${e}["data"]`:""}): Omit<Route${e}, "res"> => ({\n    name: "${e}",\n    method: Method.${t.method},\n    path: "${t.path}",\n    requireAuth: ${t.auth},\n    ${t.required?.body?"data,":""}\n});\n\n`,r}getDataTypeTS(e){return e?"boolean"==typeof e?"any":this.generateInputTypeTS(e):'Route["data"]'}generateInputTypeTS(e){let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateInputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateInputTypeTS(r)};`}})),t+="\n\t}",t}generateOutputTypeTS(e){if(!e)return"any";let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateOutputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateOutputTypeTS(r)};`}})),t+="\n\t}",t}writeApiRegisterToFile(e){o.default.writeFile(process.env.ATGEN_TYPES_FOLDERPATH+"/api.d.ts",e)}}t.ApiGenerator=u},179:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TypesRegister=void 0;class r{static instance=new r;enums;constructor(){this.enums=new Map}static getInstance(){return r.instance}registerEnum(e,t){this.enums.set(e,t)}}t.TypesRegister=r},485:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidRequestError=void 0;class r extends Error{code=400;relatedData;message;constructor(e,t){super(e),this.name="InvalidValue",this.formatMessage(e,t),this.relatedData=t}formatMessage(e,t){this.message=`Bad Request : ${e}\n\tProvided Error Data :\n\t\t${JSON.stringify(t,void 0,2)}\n`}}t.InvalidRequestError=r},650:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getPropertyType=t.route=void 0;const n=r(492),o=r(442),s=r(485),a=r(507);function i(e,t){for(let[r,o]of Object.entries(e))switch(u(o)){case n.PropertyType.BASE:if(!t[r]&&!o.__required__)break;if(typeof t[r]!==o.__type__)return!1;break;case n.PropertyType.ARRAY:if(!t[r]&&o.__required__)return!1;if(t[r])for(let e of t[r])if(!i(o.__array__,e))return!1;break;case n.PropertyType.OBJECT:if(!t[r]&&!o.__required__)break;if(!t[r]||!i(o,t[r]))return!1}return!0}function u(e){const t=Object.keys(e);return t.length>=1&&t.length<=3&&t.includes("__type__")&&t.every((e=>["__type__","__required__","__nullable__"].includes(e)))?n.PropertyType.BASE:t.length>=1&&t.length<=3&&t.includes("__array__")&&t.every((e=>["__array__","__required__","__nullable__"].includes(e)))?n.PropertyType.ARRAY:n.PropertyType.OBJECT}t.route=function({name:e,method:t,path:r,auth:n,required:u,response:p}){return a.ExpressProvider.logger.log(`Create ${t}:${r} route with auth:${n}`),o.ApiGenerator.getInstance().registerRoute(e||function(e){return("/"===e[0]?e.substring(1,e.length):e).replace(/\/:[a-zA-Z]+\//,"/").split("/").reduce(((e,t)=>e+t[0].toUpperCase()+t.substring(1,t.length)),"")}(r),{method:t,path:r,auth:n,required:u,response:p}),function(e,o,p){const d=async(e,t)=>{try{if(u){if(u.body&&"GET"===e.method){const t=e.query._data;if(!t)throw new s.InvalidRequestError("No data for body with GET request.",{body:e.query._data});if("string"!=typeof t)throw new s.InvalidRequestError("Data type is invalid.",{body:e.query._data});e.body=JSON.parse(t)}!function(e,t){if(e.body&&("boolean"==typeof e.body&&!Object.keys(t.body).length||"boolean"!=typeof e.body&&!i(e.body,t.body)))throw new s.InvalidRequestError("No body or body tructure is invalid.",{body:t.body})}(u,e)}const r=await p.value(e,t);a.ExpressProvider.sendData(t,r)}catch(e){a.ExpressProvider.sendError(t,e)}},_=a.ExpressProvider.getInstance();n?_.getApp()[t](r,_.withAuth,d):a.ExpressProvider.getInstance().getApp()[t](r,d)}},t.getPropertyType=u},507:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExpressProvider=void 0;class r{static instance=new r;static logger;app;authenticate;constructor(){}static setLogger(e){r.logger=e}setApp(e){r.logger.log("Express Provider App Set ..."),this.app=e}setAuthMiddleware(e){r.logger.log("Express Provider Auth Set ..."),this.authenticate=e}get withAuth(){return this.authenticate}getApp(){return this.app}static getInstance(){return r.instance}static sendData(e,t){r.logger.log(`${e.req.path} : ${JSON.stringify(t)}`),e.status(200).json(t)}static sendText(e,t){e.status(200).send(t)}static sendError(e,t){r.logger.errorObject(t),e.status(t.code).json({error:t})}}t.ExpressProvider=r},492:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(442),t),o(r(179),t),o(r(485),t),o(r(507),t),o(r(650),t)},292:e=>{e.exports=r(292)}},t={};return function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}(492)})(),e.exports=n()},485:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidRequestError=void 0;class r extends Error{code=400;relatedData;message;constructor(e,t){super(e),this.name="InvalidValue",this.formatMessage(e,t),this.relatedData=t}formatMessage(e,t){this.message=`Bad Request : ${e}\n\tProvided Error Data :\n\t\t${JSON.stringify(t,void 0,2)}\n`}}t.InvalidRequestError=r},650:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPropertyType=t.route=void 0;const n=r(812),o=r(442),s=r(485),a=r(507);function i(e,t){for(let[r,o]of Object.entries(e))switch(u(o)){case n.PropertyType.BASE:if(!t[r]&&!o.__required__)break;if(typeof t[r]!==o.__type__)return!1;break;case n.PropertyType.ARRAY:if(!t[r]&&o.__required__)return!1;if(t[r])for(let e of t[r])if(!i(o.__array__,e))return!1;break;case n.PropertyType.OBJECT:if(!t[r]&&!o.__required__)break;if(!t[r]||!i(o,t[r]))return!1}return!0}function u(e){const t=Object.keys(e);return t.length>=1&&t.length<=3&&t.includes("__type__")&&t.every((e=>["__type__","__required__","__nullable__"].includes(e)))?n.PropertyType.BASE:t.length>=1&&t.length<=3&&t.includes("__array__")&&t.every((e=>["__array__","__required__","__nullable__"].includes(e)))?n.PropertyType.ARRAY:n.PropertyType.OBJECT}t.route=function({name:e,method:t,path:r,auth:n,required:u,response:p}){return a.ExpressProvider.logger.log(`Create ${t}:${r} route with auth:${n}`),o.ApiGenerator.getInstance().registerRoute(e||function(e){return("/"===e[0]?e.substring(1,e.length):e).replace(/\/:[a-zA-Z]+\//,"/").split("/").reduce(((e,t)=>e+t[0].toUpperCase()+t.substring(1,t.length)),"")}(r),{method:t,path:r,auth:n,required:u,response:p}),function(e,o,p){const d=async(e,t)=>{try{if(u){if(u.body&&"GET"===e.method){const t=e.query._data;if(!t)throw new s.InvalidRequestError("No data for body with GET request.",{body:e.query._data});if("string"!=typeof t)throw new s.InvalidRequestError("Data type is invalid.",{body:e.query._data});e.body=JSON.parse(t)}!function(e,t){if(e.body&&("boolean"==typeof e.body&&!Object.keys(t.body).length||"boolean"!=typeof e.body&&!i(e.body,t.body)))throw new s.InvalidRequestError("No body or body tructure is invalid.",{body:t.body})}(u,e)}const r=await p.value(e,t);a.ExpressProvider.sendData(t,r)}catch(e){a.ExpressProvider.sendError(t,e)}},_=a.ExpressProvider.getInstance();n?_.getApp()[t](r,_.withAuth,d):a.ExpressProvider.getInstance().getApp()[t](r,d)}},t.getPropertyType=u},507:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExpressProvider=void 0;class r{static instance=new r;static logger;app;authenticate;constructor(){}static setLogger(e){r.logger=e}setApp(e){r.logger.log("Express Provider App Set ..."),this.app=e}setAuthMiddleware(e){r.logger.log("Express Provider Auth Set ..."),this.authenticate=e}get withAuth(){return this.authenticate}getApp(){return this.app}static getInstance(){return r.instance}static sendData(e,t){r.logger.log(`${e.req.path} : ${JSON.stringify(t)}`),e.status(200).json(t)}static sendText(e,t){e.status(200).send(t)}static sendError(e,t){r.logger.errorObject(t),e.status(t.code).json({error:t})}}t.ExpressProvider=r},492:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(442),t),o(r(179),t),o(r(485),t),o(r(507),t),o(r(650),t),o(r(676),t)},676:(e,t)=>{"use strict";var r,n;Object.defineProperty(t,"__esModule",{value:!0}),t.Method=t.PropertyType=void 0,(n=t.PropertyType||(t.PropertyType={}))[n.BASE=0]="BASE",n[n.ARRAY=1]="ARRAY",n[n.OBJECT=2]="OBJECT",(r=t.Method||(t.Method={})).GET="get",r.POST="post"},292:e=>{"use strict";e.exports=r(292)}},t={},function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}(492);var e,t},e.exports=n()},485:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidRequestError=void 0;class r extends Error{code=400;relatedData;message;constructor(e,t){super(e),this.name="InvalidValue",this.formatMessage(e,t),this.relatedData=t}formatMessage(e,t){this.message=`Bad Request : ${e}\n\tProvided Error Data :\n\t\t${JSON.stringify(t,void 0,2)}\n`}}t.InvalidRequestError=r},650:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPropertyType=t.route=void 0;const n=r(812),o=r(442),s=r(485),a=r(507);function i(e,t){for(let[r,o]of Object.entries(e))switch(u(o)){case n.PropertyType.BASE:if(!t[r]&&!o.__required__)break;if(typeof t[r]!==o.__type__)return!1;break;case n.PropertyType.ARRAY:if(!t[r]&&o.__required__)return!1;if(t[r])for(let e of t[r])if(!i(o.__array__,e))return!1;break;case n.PropertyType.OBJECT:if(!t[r]&&!o.__required__)break;if(!t[r]||!i(o,t[r]))return!1}return!0}function u(e){const t=Object.keys(e);return t.length>=1&&t.length<=3&&t.includes("__type__")&&t.every((e=>["__type__","__required__","__nullable__"].includes(e)))?n.PropertyType.BASE:t.length>=1&&t.length<=3&&t.includes("__array__")&&t.every((e=>["__array__","__required__","__nullable__"].includes(e)))?n.PropertyType.ARRAY:n.PropertyType.OBJECT}t.route=function({name:e,method:t,path:r,auth:n,required:u,response:p}){return a.ExpressProvider.logger.log(`Create ${t}:${r} route with auth:${n}`),o.ApiGenerator.getInstance().registerRoute(e||function(e){return("/"===e[0]?e.substring(1,e.length):e).replace(/\/:[a-zA-Z]+\//,"/").split("/").reduce(((e,t)=>e+t[0].toUpperCase()+t.substring(1,t.length)),"")}(r),{method:t,path:r,auth:n,required:u,response:p}),function(e,o,p){const d=async(e,t)=>{try{if(u){if(u.body&&"GET"===e.method){const t=e.query._data;if(!t)throw new s.InvalidRequestError("No data for body with GET request.",{body:e.query._data});if("string"!=typeof t)throw new s.InvalidRequestError("Data type is invalid.",{body:e.query._data});e.body=JSON.parse(t)}!function(e,t){if(e.body&&("boolean"==typeof e.body&&!Object.keys(t.body).length||"boolean"!=typeof e.body&&!i(e.body,t.body)))throw new s.InvalidRequestError("No body or body tructure is invalid.",{body:t.body})}(u,e)}const r=await p.value(e,t);a.ExpressProvider.sendData(t,r)}catch(e){a.ExpressProvider.sendError(t,e)}},_=a.ExpressProvider.getInstance();n?_.getApp()[t](r,_.withAuth,d):a.ExpressProvider.getInstance().getApp()[t](r,d)}},t.getPropertyType=u},507:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExpressProvider=void 0;class r{static instance=new r;static logger;app;authenticate;constructor(){}static setLogger(e){r.logger=e}setApp(e){r.logger.log("Express Provider App Set ..."),this.app=e}setAuthMiddleware(e){r.logger.log("Express Provider Auth Set ..."),this.authenticate=e}get withAuth(){return this.authenticate}getApp(){return this.app}static getInstance(){return r.instance}static sendData(e,t){r.logger.log(`${e.req.path} : ${JSON.stringify(t)}`),e.status(200).json(t)}static sendText(e,t){e.status(200).send(t)}static sendError(e,t){r.logger.errorObject(t),e.status(t.code).json({error:t})}}t.ExpressProvider=r},492:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(676),t),o(r(442),t),o(r(179),t),o(r(485),t),o(r(650),t),o(r(507),t)},676:(e,t)=>{"use strict";var r,n;Object.defineProperty(t,"__esModule",{value:!0}),t.Method=t.PropertyType=void 0,(n=t.PropertyType||(t.PropertyType={}))[n.BASE=0]="BASE",n[n.ARRAY=1]="ARRAY",n[n.OBJECT=2]="OBJECT",(r=t.Method||(t.Method={})).GET="get",r.POST="post"},292:e=>{"use strict";e.exports=__webpack_require__(/*! fs/promises */ "fs/promises")}},t={},function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}(492);var e,t}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./core/api.generator.ts":
/*!*******************************!*\
  !*** ./core/api.generator.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiGenerator = void 0;
const promises_1 = __importDefault(__webpack_require__(/*! fs/promises */ "fs/promises"));
const __1 = __webpack_require__(/*! .. */ "./dist/index.js");
const route_decorator_1 = __webpack_require__(/*! ../express/decorators/route.decorator */ "./express/decorators/route.decorator.ts");
const types_register_1 = __webpack_require__(/*! ./types.register */ "./core/types.register.ts");
class ApiGenerator {
    static instance = new ApiGenerator();
    routes;
    typesRegister = types_register_1.TypesRegister.getInstance();
    constructor() {
        this.routes = new Map();
    }
    static getInstance() {
        return ApiGenerator.instance;
    }
    registerRoute(name, route) {
        this.routes.set(name, route);
    }
    generateApiRegister() {
        let ts = "// Generated content, don't touch\n\n";
        ts += this.generateRouteTypeTS();
        ts += this.generateMethodEnumTS();
        ts += this.generateRegisteredTypesTS();
        const routesTypes = {
            get: [],
            post: [],
        };
        for (let [name, route] of this.routes.entries()) {
            ts += this.generateRouteTS(name, route);
            routesTypes[route.method].push(name);
        }
        ts += this.generateRoutesTypes(routesTypes);
        this.writeApiRegisterToFile(ts);
    }
    generateMethodEnumTS() {
        let ts = `\nexport enum Method {`;
        Object.values(__1.Method).forEach((method) => (ts += `\n\t${method},`));
        ts += "\n}\n\n";
        return ts;
    }
    generateRegisteredTypesTS() {
        let ts = "\n";
        this.typesRegister.enums.forEach((type, name) => {
            ts += `\nexport enum ${name} {`;
            Object.entries(type).forEach(([key, value]) => (ts += `\n\t${key} = ${typeof value === "number" ? value : `"${value}"`},`));
            ts += "\n}\n";
        });
        return ts;
    }
    generateRouteTypeTS() {
        return `\ntype Route = {name: string; method: Method; path: string; requireAuth?: boolean | undefined; data?: any | undefined; res:any};\n\n`;
    }
    generateRoutesTypes(routesTypes) {
        let types = "";
        Object.entries(routesTypes).forEach(([method, routes]) => {
            types += `\nexport type T${method.toUpperCase()}Routes = Route${routes.join(" | Route")};`;
        });
        return types;
    }
    generateRouteTS(name, route) {
        let ts = `export type TRoute${name}Input = ${this.getDataTypeTS(route.required?.body)};\n`;
        ts += `export type TRoute${name}Output = ${this.generateOutputTypeTS(route.response)};\n`;
        ts += `
export type Route${name} = {
    name: "${name}";
    method: Method.${route.method};
    path: "${route.path}";
    requireAuth: ${route.auth};
    ${route.required?.body
            ? `data: TRoute${name}Input`
            : `data?: TRoute${name}Input`}
    res: TRoute${name}Output;
};
export const getRequest${name} = (${route.required?.body ? `data: Route${name}["data"]` : ""}): Omit<Route${name}, "res"> => ({
    name: "${name}",
    method: Method.${route.method},
    path: "${route.path}",
    requireAuth: ${route.auth},
    ${route.required?.body ? "data," : ""}
});\n\n`;
        return ts;
    }
    getDataTypeTS(body) {
        if (body) {
            return typeof body === "boolean"
                ? "any"
                : this.generateInputTypeTS(body);
        }
        else {
            return 'Route["data"]';
        }
    }
    generateInputTypeTS(type) {
        let ts = "{";
        Object.entries(type).forEach(([property, type]) => {
            if (property !== "__required__")
                switch ((0, route_decorator_1.getPropertyType)(type)) {
                    case __1.PropertyType.BASE:
                        ts += `\n\t\t${property}${type.__required__ ? ":" : "?:"}${type.__nullable__ ? " null |" : ""} ${type.__type__};`;
                        break;
                    case __1.PropertyType.ARRAY:
                        ts += `\n\t\t${property}${type.__required__ !== false ? ":" : "?:"} ${this.generateInputTypeTS(type.__array__)}[];`;
                        break;
                    case __1.PropertyType.OBJECT:
                        ts += `\n\t\t${property}${type.__required__ !== false ? ":" : "?:"}${type.__nullable__ ? " null |" : ""} ${this.generateInputTypeTS(type)};`;
                        break;
                }
        });
        ts += "\n\t}";
        return ts;
    }
    generateOutputTypeTS(type) {
        if (!type)
            return "any";
        let ts = "{";
        Object.entries(type).forEach(([property, type]) => {
            if (property !== "__required__")
                switch ((0, route_decorator_1.getPropertyType)(type)) {
                    case __1.PropertyType.BASE:
                        ts += `\n\t\t${property}${type.__required__ ? ":" : "?:"}${type.__nullable__ ? " null |" : ""} ${type.__type__};`;
                        break;
                    case __1.PropertyType.ARRAY:
                        ts += `\n\t\t${property}${type.__required__ !== false ? ":" : "?:"} ${this.generateOutputTypeTS(type.__array__)}[];`;
                        break;
                    case __1.PropertyType.OBJECT:
                        ts += `\n\t\t${property}${type.__required__ !== false ? ":" : "?:"}${type.__nullable__ ? " null |" : ""} ${this.generateOutputTypeTS(type)};`;
                        break;
                }
        });
        ts += "\n\t}";
        return ts;
    }
    writeApiRegisterToFile(ts) {
        promises_1.default.writeFile(process.env.ATGEN_TYPES_FOLDERPATH + "/api.d.ts", ts);
    }
}
exports.ApiGenerator = ApiGenerator;


/***/ }),

/***/ "./core/types.register.ts":
/*!********************************!*\
  !*** ./core/types.register.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypesRegister = void 0;
class TypesRegister {
    static instance = new TypesRegister();
    enums;
    constructor() {
        this.enums = new Map();
    }
    static getInstance() {
        return TypesRegister.instance;
    }
    registerEnum(name, type) {
        this.enums.set(name, type);
    }
}
exports.TypesRegister = TypesRegister;


/***/ }),

/***/ "./errors/invalid-request.error.ts":
/*!*****************************************!*\
  !*** ./errors/invalid-request.error.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InvalidRequestError = void 0;
class InvalidRequestError extends Error {
    code = 400;
    relatedData;
    message;
    constructor(message, relatedData) {
        super(message);
        this.name = "InvalidValue";
        this.formatMessage(message, relatedData);
        this.relatedData = relatedData;
    }
    formatMessage(message, relatedData) {
        this.message = `Bad Request : ${message}\n\tProvided Error Data :\n\t\t${JSON.stringify(relatedData, undefined, 2)}\n`;
    }
}
exports.InvalidRequestError = InvalidRequestError;


/***/ }),

/***/ "./express/decorators/route.decorator.ts":
/*!***********************************************!*\
  !*** ./express/decorators/route.decorator.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPropertyType = exports.route = void 0;
const __1 = __webpack_require__(/*! ../.. */ "./dist/index.js");
const api_generator_1 = __webpack_require__(/*! ../../core/api.generator */ "./core/api.generator.ts");
const invalid_request_error_1 = __webpack_require__(/*! ../../errors/invalid-request.error */ "./errors/invalid-request.error.ts");
const express_provider_1 = __webpack_require__(/*! ../express.provider */ "./express/express.provider.ts");
function route({ name, method, path, auth, required, response, }) {
    express_provider_1.ExpressProvider.logger.log(`Create ${method}:${path} route with auth:${auth}`);
    api_generator_1.ApiGenerator.getInstance().registerRoute(name || generateDefaultName(path), { method, path, auth, required, response });
    return function (target, propertyKey, descriptor) {
        const response = async (req, res) => {
            try {
                if (required) {
                    if (required.body && req.method === "GET") {
                        const data = req.query._data;
                        if (!data)
                            throw new invalid_request_error_1.InvalidRequestError("No data for body with GET request.", { body: req.query._data });
                        if (!(typeof data === "string"))
                            throw new invalid_request_error_1.InvalidRequestError("Data type is invalid.", { body: req.query._data });
                        req.body = JSON.parse(data);
                    }
                    checkRequirements(required, req);
                }
                const original = await descriptor.value(req, res);
                express_provider_1.ExpressProvider.sendData(res, original);
            }
            catch (err) {
                express_provider_1.ExpressProvider.sendError(res, err);
            }
        };
        const server = express_provider_1.ExpressProvider.getInstance();
        if (auth)
            server.getApp()[method](path, server.withAuth, response);
        else
            express_provider_1.ExpressProvider.getInstance().getApp()[method](path, response);
    };
}
exports.route = route;
function checkRequirements(required, req) {
    if (required.body) {
        if ((typeof required.body === "boolean" &&
            !Object.keys(req.body).length) ||
            (typeof required.body !== "boolean" &&
                !validateSchema(required.body, req.body)))
            throw new invalid_request_error_1.InvalidRequestError("No body or body tructure is invalid.", { body: req.body });
    }
    return true;
}
function validateSchema(schema, object) {
    for (let [property, type] of Object.entries(schema)) {
        switch (getPropertyType(type)) {
            case __1.PropertyType.BASE:
                if (!object[property] && !type.__required__)
                    break;
                if (typeof object[property] !== type.__type__)
                    return false;
                break;
            case __1.PropertyType.ARRAY:
                if (!object[property] && type.__required__)
                    return false;
                if (object[property])
                    for (let elem of object[property]) {
                        const val = validateSchema(type.__array__, elem);
                        if (!val)
                            return false;
                    }
                break;
            case __1.PropertyType.OBJECT:
                if (!object[property] && !type.__required__)
                    break;
                if (!object[property] ||
                    !validateSchema(type, object[property]))
                    return false;
                break;
        }
    }
    return true;
}
function getPropertyType(type) {
    const keys = Object.keys(type);
    if (keys.length >= 1 &&
        keys.length <= 3 &&
        keys.includes("__type__") &&
        keys.every((key) => ["__type__", "__required__", "__nullable__"].includes(key))) {
        return __1.PropertyType.BASE;
    }
    else if (keys.length >= 1 &&
        keys.length <= 3 &&
        keys.includes("__array__") &&
        keys.every((key) => ["__array__", "__required__", "__nullable__"].includes(key))) {
        return __1.PropertyType.ARRAY;
    }
    else {
        return __1.PropertyType.OBJECT;
    }
}
exports.getPropertyType = getPropertyType;
function generateDefaultName(path) {
    const purePath = path[0] === "/" ? path.substring(1, path.length) : path;
    const nameParts = purePath.replace(/\/:[a-zA-Z]+\//, "/").split("/");
    return nameParts.reduce((name, part) => {
        const upper = part[0].toUpperCase();
        return name + upper + part.substring(1, part.length);
    }, "");
}


/***/ }),

/***/ "./express/express.provider.ts":
/*!*************************************!*\
  !*** ./express/express.provider.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpressProvider = void 0;
class ExpressProvider {
    static instance = new ExpressProvider();
    static logger;
    app;
    authenticate;
    constructor() { }
    static setLogger(logger) {
        ExpressProvider.logger = logger;
    }
    setApp(app) {
        ExpressProvider.logger.log("Express Provider App Set ...");
        this.app = app;
    }
    setAuthMiddleware(authenticate) {
        ExpressProvider.logger.log("Express Provider Auth Set ...");
        this.authenticate = authenticate;
    }
    get withAuth() {
        return this.authenticate;
    }
    getApp() {
        return this.app;
    }
    static getInstance() {
        return ExpressProvider.instance;
    }
    static sendData(res, data) {
        ExpressProvider.logger.log(`${res.req.path} : ${JSON.stringify(data)}`);
        res.status(200).json(data);
    }
    static sendText(res, message) {
        res.status(200).send(message);
    }
    static sendError(res, error) {
        ExpressProvider.logger.errorObject(error);
        res.status(error.code).json({ error });
    }
}
exports.ExpressProvider = ExpressProvider;


/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./types */ "./types.ts"), exports);
__exportStar(__webpack_require__(/*! ./core/api.generator */ "./core/api.generator.ts"), exports);
__exportStar(__webpack_require__(/*! ./core/types.register */ "./core/types.register.ts"), exports);
__exportStar(__webpack_require__(/*! ./errors/invalid-request.error */ "./errors/invalid-request.error.ts"), exports);
__exportStar(__webpack_require__(/*! ./express/decorators/route.decorator */ "./express/decorators/route.decorator.ts"), exports);
__exportStar(__webpack_require__(/*! ./express/express.provider */ "./express/express.provider.ts"), exports);


/***/ }),

/***/ "./types.ts":
/*!******************!*\
  !*** ./types.ts ***!
  \******************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Method = exports.PropertyType = void 0;
var PropertyType;
(function (PropertyType) {
    PropertyType[PropertyType["BASE"] = 0] = "BASE";
    PropertyType[PropertyType["ARRAY"] = 1] = "ARRAY";
    PropertyType[PropertyType["OBJECT"] = 2] = "OBJECT";
})(PropertyType = exports.PropertyType || (exports.PropertyType = {}));
var Method;
(function (Method) {
    Method["GET"] = "get";
    Method["POST"] = "post";
})(Method = exports.Method || (exports.Method = {}));


/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7OztVRXRCQTtVQUNBO1VBQ0E7VUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0FUR2VuL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9BVEdlbi8uL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQVRHZW4vLi9jb3JlL2FwaS5nZW5lcmF0b3IudHMiLCJ3ZWJwYWNrOi8vQVRHZW4vLi9jb3JlL3R5cGVzLnJlZ2lzdGVyLnRzIiwid2VicGFjazovL0FUR2VuLy4vZXJyb3JzL2ludmFsaWQtcmVxdWVzdC5lcnJvci50cyIsIndlYnBhY2s6Ly9BVEdlbi8uL2V4cHJlc3MvZGVjb3JhdG9ycy9yb3V0ZS5kZWNvcmF0b3IudHMiLCJ3ZWJwYWNrOi8vQVRHZW4vLi9leHByZXNzL2V4cHJlc3MucHJvdmlkZXIudHMiLCJ3ZWJwYWNrOi8vQVRHZW4vLi9pbmRleC50cyIsIndlYnBhY2s6Ly9BVEdlbi8uL3R5cGVzLnRzIiwid2VicGFjazovL0FUR2VuL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJmcy9wcm9taXNlc1wiIiwid2VicGFjazovL0FUR2VuL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0FUR2VuL3dlYnBhY2svYmVmb3JlLXN0YXJ0dXAiLCJ3ZWJwYWNrOi8vQVRHZW4vd2VicGFjay9zdGFydHVwIiwid2VicGFjazovL0FUR2VuL3dlYnBhY2svYWZ0ZXItc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIkFUR2VuXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkFUR2VuXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkFUR2VuXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgKCkgPT4ge1xucmV0dXJuICIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiQVRHZW5cIixbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLkFUR2VuPXQoKTplLkFUR2VuPXQoKX0odGhpcywoKCk9PntyZXR1cm4gZT17NDQyOmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkFwaUdlbmVyYXRvcj12b2lkIDA7Y29uc3Qgbz1uKHIoMjkyKSkscz1yKDgxMiksYT1yKDY1MCksaT1yKDE3OSk7Y2xhc3MgdXtzdGF0aWMgaW5zdGFuY2U9bmV3IHU7cm91dGVzO3R5cGVzUmVnaXN0ZXI9aS5UeXBlc1JlZ2lzdGVyLmdldEluc3RhbmNlKCk7Y29uc3RydWN0b3IoKXt0aGlzLnJvdXRlcz1uZXcgTWFwfXN0YXRpYyBnZXRJbnN0YW5jZSgpe3JldHVybiB1Lmluc3RhbmNlfXJlZ2lzdGVyUm91dGUoZSx0KXt0aGlzLnJvdXRlcy5zZXQoZSx0KX1nZW5lcmF0ZUFwaVJlZ2lzdGVyKCl7bGV0IGU9XCIvLyBHZW5lcmF0ZWQgY29udGVudCwgZG9uJ3QgdG91Y2hcXG5cXG5cIjtlKz10aGlzLmdlbmVyYXRlUm91dGVUeXBlVFMoKSxlKz10aGlzLmdlbmVyYXRlTWV0aG9kRW51bVRTKCksZSs9dGhpcy5nZW5lcmF0ZVJlZ2lzdGVyZWRUeXBlc1RTKCk7Y29uc3QgdD17Z2V0OltdLHBvc3Q6W119O2ZvcihsZXRbcixuXW9mIHRoaXMucm91dGVzLmVudHJpZXMoKSllKz10aGlzLmdlbmVyYXRlUm91dGVUUyhyLG4pLHRbbi5tZXRob2RdLnB1c2gocik7ZSs9dGhpcy5nZW5lcmF0ZVJvdXRlc1R5cGVzKHQpLHRoaXMud3JpdGVBcGlSZWdpc3RlclRvRmlsZShlKX1nZW5lcmF0ZU1ldGhvZEVudW1UUygpe2xldCBlPVwiXFxuZXhwb3J0IGVudW0gTWV0aG9kIHtcIjtyZXR1cm4gT2JqZWN0LnZhbHVlcyhzLk1ldGhvZCkuZm9yRWFjaCgodD0+ZSs9YFxcblxcdCR7dH0sYCkpLGUrPVwiXFxufVxcblxcblwiLGV9Z2VuZXJhdGVSZWdpc3RlcmVkVHlwZXNUUygpe2xldCBlPVwiXFxuXCI7cmV0dXJuIHRoaXMudHlwZXNSZWdpc3Rlci5lbnVtcy5mb3JFYWNoKCgodCxyKT0+e2UrPWBcXG5leHBvcnQgZW51bSAke3J9IHtgLE9iamVjdC5lbnRyaWVzKHQpLmZvckVhY2goKChbdCxyXSk9PmUrPWBcXG5cXHQke3R9ID0gJHtcIm51bWJlclwiPT10eXBlb2Ygcj9yOmBcIiR7cn1cImB9LGApKSxlKz1cIlxcbn1cXG5cIn0pKSxlfWdlbmVyYXRlUm91dGVUeXBlVFMoKXtyZXR1cm5cIlxcbnR5cGUgUm91dGUgPSB7bmFtZTogc3RyaW5nOyBtZXRob2Q6IE1ldGhvZDsgcGF0aDogc3RyaW5nOyByZXF1aXJlQXV0aD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7IGRhdGE/OiBhbnkgfCB1bmRlZmluZWQ7IHJlczphbnl9O1xcblxcblwifWdlbmVyYXRlUm91dGVzVHlwZXMoZSl7bGV0IHQ9XCJcIjtyZXR1cm4gT2JqZWN0LmVudHJpZXMoZSkuZm9yRWFjaCgoKFtlLHJdKT0+e3QrPWBcXG5leHBvcnQgdHlwZSBUJHtlLnRvVXBwZXJDYXNlKCl9Um91dGVzID0gUm91dGUke3Iuam9pbihcIiB8IFJvdXRlXCIpfTtgfSkpLHR9Z2VuZXJhdGVSb3V0ZVRTKGUsdCl7bGV0IHI9YGV4cG9ydCB0eXBlIFRSb3V0ZSR7ZX1JbnB1dCA9ICR7dGhpcy5nZXREYXRhVHlwZVRTKHQucmVxdWlyZWQ/LmJvZHkpfTtcXG5gO3JldHVybiByKz1gZXhwb3J0IHR5cGUgVFJvdXRlJHtlfU91dHB1dCA9ICR7dGhpcy5nZW5lcmF0ZU91dHB1dFR5cGVUUyh0LnJlc3BvbnNlKX07XFxuYCxyKz1gXFxuZXhwb3J0IHR5cGUgUm91dGUke2V9ID0ge1xcbiAgICBuYW1lOiBcIiR7ZX1cIjtcXG4gICAgbWV0aG9kOiBNZXRob2QuJHt0Lm1ldGhvZH07XFxuICAgIHBhdGg6IFwiJHt0LnBhdGh9XCI7XFxuICAgIHJlcXVpcmVBdXRoOiAke3QuYXV0aH07XFxuICAgICR7dC5yZXF1aXJlZD8uYm9keT9gZGF0YTogVFJvdXRlJHtlfUlucHV0YDpgZGF0YT86IFRSb3V0ZSR7ZX1JbnB1dGB9XFxuICAgIHJlczogVFJvdXRlJHtlfU91dHB1dDtcXG59O1xcbmV4cG9ydCBjb25zdCBnZXRSZXF1ZXN0JHtlfSA9ICgke3QucmVxdWlyZWQ/LmJvZHk/YGRhdGE6IFJvdXRlJHtlfVtcImRhdGFcIl1gOlwiXCJ9KTogT21pdDxSb3V0ZSR7ZX0sIFwicmVzXCI+ID0+ICh7XFxuICAgIG5hbWU6IFwiJHtlfVwiLFxcbiAgICBtZXRob2Q6IE1ldGhvZC4ke3QubWV0aG9kfSxcXG4gICAgcGF0aDogXCIke3QucGF0aH1cIixcXG4gICAgcmVxdWlyZUF1dGg6ICR7dC5hdXRofSxcXG4gICAgJHt0LnJlcXVpcmVkPy5ib2R5P1wiZGF0YSxcIjpcIlwifVxcbn0pO1xcblxcbmAscn1nZXREYXRhVHlwZVRTKGUpe3JldHVybiBlP1wiYm9vbGVhblwiPT10eXBlb2YgZT9cImFueVwiOnRoaXMuZ2VuZXJhdGVJbnB1dFR5cGVUUyhlKTonUm91dGVbXCJkYXRhXCJdJ31nZW5lcmF0ZUlucHV0VHlwZVRTKGUpe2xldCB0PVwie1wiO3JldHVybiBPYmplY3QuZW50cmllcyhlKS5mb3JFYWNoKCgoW2Uscl0pPT57aWYoXCJfX3JlcXVpcmVkX19cIiE9PWUpc3dpdGNoKCgwLGEuZ2V0UHJvcGVydHlUeXBlKShyKSl7Y2FzZSBzLlByb3BlcnR5VHlwZS5CQVNFOnQrPWBcXG5cXHRcXHQke2V9JHtyLl9fcmVxdWlyZWRfXz9cIjpcIjpcIj86XCJ9JHtyLl9fbnVsbGFibGVfXz9cIiBudWxsIHxcIjpcIlwifSAke3IuX190eXBlX199O2A7YnJlYWs7Y2FzZSBzLlByb3BlcnR5VHlwZS5BUlJBWTp0Kz1gXFxuXFx0XFx0JHtlfSR7ITEhPT1yLl9fcmVxdWlyZWRfXz9cIjpcIjpcIj86XCJ9ICR7dGhpcy5nZW5lcmF0ZUlucHV0VHlwZVRTKHIuX19hcnJheV9fKX1bXTtgO2JyZWFrO2Nhc2Ugcy5Qcm9wZXJ0eVR5cGUuT0JKRUNUOnQrPWBcXG5cXHRcXHQke2V9JHshMSE9PXIuX19yZXF1aXJlZF9fP1wiOlwiOlwiPzpcIn0ke3IuX19udWxsYWJsZV9fP1wiIG51bGwgfFwiOlwiXCJ9ICR7dGhpcy5nZW5lcmF0ZUlucHV0VHlwZVRTKHIpfTtgfX0pKSx0Kz1cIlxcblxcdH1cIix0fWdlbmVyYXRlT3V0cHV0VHlwZVRTKGUpe2lmKCFlKXJldHVyblwiYW55XCI7bGV0IHQ9XCJ7XCI7cmV0dXJuIE9iamVjdC5lbnRyaWVzKGUpLmZvckVhY2goKChbZSxyXSk9PntpZihcIl9fcmVxdWlyZWRfX1wiIT09ZSlzd2l0Y2goKDAsYS5nZXRQcm9wZXJ0eVR5cGUpKHIpKXtjYXNlIHMuUHJvcGVydHlUeXBlLkJBU0U6dCs9YFxcblxcdFxcdCR7ZX0ke3IuX19yZXF1aXJlZF9fP1wiOlwiOlwiPzpcIn0ke3IuX19udWxsYWJsZV9fP1wiIG51bGwgfFwiOlwiXCJ9ICR7ci5fX3R5cGVfX307YDticmVhaztjYXNlIHMuUHJvcGVydHlUeXBlLkFSUkFZOnQrPWBcXG5cXHRcXHQke2V9JHshMSE9PXIuX19yZXF1aXJlZF9fP1wiOlwiOlwiPzpcIn0gJHt0aGlzLmdlbmVyYXRlT3V0cHV0VHlwZVRTKHIuX19hcnJheV9fKX1bXTtgO2JyZWFrO2Nhc2Ugcy5Qcm9wZXJ0eVR5cGUuT0JKRUNUOnQrPWBcXG5cXHRcXHQke2V9JHshMSE9PXIuX19yZXF1aXJlZF9fP1wiOlwiOlwiPzpcIn0ke3IuX19udWxsYWJsZV9fP1wiIG51bGwgfFwiOlwiXCJ9ICR7dGhpcy5nZW5lcmF0ZU91dHB1dFR5cGVUUyhyKX07YH19KSksdCs9XCJcXG5cXHR9XCIsdH13cml0ZUFwaVJlZ2lzdGVyVG9GaWxlKGUpe28uZGVmYXVsdC53cml0ZUZpbGUocHJvY2Vzcy5lbnYuQVRHRU5fVFlQRVNfRk9MREVSUEFUSCtcIi9hcGkuZC50c1wiLGUpfX10LkFwaUdlbmVyYXRvcj11fSwxNzk6KGUsdCk9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlR5cGVzUmVnaXN0ZXI9dm9pZCAwO2NsYXNzIHJ7c3RhdGljIGluc3RhbmNlPW5ldyByO2VudW1zO2NvbnN0cnVjdG9yKCl7dGhpcy5lbnVtcz1uZXcgTWFwfXN0YXRpYyBnZXRJbnN0YW5jZSgpe3JldHVybiByLmluc3RhbmNlfXJlZ2lzdGVyRW51bShlLHQpe3RoaXMuZW51bXMuc2V0KGUsdCl9fXQuVHlwZXNSZWdpc3Rlcj1yfSw4MTI6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO249KCk9PntyZXR1cm4gZT17NDQyOmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkFwaUdlbmVyYXRvcj12b2lkIDA7Y29uc3Qgbz1uKHIoMjkyKSkscz1yKDgxMiksYT1yKDY1MCksaT1yKDE3OSk7Y2xhc3MgdXtzdGF0aWMgaW5zdGFuY2U9bmV3IHU7cm91dGVzO3R5cGVzUmVnaXN0ZXI9aS5UeXBlc1JlZ2lzdGVyLmdldEluc3RhbmNlKCk7Y29uc3RydWN0b3IoKXt0aGlzLnJvdXRlcz1uZXcgTWFwfXN0YXRpYyBnZXRJbnN0YW5jZSgpe3JldHVybiB1Lmluc3RhbmNlfXJlZ2lzdGVyUm91dGUoZSx0KXt0aGlzLnJvdXRlcy5zZXQoZSx0KX1nZW5lcmF0ZUFwaVJlZ2lzdGVyKCl7bGV0IGU9XCIvLyBHZW5lcmF0ZWQgY29udGVudCwgZG9uJ3QgdG91Y2hcXG5cXG5cIjtlKz10aGlzLmdlbmVyYXRlUm91dGVUeXBlVFMoKSxlKz10aGlzLmdlbmVyYXRlTWV0aG9kRW51bVRTKCksZSs9dGhpcy5nZW5lcmF0ZVJlZ2lzdGVyZWRUeXBlc1RTKCk7Y29uc3QgdD17Z2V0OltdLHBvc3Q6W119O2ZvcihsZXRbcixuXW9mIHRoaXMucm91dGVzLmVudHJpZXMoKSllKz10aGlzLmdlbmVyYXRlUm91dGVUUyhyLG4pLHRbbi5tZXRob2RdLnB1c2gocik7ZSs9dGhpcy5nZW5lcmF0ZVJvdXRlc1R5cGVzKHQpLHRoaXMud3JpdGVBcGlSZWdpc3RlclRvRmlsZShlKX1nZW5lcmF0ZU1ldGhvZEVudW1UUygpe2xldCBlPVwiXFxuZXhwb3J0IGVudW0gTWV0aG9kIHtcIjtyZXR1cm4gT2JqZWN0LnZhbHVlcyhzLk1ldGhvZCkuZm9yRWFjaCgodD0+ZSs9YFxcblxcdCR7dH0sYCkpLGUrPVwiXFxufVxcblxcblwiLGV9Z2VuZXJhdGVSZWdpc3RlcmVkVHlwZXNUUygpe2xldCBlPVwiXFxuXCI7cmV0dXJuIHRoaXMudHlwZXNSZWdpc3Rlci5lbnVtcy5mb3JFYWNoKCgodCxyKT0+e2UrPWBcXG5leHBvcnQgZW51bSAke3J9IHtgLE9iamVjdC5lbnRyaWVzKHQpLmZvckVhY2goKChbdCxyXSk9PmUrPWBcXG5cXHQke3R9ID0gJHtcIm51bWJlclwiPT10eXBlb2Ygcj9yOmBcIiR7cn1cImB9LGApKSxlKz1cIlxcbn1cXG5cIn0pKSxlfWdlbmVyYXRlUm91dGVUeXBlVFMoKXtyZXR1cm5cIlxcbnR5cGUgUm91dGUgPSB7bmFtZTogc3RyaW5nOyBtZXRob2Q6IE1ldGhvZDsgcGF0aDogc3RyaW5nOyByZXF1aXJlQXV0aD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7IGRhdGE/OiBhbnkgfCB1bmRlZmluZWQ7IHJlczphbnl9O1xcblxcblwifWdlbmVyYXRlUm91dGVzVHlwZXMoZSl7bGV0IHQ9XCJcIjtyZXR1cm4gT2JqZWN0LmVudHJpZXMoZSkuZm9yRWFjaCgoKFtlLHJdKT0+e3QrPWBcXG5leHBvcnQgdHlwZSBUJHtlLnRvVXBwZXJDYXNlKCl9Um91dGVzID0gUm91dGUke3Iuam9pbihcIiB8IFJvdXRlXCIpfTtgfSkpLHR9Z2VuZXJhdGVSb3V0ZVRTKGUsdCl7bGV0IHI9YGV4cG9ydCB0eXBlIFRSb3V0ZSR7ZX1JbnB1dCA9ICR7dGhpcy5nZXREYXRhVHlwZVRTKHQucmVxdWlyZWQ/LmJvZHkpfTtcXG5gO3JldHVybiByKz1gZXhwb3J0IHR5cGUgVFJvdXRlJHtlfU91dHB1dCA9ICR7dGhpcy5nZW5lcmF0ZU91dHB1dFR5cGVUUyh0LnJlc3BvbnNlKX07XFxuYCxyKz1gXFxuZXhwb3J0IHR5cGUgUm91dGUke2V9ID0ge1xcbiAgICBuYW1lOiBcIiR7ZX1cIjtcXG4gICAgbWV0aG9kOiBNZXRob2QuJHt0Lm1ldGhvZH07XFxuICAgIHBhdGg6IFwiJHt0LnBhdGh9XCI7XFxuICAgIHJlcXVpcmVBdXRoOiAke3QuYXV0aH07XFxuICAgICR7dC5yZXF1aXJlZD8uYm9keT9gZGF0YTogVFJvdXRlJHtlfUlucHV0YDpgZGF0YT86IFRSb3V0ZSR7ZX1JbnB1dGB9XFxuICAgIHJlczogVFJvdXRlJHtlfU91dHB1dDtcXG59O1xcbmV4cG9ydCBjb25zdCBnZXRSZXF1ZXN0JHtlfSA9ICgke3QucmVxdWlyZWQ/LmJvZHk/YGRhdGE6IFJvdXRlJHtlfVtcImRhdGFcIl1gOlwiXCJ9KTogT21pdDxSb3V0ZSR7ZX0sIFwicmVzXCI+ID0+ICh7XFxuICAgIG5hbWU6IFwiJHtlfVwiLFxcbiAgICBtZXRob2Q6IE1ldGhvZC4ke3QubWV0aG9kfSxcXG4gICAgcGF0aDogXCIke3QucGF0aH1cIixcXG4gICAgcmVxdWlyZUF1dGg6ICR7dC5hdXRofSxcXG4gICAgJHt0LnJlcXVpcmVkPy5ib2R5P1wiZGF0YSxcIjpcIlwifVxcbn0pO1xcblxcbmAscn1nZXREYXRhVHlwZVRTKGUpe3JldHVybiBlP1wiYm9vbGVhblwiPT10eXBlb2YgZT9cImFueVwiOnRoaXMuZ2VuZXJhdGVJbnB1dFR5cGVUUyhlKTonUm91dGVbXCJkYXRhXCJdJ31nZW5lcmF0ZUlucHV0VHlwZVRTKGUpe2xldCB0PVwie1wiO3JldHVybiBPYmplY3QuZW50cmllcyhlKS5mb3JFYWNoKCgoW2Uscl0pPT57aWYoXCJfX3JlcXVpcmVkX19cIiE9PWUpc3dpdGNoKCgwLGEuZ2V0UHJvcGVydHlUeXBlKShyKSl7Y2FzZSBzLlByb3BlcnR5VHlwZS5CQVNFOnQrPWBcXG5cXHRcXHQke2V9JHtyLl9fcmVxdWlyZWRfXz9cIjpcIjpcIj86XCJ9JHtyLl9fbnVsbGFibGVfXz9cIiBudWxsIHxcIjpcIlwifSAke3IuX190eXBlX199O2A7YnJlYWs7Y2FzZSBzLlByb3BlcnR5VHlwZS5BUlJBWTp0Kz1gXFxuXFx0XFx0JHtlfSR7ITEhPT1yLl9fcmVxdWlyZWRfXz9cIjpcIjpcIj86XCJ9ICR7dGhpcy5nZW5lcmF0ZUlucHV0VHlwZVRTKHIuX19hcnJheV9fKX1bXTtgO2JyZWFrO2Nhc2Ugcy5Qcm9wZXJ0eVR5cGUuT0JKRUNUOnQrPWBcXG5cXHRcXHQke2V9JHshMSE9PXIuX19yZXF1aXJlZF9fP1wiOlwiOlwiPzpcIn0ke3IuX19udWxsYWJsZV9fP1wiIG51bGwgfFwiOlwiXCJ9ICR7dGhpcy5nZW5lcmF0ZUlucHV0VHlwZVRTKHIpfTtgfX0pKSx0Kz1cIlxcblxcdH1cIix0fWdlbmVyYXRlT3V0cHV0VHlwZVRTKGUpe2lmKCFlKXJldHVyblwiYW55XCI7bGV0IHQ9XCJ7XCI7cmV0dXJuIE9iamVjdC5lbnRyaWVzKGUpLmZvckVhY2goKChbZSxyXSk9PntpZihcIl9fcmVxdWlyZWRfX1wiIT09ZSlzd2l0Y2goKDAsYS5nZXRQcm9wZXJ0eVR5cGUpKHIpKXtjYXNlIHMuUHJvcGVydHlUeXBlLkJBU0U6dCs9YFxcblxcdFxcdCR7ZX0ke3IuX19yZXF1aXJlZF9fP1wiOlwiOlwiPzpcIn0ke3IuX19udWxsYWJsZV9fP1wiIG51bGwgfFwiOlwiXCJ9ICR7ci5fX3R5cGVfX307YDticmVhaztjYXNlIHMuUHJvcGVydHlUeXBlLkFSUkFZOnQrPWBcXG5cXHRcXHQke2V9JHshMSE9PXIuX19yZXF1aXJlZF9fP1wiOlwiOlwiPzpcIn0gJHt0aGlzLmdlbmVyYXRlT3V0cHV0VHlwZVRTKHIuX19hcnJheV9fKX1bXTtgO2JyZWFrO2Nhc2Ugcy5Qcm9wZXJ0eVR5cGUuT0JKRUNUOnQrPWBcXG5cXHRcXHQke2V9JHshMSE9PXIuX19yZXF1aXJlZF9fP1wiOlwiOlwiPzpcIn0ke3IuX19udWxsYWJsZV9fP1wiIG51bGwgfFwiOlwiXCJ9ICR7dGhpcy5nZW5lcmF0ZU91dHB1dFR5cGVUUyhyKX07YH19KSksdCs9XCJcXG5cXHR9XCIsdH13cml0ZUFwaVJlZ2lzdGVyVG9GaWxlKGUpe28uZGVmYXVsdC53cml0ZUZpbGUocHJvY2Vzcy5lbnYuQVRHRU5fVFlQRVNfRk9MREVSUEFUSCtcIi9hcGkuZC50c1wiLGUpfX10LkFwaUdlbmVyYXRvcj11fSwxNzk6KGUsdCk9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlR5cGVzUmVnaXN0ZXI9dm9pZCAwO2NsYXNzIHJ7c3RhdGljIGluc3RhbmNlPW5ldyByO2VudW1zO2NvbnN0cnVjdG9yKCl7dGhpcy5lbnVtcz1uZXcgTWFwfXN0YXRpYyBnZXRJbnN0YW5jZSgpe3JldHVybiByLmluc3RhbmNlfXJlZ2lzdGVyRW51bShlLHQpe3RoaXMuZW51bXMuc2V0KGUsdCl9fXQuVHlwZXNSZWdpc3Rlcj1yfSw4MTI6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO249KCk9PigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBlPXs0NDI6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQXBpR2VuZXJhdG9yPXZvaWQgMDtjb25zdCBvPW4ocigyOTIpKSxzPXIoNDkyKSxhPXIoNjUwKSxpPXIoMTc5KTtjbGFzcyB1e3N0YXRpYyBpbnN0YW5jZT1uZXcgdTtyb3V0ZXM7dHlwZXNSZWdpc3Rlcj1pLlR5cGVzUmVnaXN0ZXIuZ2V0SW5zdGFuY2UoKTtjb25zdHJ1Y3Rvcigpe3RoaXMucm91dGVzPW5ldyBNYXB9c3RhdGljIGdldEluc3RhbmNlKCl7cmV0dXJuIHUuaW5zdGFuY2V9cmVnaXN0ZXJSb3V0ZShlLHQpe3RoaXMucm91dGVzLnNldChlLHQpfWdlbmVyYXRlQXBpUmVnaXN0ZXIoKXtsZXQgZT1cIi8vIEdlbmVyYXRlZCBjb250ZW50LCBkb24ndCB0b3VjaFxcblxcblwiO2UrPXRoaXMuZ2VuZXJhdGVSb3V0ZVR5cGVUUygpLGUrPXRoaXMuZ2VuZXJhdGVNZXRob2RFbnVtVFMoKSxlKz10aGlzLmdlbmVyYXRlUmVnaXN0ZXJlZFR5cGVzVFMoKTtjb25zdCB0PXtnZXQ6W10scG9zdDpbXX07Zm9yKGxldFtyLG5db2YgdGhpcy5yb3V0ZXMuZW50cmllcygpKWUrPXRoaXMuZ2VuZXJhdGVSb3V0ZVRTKHIsbiksdFtuLm1ldGhvZF0ucHVzaChyKTtlKz10aGlzLmdlbmVyYXRlUm91dGVzVHlwZXModCksdGhpcy53cml0ZUFwaVJlZ2lzdGVyVG9GaWxlKGUpfWdlbmVyYXRlTWV0aG9kRW51bVRTKCl7bGV0IGU9XCJcXG5leHBvcnQgZW51bSBNZXRob2Qge1wiO3JldHVybiBPYmplY3QudmFsdWVzKHMuTWV0aG9kKS5mb3JFYWNoKCh0PT5lKz1gXFxuXFx0JHt0fSxgKSksZSs9XCJcXG59XFxuXFxuXCIsZX1nZW5lcmF0ZVJlZ2lzdGVyZWRUeXBlc1RTKCl7bGV0IGU9XCJcXG5cIjtyZXR1cm4gdGhpcy50eXBlc1JlZ2lzdGVyLmVudW1zLmZvckVhY2goKCh0LHIpPT57ZSs9YFxcbmV4cG9ydCBlbnVtICR7cn0ge2AsT2JqZWN0LmVudHJpZXModCkuZm9yRWFjaCgoKFt0LHJdKT0+ZSs9YFxcblxcdCR7dH0gPSAke1wibnVtYmVyXCI9PXR5cGVvZiByP3I6YFwiJHtyfVwiYH0sYCkpLGUrPVwiXFxufVxcblwifSkpLGV9Z2VuZXJhdGVSb3V0ZVR5cGVUUygpe3JldHVyblwiXFxudHlwZSBSb3V0ZSA9IHtuYW1lOiBzdHJpbmc7IG1ldGhvZDogTWV0aG9kOyBwYXRoOiBzdHJpbmc7IHJlcXVpcmVBdXRoPzogYm9vbGVhbiB8IHVuZGVmaW5lZDsgZGF0YT86IGFueSB8IHVuZGVmaW5lZDsgcmVzOmFueX07XFxuXFxuXCJ9Z2VuZXJhdGVSb3V0ZXNUeXBlcyhlKXtsZXQgdD1cIlwiO3JldHVybiBPYmplY3QuZW50cmllcyhlKS5mb3JFYWNoKCgoW2Uscl0pPT57dCs9YFxcbmV4cG9ydCB0eXBlIFQke2UudG9VcHBlckNhc2UoKX1Sb3V0ZXMgPSBSb3V0ZSR7ci5qb2luKFwiIHwgUm91dGVcIil9O2B9KSksdH1nZW5lcmF0ZVJvdXRlVFMoZSx0KXtsZXQgcj1gZXhwb3J0IHR5cGUgVFJvdXRlJHtlfUlucHV0ID0gJHt0aGlzLmdldERhdGFUeXBlVFModC5yZXF1aXJlZD8uYm9keSl9O1xcbmA7cmV0dXJuIHIrPWBleHBvcnQgdHlwZSBUUm91dGUke2V9T3V0cHV0ID0gJHt0aGlzLmdlbmVyYXRlT3V0cHV0VHlwZVRTKHQucmVzcG9uc2UpfTtcXG5gLHIrPWBcXG5leHBvcnQgdHlwZSBSb3V0ZSR7ZX0gPSB7XFxuICAgIG5hbWU6IFwiJHtlfVwiO1xcbiAgICBtZXRob2Q6IE1ldGhvZC4ke3QubWV0aG9kfTtcXG4gICAgcGF0aDogXCIke3QucGF0aH1cIjtcXG4gICAgcmVxdWlyZUF1dGg6ICR7dC5hdXRofTtcXG4gICAgJHt0LnJlcXVpcmVkPy5ib2R5P2BkYXRhOiBUUm91dGUke2V9SW5wdXRgOmBkYXRhPzogVFJvdXRlJHtlfUlucHV0YH1cXG4gICAgcmVzOiBUUm91dGUke2V9T3V0cHV0O1xcbn07XFxuZXhwb3J0IGNvbnN0IGdldFJlcXVlc3Qke2V9ID0gKCR7dC5yZXF1aXJlZD8uYm9keT9gZGF0YTogUm91dGUke2V9W1wiZGF0YVwiXWA6XCJcIn0pOiBPbWl0PFJvdXRlJHtlfSwgXCJyZXNcIj4gPT4gKHtcXG4gICAgbmFtZTogXCIke2V9XCIsXFxuICAgIG1ldGhvZDogTWV0aG9kLiR7dC5tZXRob2R9LFxcbiAgICBwYXRoOiBcIiR7dC5wYXRofVwiLFxcbiAgICByZXF1aXJlQXV0aDogJHt0LmF1dGh9LFxcbiAgICAke3QucmVxdWlyZWQ/LmJvZHk/XCJkYXRhLFwiOlwiXCJ9XFxufSk7XFxuXFxuYCxyfWdldERhdGFUeXBlVFMoZSl7cmV0dXJuIGU/XCJib29sZWFuXCI9PXR5cGVvZiBlP1wiYW55XCI6dGhpcy5nZW5lcmF0ZUlucHV0VHlwZVRTKGUpOidSb3V0ZVtcImRhdGFcIl0nfWdlbmVyYXRlSW5wdXRUeXBlVFMoZSl7bGV0IHQ9XCJ7XCI7cmV0dXJuIE9iamVjdC5lbnRyaWVzKGUpLmZvckVhY2goKChbZSxyXSk9PntpZihcIl9fcmVxdWlyZWRfX1wiIT09ZSlzd2l0Y2goKDAsYS5nZXRQcm9wZXJ0eVR5cGUpKHIpKXtjYXNlIHMuUHJvcGVydHlUeXBlLkJBU0U6dCs9YFxcblxcdFxcdCR7ZX0ke3IuX19yZXF1aXJlZF9fP1wiOlwiOlwiPzpcIn0ke3IuX19udWxsYWJsZV9fP1wiIG51bGwgfFwiOlwiXCJ9ICR7ci5fX3R5cGVfX307YDticmVhaztjYXNlIHMuUHJvcGVydHlUeXBlLkFSUkFZOnQrPWBcXG5cXHRcXHQke2V9JHshMSE9PXIuX19yZXF1aXJlZF9fP1wiOlwiOlwiPzpcIn0gJHt0aGlzLmdlbmVyYXRlSW5wdXRUeXBlVFMoci5fX2FycmF5X18pfVtdO2A7YnJlYWs7Y2FzZSBzLlByb3BlcnR5VHlwZS5PQkpFQ1Q6dCs9YFxcblxcdFxcdCR7ZX0keyExIT09ci5fX3JlcXVpcmVkX18/XCI6XCI6XCI/OlwifSR7ci5fX251bGxhYmxlX18/XCIgbnVsbCB8XCI6XCJcIn0gJHt0aGlzLmdlbmVyYXRlSW5wdXRUeXBlVFMocil9O2B9fSkpLHQrPVwiXFxuXFx0fVwiLHR9Z2VuZXJhdGVPdXRwdXRUeXBlVFMoZSl7aWYoIWUpcmV0dXJuXCJhbnlcIjtsZXQgdD1cIntcIjtyZXR1cm4gT2JqZWN0LmVudHJpZXMoZSkuZm9yRWFjaCgoKFtlLHJdKT0+e2lmKFwiX19yZXF1aXJlZF9fXCIhPT1lKXN3aXRjaCgoMCxhLmdldFByb3BlcnR5VHlwZSkocikpe2Nhc2Ugcy5Qcm9wZXJ0eVR5cGUuQkFTRTp0Kz1gXFxuXFx0XFx0JHtlfSR7ci5fX3JlcXVpcmVkX18/XCI6XCI6XCI/OlwifSR7ci5fX251bGxhYmxlX18/XCIgbnVsbCB8XCI6XCJcIn0gJHtyLl9fdHlwZV9ffTtgO2JyZWFrO2Nhc2Ugcy5Qcm9wZXJ0eVR5cGUuQVJSQVk6dCs9YFxcblxcdFxcdCR7ZX0keyExIT09ci5fX3JlcXVpcmVkX18/XCI6XCI6XCI/OlwifSAke3RoaXMuZ2VuZXJhdGVPdXRwdXRUeXBlVFMoci5fX2FycmF5X18pfVtdO2A7YnJlYWs7Y2FzZSBzLlByb3BlcnR5VHlwZS5PQkpFQ1Q6dCs9YFxcblxcdFxcdCR7ZX0keyExIT09ci5fX3JlcXVpcmVkX18/XCI6XCI6XCI/OlwifSR7ci5fX251bGxhYmxlX18/XCIgbnVsbCB8XCI6XCJcIn0gJHt0aGlzLmdlbmVyYXRlT3V0cHV0VHlwZVRTKHIpfTtgfX0pKSx0Kz1cIlxcblxcdH1cIix0fXdyaXRlQXBpUmVnaXN0ZXJUb0ZpbGUoZSl7by5kZWZhdWx0LndyaXRlRmlsZShwcm9jZXNzLmVudi5BVEdFTl9UWVBFU19GT0xERVJQQVRIK1wiL2FwaS5kLnRzXCIsZSl9fXQuQXBpR2VuZXJhdG9yPXV9LDE3OTooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuVHlwZXNSZWdpc3Rlcj12b2lkIDA7Y2xhc3MgcntzdGF0aWMgaW5zdGFuY2U9bmV3IHI7ZW51bXM7Y29uc3RydWN0b3IoKXt0aGlzLmVudW1zPW5ldyBNYXB9c3RhdGljIGdldEluc3RhbmNlKCl7cmV0dXJuIHIuaW5zdGFuY2V9cmVnaXN0ZXJFbnVtKGUsdCl7dGhpcy5lbnVtcy5zZXQoZSx0KX19dC5UeXBlc1JlZ2lzdGVyPXJ9LDQ4NTooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuSW52YWxpZFJlcXVlc3RFcnJvcj12b2lkIDA7Y2xhc3MgciBleHRlbmRzIEVycm9ye2NvZGU9NDAwO3JlbGF0ZWREYXRhO21lc3NhZ2U7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlKSx0aGlzLm5hbWU9XCJJbnZhbGlkVmFsdWVcIix0aGlzLmZvcm1hdE1lc3NhZ2UoZSx0KSx0aGlzLnJlbGF0ZWREYXRhPXR9Zm9ybWF0TWVzc2FnZShlLHQpe3RoaXMubWVzc2FnZT1gQmFkIFJlcXVlc3QgOiAke2V9XFxuXFx0UHJvdmlkZWQgRXJyb3IgRGF0YSA6XFxuXFx0XFx0JHtKU09OLnN0cmluZ2lmeSh0LHZvaWQgMCwyKX1cXG5gfX10LkludmFsaWRSZXF1ZXN0RXJyb3I9cn0sNjUwOihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmdldFByb3BlcnR5VHlwZT10LnJvdXRlPXZvaWQgMDtjb25zdCBuPXIoNDkyKSxvPXIoNDQyKSxzPXIoNDg1KSxhPXIoNTA3KTtmdW5jdGlvbiBpKGUsdCl7Zm9yKGxldFtyLG9db2YgT2JqZWN0LmVudHJpZXMoZSkpc3dpdGNoKHUobykpe2Nhc2Ugbi5Qcm9wZXJ0eVR5cGUuQkFTRTppZighdFtyXSYmIW8uX19yZXF1aXJlZF9fKWJyZWFrO2lmKHR5cGVvZiB0W3JdIT09by5fX3R5cGVfXylyZXR1cm4hMTticmVhaztjYXNlIG4uUHJvcGVydHlUeXBlLkFSUkFZOmlmKCF0W3JdJiZvLl9fcmVxdWlyZWRfXylyZXR1cm4hMTtpZih0W3JdKWZvcihsZXQgZSBvZiB0W3JdKWlmKCFpKG8uX19hcnJheV9fLGUpKXJldHVybiExO2JyZWFrO2Nhc2Ugbi5Qcm9wZXJ0eVR5cGUuT0JKRUNUOmlmKCF0W3JdJiYhby5fX3JlcXVpcmVkX18pYnJlYWs7aWYoIXRbcl18fCFpKG8sdFtyXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gdShlKXtjb25zdCB0PU9iamVjdC5rZXlzKGUpO3JldHVybiB0Lmxlbmd0aD49MSYmdC5sZW5ndGg8PTMmJnQuaW5jbHVkZXMoXCJfX3R5cGVfX1wiKSYmdC5ldmVyeSgoZT0+W1wiX190eXBlX19cIixcIl9fcmVxdWlyZWRfX1wiLFwiX19udWxsYWJsZV9fXCJdLmluY2x1ZGVzKGUpKSk/bi5Qcm9wZXJ0eVR5cGUuQkFTRTp0Lmxlbmd0aD49MSYmdC5sZW5ndGg8PTMmJnQuaW5jbHVkZXMoXCJfX2FycmF5X19cIikmJnQuZXZlcnkoKGU9PltcIl9fYXJyYXlfX1wiLFwiX19yZXF1aXJlZF9fXCIsXCJfX251bGxhYmxlX19cIl0uaW5jbHVkZXMoZSkpKT9uLlByb3BlcnR5VHlwZS5BUlJBWTpuLlByb3BlcnR5VHlwZS5PQkpFQ1R9dC5yb3V0ZT1mdW5jdGlvbih7bmFtZTplLG1ldGhvZDp0LHBhdGg6cixhdXRoOm4scmVxdWlyZWQ6dSxyZXNwb25zZTpwfSl7cmV0dXJuIGEuRXhwcmVzc1Byb3ZpZGVyLmxvZ2dlci5sb2coYENyZWF0ZSAke3R9OiR7cn0gcm91dGUgd2l0aCBhdXRoOiR7bn1gKSxvLkFwaUdlbmVyYXRvci5nZXRJbnN0YW5jZSgpLnJlZ2lzdGVyUm91dGUoZXx8ZnVuY3Rpb24oZSl7cmV0dXJuKFwiL1wiPT09ZVswXT9lLnN1YnN0cmluZygxLGUubGVuZ3RoKTplKS5yZXBsYWNlKC9cXC86W2EtekEtWl0rXFwvLyxcIi9cIikuc3BsaXQoXCIvXCIpLnJlZHVjZSgoKGUsdCk9PmUrdFswXS50b1VwcGVyQ2FzZSgpK3Quc3Vic3RyaW5nKDEsdC5sZW5ndGgpKSxcIlwiKX0ocikse21ldGhvZDp0LHBhdGg6cixhdXRoOm4scmVxdWlyZWQ6dSxyZXNwb25zZTpwfSksZnVuY3Rpb24oZSxvLHApe2NvbnN0IGQ9YXN5bmMoZSx0KT0+e3RyeXtpZih1KXtpZih1LmJvZHkmJlwiR0VUXCI9PT1lLm1ldGhvZCl7Y29uc3QgdD1lLnF1ZXJ5Ll9kYXRhO2lmKCF0KXRocm93IG5ldyBzLkludmFsaWRSZXF1ZXN0RXJyb3IoXCJObyBkYXRhIGZvciBib2R5IHdpdGggR0VUIHJlcXVlc3QuXCIse2JvZHk6ZS5xdWVyeS5fZGF0YX0pO2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IG5ldyBzLkludmFsaWRSZXF1ZXN0RXJyb3IoXCJEYXRhIHR5cGUgaXMgaW52YWxpZC5cIix7Ym9keTplLnF1ZXJ5Ll9kYXRhfSk7ZS5ib2R5PUpTT04ucGFyc2UodCl9IWZ1bmN0aW9uKGUsdCl7aWYoZS5ib2R5JiYoXCJib29sZWFuXCI9PXR5cGVvZiBlLmJvZHkmJiFPYmplY3Qua2V5cyh0LmJvZHkpLmxlbmd0aHx8XCJib29sZWFuXCIhPXR5cGVvZiBlLmJvZHkmJiFpKGUuYm9keSx0LmJvZHkpKSl0aHJvdyBuZXcgcy5JbnZhbGlkUmVxdWVzdEVycm9yKFwiTm8gYm9keSBvciBib2R5IHRydWN0dXJlIGlzIGludmFsaWQuXCIse2JvZHk6dC5ib2R5fSl9KHUsZSl9Y29uc3Qgcj1hd2FpdCBwLnZhbHVlKGUsdCk7YS5FeHByZXNzUHJvdmlkZXIuc2VuZERhdGEodCxyKX1jYXRjaChlKXthLkV4cHJlc3NQcm92aWRlci5zZW5kRXJyb3IodCxlKX19LF89YS5FeHByZXNzUHJvdmlkZXIuZ2V0SW5zdGFuY2UoKTtuP18uZ2V0QXBwKClbdF0ocixfLndpdGhBdXRoLGQpOmEuRXhwcmVzc1Byb3ZpZGVyLmdldEluc3RhbmNlKCkuZ2V0QXBwKClbdF0ocixkKX19LHQuZ2V0UHJvcGVydHlUeXBlPXV9LDUwNzooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRXhwcmVzc1Byb3ZpZGVyPXZvaWQgMDtjbGFzcyBye3N0YXRpYyBpbnN0YW5jZT1uZXcgcjtzdGF0aWMgbG9nZ2VyO2FwcDthdXRoZW50aWNhdGU7Y29uc3RydWN0b3IoKXt9c3RhdGljIHNldExvZ2dlcihlKXtyLmxvZ2dlcj1lfXNldEFwcChlKXtyLmxvZ2dlci5sb2coXCJFeHByZXNzIFByb3ZpZGVyIEFwcCBTZXQgLi4uXCIpLHRoaXMuYXBwPWV9c2V0QXV0aE1pZGRsZXdhcmUoZSl7ci5sb2dnZXIubG9nKFwiRXhwcmVzcyBQcm92aWRlciBBdXRoIFNldCAuLi5cIiksdGhpcy5hdXRoZW50aWNhdGU9ZX1nZXQgd2l0aEF1dGgoKXtyZXR1cm4gdGhpcy5hdXRoZW50aWNhdGV9Z2V0QXBwKCl7cmV0dXJuIHRoaXMuYXBwfXN0YXRpYyBnZXRJbnN0YW5jZSgpe3JldHVybiByLmluc3RhbmNlfXN0YXRpYyBzZW5kRGF0YShlLHQpe3IubG9nZ2VyLmxvZyhgJHtlLnJlcS5wYXRofSA6ICR7SlNPTi5zdHJpbmdpZnkodCl9YCksZS5zdGF0dXMoMjAwKS5qc29uKHQpfXN0YXRpYyBzZW5kVGV4dChlLHQpe2Uuc3RhdHVzKDIwMCkuc2VuZCh0KX1zdGF0aWMgc2VuZEVycm9yKGUsdCl7ci5sb2dnZXIuZXJyb3JPYmplY3QodCksZS5zdGF0dXModC5jb2RlKS5qc29uKHtlcnJvcjp0fSl9fXQuRXhwcmVzc1Byb3ZpZGVyPXJ9LDQ5MjpmdW5jdGlvbihlLHQscil7dmFyIG49dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxyLG4pe3ZvaWQgMD09PW4mJihuPXIpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtvJiYhKFwiZ2V0XCJpbiBvPyF0Ll9fZXNNb2R1bGU6by53cml0YWJsZXx8by5jb25maWd1cmFibGUpfHwobz17ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtyXX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLG8pfTpmdW5jdGlvbihlLHQscixuKXt2b2lkIDA9PT1uJiYobj1yKSxlW25dPXRbcl19KSxvPXRoaXMmJnRoaXMuX19leHBvcnRTdGFyfHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiBlKVwiZGVmYXVsdFwiPT09cnx8T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscil8fG4odCxlLHIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvKHIoNDQyKSx0KSxvKHIoMTc5KSx0KSxvKHIoNDg1KSx0KSxvKHIoNTA3KSx0KSxvKHIoNjUwKSx0KX0sMjkyOmU9PntlLmV4cG9ydHM9cigyOTIpfX0sdD17fTtyZXR1cm4gZnVuY3Rpb24gcihuKXt2YXIgbz10W25dO2lmKHZvaWQgMCE9PW8pcmV0dXJuIG8uZXhwb3J0czt2YXIgcz10W25dPXtleHBvcnRzOnt9fTtyZXR1cm4gZVtuXS5jYWxsKHMuZXhwb3J0cyxzLHMuZXhwb3J0cyxyKSxzLmV4cG9ydHN9KDQ5Mil9KSgpLGUuZXhwb3J0cz1uKCl9LDQ4NTooZSx0KT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuSW52YWxpZFJlcXVlc3RFcnJvcj12b2lkIDA7Y2xhc3MgciBleHRlbmRzIEVycm9ye2NvZGU9NDAwO3JlbGF0ZWREYXRhO21lc3NhZ2U7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlKSx0aGlzLm5hbWU9XCJJbnZhbGlkVmFsdWVcIix0aGlzLmZvcm1hdE1lc3NhZ2UoZSx0KSx0aGlzLnJlbGF0ZWREYXRhPXR9Zm9ybWF0TWVzc2FnZShlLHQpe3RoaXMubWVzc2FnZT1gQmFkIFJlcXVlc3QgOiAke2V9XFxuXFx0UHJvdmlkZWQgRXJyb3IgRGF0YSA6XFxuXFx0XFx0JHtKU09OLnN0cmluZ2lmeSh0LHZvaWQgMCwyKX1cXG5gfX10LkludmFsaWRSZXF1ZXN0RXJyb3I9cn0sNjUwOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmdldFByb3BlcnR5VHlwZT10LnJvdXRlPXZvaWQgMDtjb25zdCBuPXIoODEyKSxvPXIoNDQyKSxzPXIoNDg1KSxhPXIoNTA3KTtmdW5jdGlvbiBpKGUsdCl7Zm9yKGxldFtyLG9db2YgT2JqZWN0LmVudHJpZXMoZSkpc3dpdGNoKHUobykpe2Nhc2Ugbi5Qcm9wZXJ0eVR5cGUuQkFTRTppZighdFtyXSYmIW8uX19yZXF1aXJlZF9fKWJyZWFrO2lmKHR5cGVvZiB0W3JdIT09by5fX3R5cGVfXylyZXR1cm4hMTticmVhaztjYXNlIG4uUHJvcGVydHlUeXBlLkFSUkFZOmlmKCF0W3JdJiZvLl9fcmVxdWlyZWRfXylyZXR1cm4hMTtpZih0W3JdKWZvcihsZXQgZSBvZiB0W3JdKWlmKCFpKG8uX19hcnJheV9fLGUpKXJldHVybiExO2JyZWFrO2Nhc2Ugbi5Qcm9wZXJ0eVR5cGUuT0JKRUNUOmlmKCF0W3JdJiYhby5fX3JlcXVpcmVkX18pYnJlYWs7aWYoIXRbcl18fCFpKG8sdFtyXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gdShlKXtjb25zdCB0PU9iamVjdC5rZXlzKGUpO3JldHVybiB0Lmxlbmd0aD49MSYmdC5sZW5ndGg8PTMmJnQuaW5jbHVkZXMoXCJfX3R5cGVfX1wiKSYmdC5ldmVyeSgoZT0+W1wiX190eXBlX19cIixcIl9fcmVxdWlyZWRfX1wiLFwiX19udWxsYWJsZV9fXCJdLmluY2x1ZGVzKGUpKSk/bi5Qcm9wZXJ0eVR5cGUuQkFTRTp0Lmxlbmd0aD49MSYmdC5sZW5ndGg8PTMmJnQuaW5jbHVkZXMoXCJfX2FycmF5X19cIikmJnQuZXZlcnkoKGU9PltcIl9fYXJyYXlfX1wiLFwiX19yZXF1aXJlZF9fXCIsXCJfX251bGxhYmxlX19cIl0uaW5jbHVkZXMoZSkpKT9uLlByb3BlcnR5VHlwZS5BUlJBWTpuLlByb3BlcnR5VHlwZS5PQkpFQ1R9dC5yb3V0ZT1mdW5jdGlvbih7bmFtZTplLG1ldGhvZDp0LHBhdGg6cixhdXRoOm4scmVxdWlyZWQ6dSxyZXNwb25zZTpwfSl7cmV0dXJuIGEuRXhwcmVzc1Byb3ZpZGVyLmxvZ2dlci5sb2coYENyZWF0ZSAke3R9OiR7cn0gcm91dGUgd2l0aCBhdXRoOiR7bn1gKSxvLkFwaUdlbmVyYXRvci5nZXRJbnN0YW5jZSgpLnJlZ2lzdGVyUm91dGUoZXx8ZnVuY3Rpb24oZSl7cmV0dXJuKFwiL1wiPT09ZVswXT9lLnN1YnN0cmluZygxLGUubGVuZ3RoKTplKS5yZXBsYWNlKC9cXC86W2EtekEtWl0rXFwvLyxcIi9cIikuc3BsaXQoXCIvXCIpLnJlZHVjZSgoKGUsdCk9PmUrdFswXS50b1VwcGVyQ2FzZSgpK3Quc3Vic3RyaW5nKDEsdC5sZW5ndGgpKSxcIlwiKX0ocikse21ldGhvZDp0LHBhdGg6cixhdXRoOm4scmVxdWlyZWQ6dSxyZXNwb25zZTpwfSksZnVuY3Rpb24oZSxvLHApe2NvbnN0IGQ9YXN5bmMoZSx0KT0+e3RyeXtpZih1KXtpZih1LmJvZHkmJlwiR0VUXCI9PT1lLm1ldGhvZCl7Y29uc3QgdD1lLnF1ZXJ5Ll9kYXRhO2lmKCF0KXRocm93IG5ldyBzLkludmFsaWRSZXF1ZXN0RXJyb3IoXCJObyBkYXRhIGZvciBib2R5IHdpdGggR0VUIHJlcXVlc3QuXCIse2JvZHk6ZS5xdWVyeS5fZGF0YX0pO2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IG5ldyBzLkludmFsaWRSZXF1ZXN0RXJyb3IoXCJEYXRhIHR5cGUgaXMgaW52YWxpZC5cIix7Ym9keTplLnF1ZXJ5Ll9kYXRhfSk7ZS5ib2R5PUpTT04ucGFyc2UodCl9IWZ1bmN0aW9uKGUsdCl7aWYoZS5ib2R5JiYoXCJib29sZWFuXCI9PXR5cGVvZiBlLmJvZHkmJiFPYmplY3Qua2V5cyh0LmJvZHkpLmxlbmd0aHx8XCJib29sZWFuXCIhPXR5cGVvZiBlLmJvZHkmJiFpKGUuYm9keSx0LmJvZHkpKSl0aHJvdyBuZXcgcy5JbnZhbGlkUmVxdWVzdEVycm9yKFwiTm8gYm9keSBvciBib2R5IHRydWN0dXJlIGlzIGludmFsaWQuXCIse2JvZHk6dC5ib2R5fSl9KHUsZSl9Y29uc3Qgcj1hd2FpdCBwLnZhbHVlKGUsdCk7YS5FeHByZXNzUHJvdmlkZXIuc2VuZERhdGEodCxyKX1jYXRjaChlKXthLkV4cHJlc3NQcm92aWRlci5zZW5kRXJyb3IodCxlKX19LF89YS5FeHByZXNzUHJvdmlkZXIuZ2V0SW5zdGFuY2UoKTtuP18uZ2V0QXBwKClbdF0ocixfLndpdGhBdXRoLGQpOmEuRXhwcmVzc1Byb3ZpZGVyLmdldEluc3RhbmNlKCkuZ2V0QXBwKClbdF0ocixkKX19LHQuZ2V0UHJvcGVydHlUeXBlPXV9LDUwNzooZSx0KT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRXhwcmVzc1Byb3ZpZGVyPXZvaWQgMDtjbGFzcyBye3N0YXRpYyBpbnN0YW5jZT1uZXcgcjtzdGF0aWMgbG9nZ2VyO2FwcDthdXRoZW50aWNhdGU7Y29uc3RydWN0b3IoKXt9c3RhdGljIHNldExvZ2dlcihlKXtyLmxvZ2dlcj1lfXNldEFwcChlKXtyLmxvZ2dlci5sb2coXCJFeHByZXNzIFByb3ZpZGVyIEFwcCBTZXQgLi4uXCIpLHRoaXMuYXBwPWV9c2V0QXV0aE1pZGRsZXdhcmUoZSl7ci5sb2dnZXIubG9nKFwiRXhwcmVzcyBQcm92aWRlciBBdXRoIFNldCAuLi5cIiksdGhpcy5hdXRoZW50aWNhdGU9ZX1nZXQgd2l0aEF1dGgoKXtyZXR1cm4gdGhpcy5hdXRoZW50aWNhdGV9Z2V0QXBwKCl7cmV0dXJuIHRoaXMuYXBwfXN0YXRpYyBnZXRJbnN0YW5jZSgpe3JldHVybiByLmluc3RhbmNlfXN0YXRpYyBzZW5kRGF0YShlLHQpe3IubG9nZ2VyLmxvZyhgJHtlLnJlcS5wYXRofSA6ICR7SlNPTi5zdHJpbmdpZnkodCl9YCksZS5zdGF0dXMoMjAwKS5qc29uKHQpfXN0YXRpYyBzZW5kVGV4dChlLHQpe2Uuc3RhdHVzKDIwMCkuc2VuZCh0KX1zdGF0aWMgc2VuZEVycm9yKGUsdCl7ci5sb2dnZXIuZXJyb3JPYmplY3QodCksZS5zdGF0dXModC5jb2RlKS5qc29uKHtlcnJvcjp0fSl9fXQuRXhwcmVzc1Byb3ZpZGVyPXJ9LDQ5MjpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxyLG4pe3ZvaWQgMD09PW4mJihuPXIpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtvJiYhKFwiZ2V0XCJpbiBvPyF0Ll9fZXNNb2R1bGU6by53cml0YWJsZXx8by5jb25maWd1cmFibGUpfHwobz17ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtyXX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLG8pfTpmdW5jdGlvbihlLHQscixuKXt2b2lkIDA9PT1uJiYobj1yKSxlW25dPXRbcl19KSxvPXRoaXMmJnRoaXMuX19leHBvcnRTdGFyfHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiBlKVwiZGVmYXVsdFwiPT09cnx8T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscil8fG4odCxlLHIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvKHIoNDQyKSx0KSxvKHIoMTc5KSx0KSxvKHIoNDg1KSx0KSxvKHIoNTA3KSx0KSxvKHIoNjUwKSx0KSxvKHIoNjc2KSx0KX0sNjc2OihlLHQpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIHIsbjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lk1ldGhvZD10LlByb3BlcnR5VHlwZT12b2lkIDAsKG49dC5Qcm9wZXJ0eVR5cGV8fCh0LlByb3BlcnR5VHlwZT17fSkpW24uQkFTRT0wXT1cIkJBU0VcIixuW24uQVJSQVk9MV09XCJBUlJBWVwiLG5bbi5PQkpFQ1Q9Ml09XCJPQkpFQ1RcIiwocj10Lk1ldGhvZHx8KHQuTWV0aG9kPXt9KSkuR0VUPVwiZ2V0XCIsci5QT1NUPVwicG9zdFwifSwyOTI6ZT0+e1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1yKDI5Mil9fSx0PXt9LGZ1bmN0aW9uIHIobil7dmFyIG89dFtuXTtpZih2b2lkIDAhPT1vKXJldHVybiBvLmV4cG9ydHM7dmFyIHM9dFtuXT17ZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChzLmV4cG9ydHMscyxzLmV4cG9ydHMscikscy5leHBvcnRzfSg0OTIpO3ZhciBlLHR9LGUuZXhwb3J0cz1uKCl9LDQ4NTooZSx0KT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuSW52YWxpZFJlcXVlc3RFcnJvcj12b2lkIDA7Y2xhc3MgciBleHRlbmRzIEVycm9ye2NvZGU9NDAwO3JlbGF0ZWREYXRhO21lc3NhZ2U7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlKSx0aGlzLm5hbWU9XCJJbnZhbGlkVmFsdWVcIix0aGlzLmZvcm1hdE1lc3NhZ2UoZSx0KSx0aGlzLnJlbGF0ZWREYXRhPXR9Zm9ybWF0TWVzc2FnZShlLHQpe3RoaXMubWVzc2FnZT1gQmFkIFJlcXVlc3QgOiAke2V9XFxuXFx0UHJvdmlkZWQgRXJyb3IgRGF0YSA6XFxuXFx0XFx0JHtKU09OLnN0cmluZ2lmeSh0LHZvaWQgMCwyKX1cXG5gfX10LkludmFsaWRSZXF1ZXN0RXJyb3I9cn0sNjUwOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmdldFByb3BlcnR5VHlwZT10LnJvdXRlPXZvaWQgMDtjb25zdCBuPXIoODEyKSxvPXIoNDQyKSxzPXIoNDg1KSxhPXIoNTA3KTtmdW5jdGlvbiBpKGUsdCl7Zm9yKGxldFtyLG9db2YgT2JqZWN0LmVudHJpZXMoZSkpc3dpdGNoKHUobykpe2Nhc2Ugbi5Qcm9wZXJ0eVR5cGUuQkFTRTppZighdFtyXSYmIW8uX19yZXF1aXJlZF9fKWJyZWFrO2lmKHR5cGVvZiB0W3JdIT09by5fX3R5cGVfXylyZXR1cm4hMTticmVhaztjYXNlIG4uUHJvcGVydHlUeXBlLkFSUkFZOmlmKCF0W3JdJiZvLl9fcmVxdWlyZWRfXylyZXR1cm4hMTtpZih0W3JdKWZvcihsZXQgZSBvZiB0W3JdKWlmKCFpKG8uX19hcnJheV9fLGUpKXJldHVybiExO2JyZWFrO2Nhc2Ugbi5Qcm9wZXJ0eVR5cGUuT0JKRUNUOmlmKCF0W3JdJiYhby5fX3JlcXVpcmVkX18pYnJlYWs7aWYoIXRbcl18fCFpKG8sdFtyXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gdShlKXtjb25zdCB0PU9iamVjdC5rZXlzKGUpO3JldHVybiB0Lmxlbmd0aD49MSYmdC5sZW5ndGg8PTMmJnQuaW5jbHVkZXMoXCJfX3R5cGVfX1wiKSYmdC5ldmVyeSgoZT0+W1wiX190eXBlX19cIixcIl9fcmVxdWlyZWRfX1wiLFwiX19udWxsYWJsZV9fXCJdLmluY2x1ZGVzKGUpKSk/bi5Qcm9wZXJ0eVR5cGUuQkFTRTp0Lmxlbmd0aD49MSYmdC5sZW5ndGg8PTMmJnQuaW5jbHVkZXMoXCJfX2FycmF5X19cIikmJnQuZXZlcnkoKGU9PltcIl9fYXJyYXlfX1wiLFwiX19yZXF1aXJlZF9fXCIsXCJfX251bGxhYmxlX19cIl0uaW5jbHVkZXMoZSkpKT9uLlByb3BlcnR5VHlwZS5BUlJBWTpuLlByb3BlcnR5VHlwZS5PQkpFQ1R9dC5yb3V0ZT1mdW5jdGlvbih7bmFtZTplLG1ldGhvZDp0LHBhdGg6cixhdXRoOm4scmVxdWlyZWQ6dSxyZXNwb25zZTpwfSl7cmV0dXJuIGEuRXhwcmVzc1Byb3ZpZGVyLmxvZ2dlci5sb2coYENyZWF0ZSAke3R9OiR7cn0gcm91dGUgd2l0aCBhdXRoOiR7bn1gKSxvLkFwaUdlbmVyYXRvci5nZXRJbnN0YW5jZSgpLnJlZ2lzdGVyUm91dGUoZXx8ZnVuY3Rpb24oZSl7cmV0dXJuKFwiL1wiPT09ZVswXT9lLnN1YnN0cmluZygxLGUubGVuZ3RoKTplKS5yZXBsYWNlKC9cXC86W2EtekEtWl0rXFwvLyxcIi9cIikuc3BsaXQoXCIvXCIpLnJlZHVjZSgoKGUsdCk9PmUrdFswXS50b1VwcGVyQ2FzZSgpK3Quc3Vic3RyaW5nKDEsdC5sZW5ndGgpKSxcIlwiKX0ocikse21ldGhvZDp0LHBhdGg6cixhdXRoOm4scmVxdWlyZWQ6dSxyZXNwb25zZTpwfSksZnVuY3Rpb24oZSxvLHApe2NvbnN0IGQ9YXN5bmMoZSx0KT0+e3RyeXtpZih1KXtpZih1LmJvZHkmJlwiR0VUXCI9PT1lLm1ldGhvZCl7Y29uc3QgdD1lLnF1ZXJ5Ll9kYXRhO2lmKCF0KXRocm93IG5ldyBzLkludmFsaWRSZXF1ZXN0RXJyb3IoXCJObyBkYXRhIGZvciBib2R5IHdpdGggR0VUIHJlcXVlc3QuXCIse2JvZHk6ZS5xdWVyeS5fZGF0YX0pO2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IG5ldyBzLkludmFsaWRSZXF1ZXN0RXJyb3IoXCJEYXRhIHR5cGUgaXMgaW52YWxpZC5cIix7Ym9keTplLnF1ZXJ5Ll9kYXRhfSk7ZS5ib2R5PUpTT04ucGFyc2UodCl9IWZ1bmN0aW9uKGUsdCl7aWYoZS5ib2R5JiYoXCJib29sZWFuXCI9PXR5cGVvZiBlLmJvZHkmJiFPYmplY3Qua2V5cyh0LmJvZHkpLmxlbmd0aHx8XCJib29sZWFuXCIhPXR5cGVvZiBlLmJvZHkmJiFpKGUuYm9keSx0LmJvZHkpKSl0aHJvdyBuZXcgcy5JbnZhbGlkUmVxdWVzdEVycm9yKFwiTm8gYm9keSBvciBib2R5IHRydWN0dXJlIGlzIGludmFsaWQuXCIse2JvZHk6dC5ib2R5fSl9KHUsZSl9Y29uc3Qgcj1hd2FpdCBwLnZhbHVlKGUsdCk7YS5FeHByZXNzUHJvdmlkZXIuc2VuZERhdGEodCxyKX1jYXRjaChlKXthLkV4cHJlc3NQcm92aWRlci5zZW5kRXJyb3IodCxlKX19LF89YS5FeHByZXNzUHJvdmlkZXIuZ2V0SW5zdGFuY2UoKTtuP18uZ2V0QXBwKClbdF0ocixfLndpdGhBdXRoLGQpOmEuRXhwcmVzc1Byb3ZpZGVyLmdldEluc3RhbmNlKCkuZ2V0QXBwKClbdF0ocixkKX19LHQuZ2V0UHJvcGVydHlUeXBlPXV9LDUwNzooZSx0KT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRXhwcmVzc1Byb3ZpZGVyPXZvaWQgMDtjbGFzcyBye3N0YXRpYyBpbnN0YW5jZT1uZXcgcjtzdGF0aWMgbG9nZ2VyO2FwcDthdXRoZW50aWNhdGU7Y29uc3RydWN0b3IoKXt9c3RhdGljIHNldExvZ2dlcihlKXtyLmxvZ2dlcj1lfXNldEFwcChlKXtyLmxvZ2dlci5sb2coXCJFeHByZXNzIFByb3ZpZGVyIEFwcCBTZXQgLi4uXCIpLHRoaXMuYXBwPWV9c2V0QXV0aE1pZGRsZXdhcmUoZSl7ci5sb2dnZXIubG9nKFwiRXhwcmVzcyBQcm92aWRlciBBdXRoIFNldCAuLi5cIiksdGhpcy5hdXRoZW50aWNhdGU9ZX1nZXQgd2l0aEF1dGgoKXtyZXR1cm4gdGhpcy5hdXRoZW50aWNhdGV9Z2V0QXBwKCl7cmV0dXJuIHRoaXMuYXBwfXN0YXRpYyBnZXRJbnN0YW5jZSgpe3JldHVybiByLmluc3RhbmNlfXN0YXRpYyBzZW5kRGF0YShlLHQpe3IubG9nZ2VyLmxvZyhgJHtlLnJlcS5wYXRofSA6ICR7SlNPTi5zdHJpbmdpZnkodCl9YCksZS5zdGF0dXMoMjAwKS5qc29uKHQpfXN0YXRpYyBzZW5kVGV4dChlLHQpe2Uuc3RhdHVzKDIwMCkuc2VuZCh0KX1zdGF0aWMgc2VuZEVycm9yKGUsdCl7ci5sb2dnZXIuZXJyb3JPYmplY3QodCksZS5zdGF0dXModC5jb2RlKS5qc29uKHtlcnJvcjp0fSl9fXQuRXhwcmVzc1Byb3ZpZGVyPXJ9LDQ5MjpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxyLG4pe3ZvaWQgMD09PW4mJihuPXIpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtvJiYhKFwiZ2V0XCJpbiBvPyF0Ll9fZXNNb2R1bGU6by53cml0YWJsZXx8by5jb25maWd1cmFibGUpfHwobz17ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtyXX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLG8pfTpmdW5jdGlvbihlLHQscixuKXt2b2lkIDA9PT1uJiYobj1yKSxlW25dPXRbcl19KSxvPXRoaXMmJnRoaXMuX19leHBvcnRTdGFyfHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiBlKVwiZGVmYXVsdFwiPT09cnx8T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscil8fG4odCxlLHIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvKHIoNjc2KSx0KSxvKHIoNDQyKSx0KSxvKHIoMTc5KSx0KSxvKHIoNDg1KSx0KSxvKHIoNjUwKSx0KSxvKHIoNTA3KSx0KX0sNjc2OihlLHQpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIHIsbjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lk1ldGhvZD10LlByb3BlcnR5VHlwZT12b2lkIDAsKG49dC5Qcm9wZXJ0eVR5cGV8fCh0LlByb3BlcnR5VHlwZT17fSkpW24uQkFTRT0wXT1cIkJBU0VcIixuW24uQVJSQVk9MV09XCJBUlJBWVwiLG5bbi5PQkpFQ1Q9Ml09XCJPQkpFQ1RcIiwocj10Lk1ldGhvZHx8KHQuTWV0aG9kPXt9KSkuR0VUPVwiZ2V0XCIsci5QT1NUPVwicG9zdFwifSwyOTI6ZT0+e1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1yZXF1aXJlKFwiZnMvcHJvbWlzZXNcIil9fSx0PXt9LGZ1bmN0aW9uIHIobil7dmFyIG89dFtuXTtpZih2b2lkIDAhPT1vKXJldHVybiBvLmV4cG9ydHM7dmFyIHM9dFtuXT17ZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChzLmV4cG9ydHMscyxzLmV4cG9ydHMscikscy5leHBvcnRzfSg0OTIpO3ZhciBlLHR9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnRZWEJ3YVc1bmN5STZJa05CUVVFc1UwRkJNa05CTEVWQlFVMURMRWRCUXpGQ0xHbENRVUZhUXl4VFFVRXdReXhwUWtGQldFTXNUMEZEZUVOQkxFOUJRVTlFTEZGQlFWVkVMRWxCUTFFc2JVSkJRVmhITEZGQlFYbENRU3hQUVVGUFF5eEpRVU01UTBRc1QwRkJUeXhSUVVGVExFZEJRVWxJTEVkQlEwMHNhVUpCUVZwRExGRkJRMlJCTEZGQlFXVXNUVUZCU1VRc1NVRkZia0pFTEVWQlFWa3NUVUZCU1VNc1NVRlNiRUlzUTBGVFIwc3NUVUZCVFN4TFFVTlVMRThzSzB4RFZrRXNhMEpCUTBFc1UwRkRRU3hUUVVOQkxGTkJSVUVzVFVGQllVTXNSVUZEUkVNc1owSkJRV2RETEVsQlFVbEVMRVZCUTNCRFJTeFBRVU5CUXl4alFVRXJRaXhGUVVGQlF5eGpRVUZqUXl4alFVVnlSQ3hqUVVOSlRpeExRVUZMUnl4UFFVRlRMRWxCUVVsSkxFbEJSM1JDVEN4eFFrRkRTU3hQUVVGUFJDeEZRVUZoVHl4VFFVZDRRa01zWTBGQlkwTXNSVUZCWTBNc1IwRkRlRUpZTEV0QlFVdEhMRTlCUVU5VExFbEJRVWxHTEVWQlFVMURMRWRCUnpGQ1JTeHpRa0ZEU1N4SlFVRkpReXhGUVVGTExIZERRVU5VUVN4SFFVRk5aQ3hMUVVGTFpTeHpRa0ZEV0VRc1IwRkJUV1FzUzBGQlMyZENMSFZDUVVOWVJpeEhRVUZOWkN4TFFVRkxhVUlzTkVKQlExZ3NUVUZCVFVNc1JVRkJPRU1zUTBGRGFFUkRMRWxCUVVzc1IwRkRURU1zUzBGQlRTeEpRVVZXTEVsQlFVc3NTVUZCUzFZc1JVRkJUVU1zUzBGQlZWZ3NTMEZCUzBjc1QwRkJUMnRDTEZWQlEyeERVQ3hIUVVGTlpDeExRVUZMYzBJc1owSkJRV2RDV2l4RlFVRk5ReXhIUVVOcVEwOHNSVUZCV1ZBc1JVRkJUVmtzVVVGQlVVTXNTMEZCUzJRc1IwRkZia05KTEVkQlFVMWtMRXRCUVV0NVFpeHZRa0ZCYjBKUUxFZEJReTlDYkVJc1MwRkJTekJDTEhWQ1FVRjFRbG9zUjBGSGVFSkZMSFZDUVVOS0xFbEJRVWxHTEVWQlFVc3NlVUpCUjFRc1QwRkdRV0VzVDBGQlQwTXNUMEZCVHl4RlFVRkJReXhSUVVGUlF5eFRRVUZUVUN4SFFVRlpWQ3hIUVVGTkxFOUJRVTlUTEU5QlEzaEVWQ3hIUVVGTkxGVkJRME5CTEVWQlIwaEhMRFJDUVVOS0xFbEJRVWxJTEVWQlFVc3NTMEZYVkN4UFFWWkJaQ3hMUVVGTFNTeGpRVUZqTWtJc1RVRkJUVVFzVTBGQlVTeERRVUZEUlN4RlFVRk5kRUlzUzBGRGNFTkpMRWRCUVUwc2FVSkJRV2xDU2l4TlFVTjJRbWxDTEU5QlFVOU9MRkZCUVZGWExFZEJRVTFHTEZOQlEycENMRVZCUVVWSExFVkJRVXRETEV0QlEwWndRaXhIUVVGTkxFOUJRVTl0UWl4UFFVTlBMR2xDUVVGV1F5eEZRVUZ4UWtFc1JVRkJVU3hKUVVGSlFTeFZRVWR3UkhCQ0xFZEJRVTBzVjBGRlNFRXNSVUZIU0VNc2MwSkJRMG9zVFVGQlR5eDFTVUZIU0ZVc2IwSkJRVzlDVUN4SFFVTjRRaXhKUVVGSmFVSXNSVUZCVVN4SFFVMWFMRTlCVEVGU0xFOUJRVTlPTEZGQlFWRklMRWRCUVdGWkxGTkJRVkVzUlVGQlJWQXNSVUZCVVhCQ0xFMUJRekZEWjBNc1IwRkJVeXhyUWtGQmEwSmFMRVZCUVU5aExEaENRVUU0UW1wRExFVkJRVTlyUXl4TFFVTnVSU3hyUWtGSFJFWXNSVUZIU0dJc1owSkJRV2RDV2l4RlFVRmpReXhIUVVOc1F5eEpRVUZKUnl4RlFVRkxMSEZDUVVGeFFrb3NXVUZCWlZZc1MwRkJTM05ETEdOQlF6bERNMElzUlVGQlRUUkNMRlZCUVZWRExGZEJNa0p3UWl4UFFYcENRVEZDTEVkQlFVMHNjVUpCUVhGQ1NpeGhRVUZuUWxZc1MwRkJTM2xETEhGQ1FVTTFRemxDTEVWQlFVMHJRaXhsUVVWV05VSXNSMEZCVFN4elFrRkRTMG9zY1VKQlEwNUJMREpDUVVOUlF5eEZRVUZOV1N4MVFrRkRaRm9zUlVGQlRXZERMRFJDUVVOQmFFTXNSVUZCVFdsRExHTkJSV3BDYWtNc1JVRkJUVFJDTEZWQlFWVkRMRXRCUTFZc1pVRkJaVGxDTEZOQlEyWXNaMEpCUVdkQ1FTdzBRa0ZGWWtFc2QwTkJSVkZCTEZGQlEySkRMRVZCUVUwMFFpeFZRVUZWUXl4TFFVRlBMR05CUVdNNVFpeFpRVUZwUWl4clFrRkRNVU5CTEN0Q1FVTllRU3d5UWtGRFVVTXNSVUZCVFZrc2RVSkJRMlJhTEVWQlFVMW5ReXcwUWtGRFFXaERMRVZCUVUxcFF5eGpRVU51UW1wRExFVkJRVTAwUWl4VlFVRlZReXhMUVVGUExGRkJRVlVzWTBGRmVFSXhRaXhGUVVkSWQwSXNZMEZCWTBVc1IwRkRiRUlzVDBGQlNVRXNSVUZEZFVJc2EwSkJRVlJCTEVWQlExSXNUVUZEUVhoRExFdEJRVXMyUXl4dlFrRkJiMEpNTEVkQlJYaENMR2RDUVVsUVN5eHZRa0ZCYjBKaUxFZEJRM2hDTEVsQlFVbHNRaXhGUVVGTExFbEJNRUpVTEU5QmVrSkJZU3hQUVVGUFRpeFJRVUZSVnl4SFFVRk5SaXhUUVVGUkxFVkJRVVZuUWl4RlFVRlZaQ3hOUVVOeVF5eEhRVUZwUWl4cFFrRkJZbU1zUlVGRFFTeFJRVUZSTEVsQlFVRkRMR2xDUVVGblFtWXNTVUZEY0VJc1MwRkJTeXhGUVVGQlowSXNZVUZCWVVNc1MwRkRaRzVETEVkQlFVMHNVMEZCVTJkRExFbEJRMWhrTEVWQlFVdHJRaXhoUVVGbExFbEJRVTBzVDBGRE0wSnNRaXhGUVVGTGJVSXNZVUZCWlN4VlFVRlpMRTFCUXk5Q2JrSXNSVUZCUzI5Q0xGbEJSVlFzVFVGRFNpeExRVUZMTEVWQlFVRktMR0ZCUVdGTExFMUJRMlIyUXl4SFFVRk5MRk5CUVZOblF5eExRVU5YTEVsQlFYUkNaQ3hGUVVGTGEwSXNZVUZCZVVJc1NVRkJUU3hSUVVOd1EyeEVMRXRCUVVzMlF5eHZRa0ZCYjBKaUxFVkJRVXR6UWl4blFrRkRiRU1zVFVGRFNpeExRVUZMTEVWQlFVRk9MR0ZCUVdGUExFOUJRMlI2UXl4SFFVRk5MRk5CUVZOblF5eExRVU5YTEVsQlFYUkNaQ3hGUVVGTGEwSXNZVUZCZVVJc1NVRkJUU3hQUVVWd1EyeENMRVZCUVV0dFFpeGhRVUZsTEZWQlFWa3NUVUZEYUVOdVJDeExRVUZMTmtNc2IwSkJRVzlDWWl4VlFVazNRMnhDTEVkQlFVMHNVVUZEUTBFc1JVRkhTREpDTEhGQ1FVRnhRbFFzUjBGRGVrSXNTVUZCUzBFc1JVRkJUU3hOUVVGUExFMUJRMnhDTEVsQlFVbHNRaXhGUVVGTExFbEJNRUpVTEU5QmVrSkJZU3hQUVVGUFRpeFJRVUZSVnl4SFFVRk5SaXhUUVVGUkxFVkJRVVZuUWl4RlFVRlZaQ3hOUVVOeVF5eEhRVUZwUWl4cFFrRkJZbU1zUlVGRFFTeFJRVUZSTEVsQlFVRkRMR2xDUVVGblFtWXNTVUZEY0VJc1MwRkJTeXhGUVVGQlowSXNZVUZCWVVNc1MwRkRaRzVETEVkQlFVMHNVMEZCVTJkRExFbEJRMWhrTEVWQlFVdHJRaXhoUVVGbExFbEJRVTBzVDBGRE0wSnNRaXhGUVVGTGJVSXNZVUZCWlN4VlFVRlpMRTFCUXk5Q2JrSXNSVUZCUzI5Q0xGbEJSVlFzVFVGRFNpeExRVUZMTEVWQlFVRktMR0ZCUVdGTExFMUJRMlIyUXl4SFFVRk5MRk5CUVZOblF5eExRVU5YTEVsQlFYUkNaQ3hGUVVGTGEwSXNZVUZCZVVJc1NVRkJUU3hSUVVOd1EyeEVMRXRCUVV0NVF5eHhRa0ZCY1VKVUxFVkJRVXR6UWl4blFrRkRia01zVFVGRFNpeExRVUZMTEVWQlFVRk9MR0ZCUVdGUExFOUJRMlI2UXl4SFFVRk5MRk5CUVZOblF5eExRVU5YTEVsQlFYUkNaQ3hGUVVGTGEwSXNZVUZCZVVJc1NVRkJUU3hQUVVWd1EyeENMRVZCUVV0dFFpeGhRVUZsTEZWQlFWa3NUVUZEYUVOdVJDeExRVUZMZVVNc2NVSkJRWEZDVkN4VlFVazVRMnhDTEVkQlFVMHNVVUZEUTBFc1JVRkhTRmtzZFVKQlFYVkNXaXhIUVVNelFpeFZRVUZITUVNc1ZVRkJWVU1zVVVGQlVVTXNTVUZCU1VNc2RVSkJRWGxDTEZsQlFXRTNReXhKUVRsTGRrVXNhMElzYVVkRFNFRXNUVUZCWVZRc1JVRkRSRWdzWjBKQlFXbERMRWxCUVVsSExFVkJRM0JETUVJc1RVRkZWQ3hqUVVOSkwwSXNTMEZCU3l0Q0xFMUJRVkVzU1VGQlNYaENMRWxCUjNKQ1RDeHhRa0ZEU1N4UFFVRlBSeXhGUVVGalJ5eFRRVWQ2UW05RUxHRkJRV0ZzUkN4RlFVRmpjMElzUjBGRGRrSm9ReXhMUVVGTEswSXNUVUZCVFc1Q0xFbEJRVWxHTEVWQlFVMXpRaXhKUVdJM1FpeHRRaXh2UWtOR1F5eEpRVUZYTmtJc1NVRkJaMDBzUzBGQlRTeFBRVUZQUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hUUVVGVFFTeEZRVUZGUkN4RlFVRkZSU3hIUVVGSExHRkJRV0VzU1VGQlNVTXNSVUZCUldoRkxFMUJRVTFCTEV0QlFVdHBSU3hwUWtGQmFVSXNVMEZCVTBnc1IwRkJSeXhQUVVGUFFTeEhRVUZIUVN4RlFVRkZTU3hYUVVGWFNpeEZRVUZGTEVOQlFVTkxMRkZCUVZGTUxFbEJRVWx1UXl4UFFVRlBlVU1zWlVGQlpWQXNSVUZCUlN4aFFVRmhMRU5CUVVNelFpeFBRVUZOTEVsQlFVc3lRaXhGUVVGRk5VUXNhMEpCUVdFc1JVRkJUeXhOUVVGTmIwVXNSVUZCUlV3c1JVRkJSVVFzUlVGQlJTeE5RVUZOVHl4RlFVRkZVQ3hGUVVGRkxFdEJRVXRSTEVWQlFVVlNMRVZCUVVVc1MwRkJTMU1zUlVGQlJWUXNSVUZCUlN4TFFVRkxMRTFCUVUxVkxFVkJRVVYyUlN4blFrRkJaMElzU1VGQlNYVkZMRVZCUVVWMFJTeFBRVUZQUXl4alFVRmpiMFVzUlVGQlJXNUZMR05CUVdORExHTkJRV052UlN4alFVRmpNVVVzUzBGQlMwY3NUMEZCVHl4SlFVRkpTU3hKUVVGSlRDeHhRa0ZCY1VJc1QwRkJUM1ZGTEVWQlFVVnFSU3hUUVVGVFF5eGpRVUZqY1VRc1JVRkJSVVFzUjBGQlJ6ZEVMRXRCUVV0SExFOUJRVTlUTEVsQlFVbHJSQ3hGUVVGRlJDeEhRVUZIYUVRc2MwSkJRWE5DTEVsQlFVbHBSQ3hGUVVGRkxIZERRVUYzUTBFc1IwRkJSemxFTEV0QlFVdGxMSE5DUVVGelFpdERMRWRCUVVjNVJDeExRVUZMWjBJc2RVSkJRWFZDT0VNc1IwRkJSemxFTEV0QlFVdHBRaXcwUWtGQk5FSXNUVUZCVFRSRExFVkJRVVVzUTBGQlF6RkRMRWxCUVVrc1IwRkJSME1zUzBGQlN5eEpRVUZKTEVsQlFVa3NTVUZCU1RKRExFVkJRVVZETEV0QlFVdG9SU3hMUVVGTFJ5eFBRVUZQYTBJc1ZVRkJWWGxETEVkQlFVYzVSQ3hMUVVGTGMwSXNaMEpCUVdkQ2VVTXNSVUZCUlVNc1IwRkJSMGdzUlVGQlJVY3NSVUZCUlhwRExGRkJRVkZETEV0QlFVdDFReXhIUVVGSFJDeEhRVUZIT1VRc1MwRkJTM2xDTEc5Q1FVRnZRbTlETEVkQlFVYzNSQ3hMUVVGTE1FSXNkVUpCUVhWQ2IwTXNSMEZCUnpsRExIVkNRVUYxUWl4SlFVRkpPRU1zUlVGQlJTeDVRa0ZCZVVJc1QwRkJUMjVETEU5QlFVOURMRTlCUVU4d1F5eEZRVUZGZWtNc1VVRkJVVU1zVTBGQlV5dENMRWRCUVVkRExFZEJRVWNzVDBGQlQwUXNUMEZCVDBNc1IwRkJSeXhWUVVGVlFTeEZRVUZGTjBNc05FSkJRVFJDTEVsQlFVazJReXhGUVVGRkxFdEJRVXNzVDBGQlR6bEVMRXRCUVV0SkxHTkJRV015UWl4TlFVRk5SQ3hUUVVGUkxFTkJRVVVyUWl4RlFVRkZSU3hMUVVGTFJDeEhRVUZITEdsQ1FVRnBRa01zVFVGQlRYQkRMRTlCUVU5T0xGRkJRVkYzUXl4SFFVRkhMMElzVTBGQlVTeEZRVUZISzBJc1JVRkJSVVVzUzBGQlMwUXNSMEZCUnl4UFFVRlBSQ3hQUVVGUExHbENRVUZwUWtVc1JVRkJSVUVzUlVGQlJTeEpRVUZKUVN4VlFVRlZSQ3hIUVVGSExGZEJRVmRCTEVWQlFVVXZReXh6UWtGQmMwSXNUVUZCVFN4MVNVRkJkVWxWTEc5Q1FVRnZRbkZETEVkQlFVY3NTVUZCU1VRc1JVRkJSU3hIUVVGSExFOUJRVTlzUXl4UFFVRlBUaXhSUVVGUmVVTXNSMEZCUjJoRExGTkJRVkVzUlVGQlIyZERMRVZCUVVWRExFMUJRVTFHTEVkQlFVY3NhMEpCUVd0Q1F5eEZRVUZGTVVJc09FSkJRVGhDTWtJc1JVRkJSVEZDTEV0QlFVc3NhMEpCUVd0Q2QwSXNSVUZCUlhaRExHZENRVUZuUW5kRExFVkJRVVZFTEVkQlFVY3NTVUZCU1VVc1JVRkJSU3h4UWtGQmNVSkVMRmxCUVZrNVJDeExRVUZMYzBNc1kwRkJZM1ZDTEVWQlFVVjBRaXhWUVVGVlF5eFhRVUZYTEU5QlFVOTFRaXhIUVVGSExIRkNRVUZ4UWtRc1lVRkJZVGxFTEV0QlFVdDVReXh4UWtGQmNVSnZRaXhGUVVGRmJrSXNaVUZCWlhGQ0xFZEJRVWNzYzBKQlFYTkNSQ3h4UWtGQmNVSkJMREpDUVVFeVFrUXNSVUZCUlhSRExIVkNRVUYxUW5ORExFVkJRVVZzUWl3MFFrRkJORUpyUWl4RlFVRkZha0lzWTBGQlkybENMRVZCUVVWMFFpeFZRVUZWUXl4TFFVRkxMR1ZCUVdWelFpeFRRVUZUTEdkQ1FVRm5Ra0VzTkVKQlFUUkNRU3gzUTBGQmQwTkJMRkZCUVZGRUxFVkJRVVYwUWl4VlFVRlZReXhMUVVGTExHTkJRV056UWl4WlFVRlpMR3RDUVVGclFrRXNLMEpCUVN0Q1FTd3lRa0ZCTWtKRUxFVkJRVVYwUXl4MVFrRkJkVUp6UXl4RlFVRkZiRUlzTkVKQlFUUkNhMElzUlVGQlJXcENMR05CUVdOcFFpeEZRVUZGZEVJc1ZVRkJWVU1zUzBGQlN5eFJRVUZSTEdOQlFXTjFRaXhGUVVGRmVrSXNZMEZCWTNkQ0xFZEJRVWNzVDBGQlQwRXNSVUZCUlN4clFrRkJhMEpCTEVWQlFVVXNUVUZCVFRsRUxFdEJRVXMyUXl4dlFrRkJiMEpwUWl4SFFVRkhMR2RDUVVGblFtcENMRzlDUVVGdlFtbENMRWRCUVVjc1NVRkJTVVFzUlVGQlJTeEpRVUZKTEU5QlFVOXNReXhQUVVGUFRpeFJRVUZSZVVNc1IwRkJSMmhETEZOQlFWRXNSVUZCUjJkRExFVkJRVVZETEUxQlFVMHNSMEZCUnl4cFFrRkJhVUpFTEVWQlFVVXNVVUZCVHl4RlFVRkhVeXhGUVVGRmVFSXNhVUpCUVdsQ1owSXNTVUZCU1N4TFFVRkxUeXhGUVVGRmRFSXNZVUZCWVVNc1MwRkJTMWtzUjBGQlJ5eFRRVUZUUXl4SlFVRkpReXhGUVVGRllpeGhRVUZoTEVsQlFVa3NUMEZCVDJFc1JVRkJSVm9zWVVGQllTeFZRVUZWTEUxQlFVMVpMRVZCUVVWWUxGbEJRVmtzVFVGQlRTeExRVUZMYTBJc1JVRkJSWFJDTEdGQlFXRkxMRTFCUVUxUkxFZEJRVWNzVTBGQlUwTXNTMEZCU1N4SlFVRkxReXhGUVVGRllpeGhRVUZoTEVsQlFVa3NVVUZCVVd4RUxFdEJRVXMyUXl4dlFrRkJiMEpyUWl4RlFVRkZWQ3huUWtGQlowSXNUVUZCVFN4TFFVRkxaMElzUlVGQlJYUkNMR0ZCUVdGUExFOUJRVTlOTEVkQlFVY3NVMEZCVTBNc1MwRkJTU3hKUVVGTFF5eEZRVUZGWWl4aFFVRmhMRWxCUVVrc1QwRkJUMkVzUlVGQlJWb3NZVUZCWVN4VlFVRlZMRTFCUVUxdVJDeExRVUZMTmtNc2IwSkJRVzlDYTBJc1ZVRkJWVVlzUjBGQlJ5eFJRVUZSUVN4RlFVRkZjRUlzY1VKQlFYRkNjVUlzUjBGQlJ5eEpRVUZKUVN4RlFVRkZMRTFCUVUwc1RVRkJUU3hKUVVGSlJDeEZRVUZGTEVsQlFVa3NUMEZCVDJ4RExFOUJRVTlPTEZGQlFWRjVReXhIUVVGSGFFTXNVMEZCVVN4RlFVRkhaME1zUlVGQlJVTXNUVUZCVFN4SFFVRkhMR2xDUVVGcFFrUXNSVUZCUlN4UlFVRlBMRVZCUVVkVExFVkJRVVY0UWl4cFFrRkJhVUpuUWl4SlFVRkpMRXRCUVV0UExFVkJRVVYwUWl4aFFVRmhReXhMUVVGTFdTeEhRVUZITEZOQlFWTkRMRWxCUVVsRExFVkJRVVZpTEdGQlFXRXNTVUZCU1N4UFFVRlBZU3hGUVVGRldpeGhRVUZoTEZWQlFWVXNUVUZCVFZrc1JVRkJSVmdzV1VGQldTeE5RVUZOTEV0QlFVdHJRaXhGUVVGRmRFSXNZVUZCWVVzc1RVRkJUVkVzUjBGQlJ5eFRRVUZUUXl4TFFVRkpMRWxCUVV0RExFVkJRVVZpTEdGQlFXRXNTVUZCU1N4UlFVRlJiRVFzUzBGQlMzbERMSEZDUVVGeFFuTkNMRVZCUVVWVUxHZENRVUZuUWl4TlFVRk5MRXRCUVV0blFpeEZRVUZGZEVJc1lVRkJZVThzVDBGQlQwMHNSMEZCUnl4VFFVRlRReXhMUVVGSkxFbEJRVXRETEVWQlFVVmlMR0ZCUVdFc1NVRkJTU3hQUVVGUFlTeEZRVUZGV2l4aFFVRmhMRlZCUVZVc1RVRkJUVzVFTEV0QlFVdDVReXh4UWtGQmNVSnpRaXhWUVVGVlJpeEhRVUZITEZGQlFWRkJMRVZCUVVWdVF5eDFRa0ZCZFVKdlF5eEhRVUZIVHl4RlFVRkZSaXhSUVVGUldDeFZRVUZWUXl4UlFVRlJReXhKUVVGSlF5eDFRa0ZCZFVJc1dVRkJXVWNzU1VGQlNVUXNSVUZCUlRWRUxHRkJRV0YzUlN4SFFVRkhMRWxCUVVrc1EwRkJRMWdzUlVGQlJVUXNTMEZCU3l4aFFVRmhiRU1zVDBGQlQzbERMR1ZCUVdWUUxFVkJRVVVzWVVGQllTeERRVUZETTBJc1QwRkJUU3hKUVVGTE1rSXNSVUZCUlhoRUxHMUNRVUZqTEVWQlFVOHNUVUZCVFRCRUxFVkJRVVUzUkN4blFrRkJaMElzU1VGQlNUWkVMRVZCUVVWb1F5eE5RVUZOTWtNc1kwRkJZekZGTEV0QlFVc3JRaXhOUVVGTkxFbEJRVWw0UWl4SlFVRkpUQ3h4UWtGQmNVSXNUMEZCVHpaRUxFVkJRVVYyUkN4VFFVRlRiMFFzWVVGQllVVXNSVUZCUlVRc1IwRkJSemRFTEV0QlFVc3JRaXhOUVVGTmJrSXNTVUZCU1d0RUxFVkJRVVZFTEVsQlFVbEJMRVZCUVVWNFJDeGpRVUZqTUVRc1IwRkJSeXhKUVVGSkxGTkJRVk5FTEVWQlFVVkVMRVZCUVVWRkxFZEJRVWNzU1VGQlNVTXNSVUZCUlVFc1JVRkJSU3hKUVVGSkxFMUJRVTBzWVVGQllTeEpRVUZKUml4RlFVRkZMRU5CUVVNc1NVRkJTU3hUUVVGVFFTeEZRVUZGUkN4RlFVRkZSU3hIUVVGSExFbEJRVWxETEVWQlFVVm9SU3hOUVVGTlFTeExRVUZMYVVVc2FVSkJRV2xDTEZOQlFWTklMRWRCUVVjc1QwRkJUMEVzUjBGQlIwRXNSVUZCUlVrc1YwRkJWMG9zUlVGQlJTeERRVUZEU3l4UlFVRlJUQ3hKUVVGSmJrTXNUMEZCVDNsRExHVkJRV1ZRTEVWQlFVVXNZVUZCWVN4RFFVRkRNMElzVDBGQlRTeEpRVUZMTWtJc1JVRkJSVFZFTEd0Q1FVRmhMRVZCUVU4c1RVRkJUVzlGTEVWQlFVVk1MRVZCUVVWRUxFVkJRVVVzVFVGQlRVOHNSVUZCUlZBc1JVRkJSU3hMUVVGTFVTeEZRVUZGVWl4RlFVRkZMRXRCUVV0VExFVkJRVVZVTEVWQlFVVXNTMEZCU3l4TlFVRk5WU3hGUVVGRmRrVXNaMEpCUVdkQ0xFbEJRVWwxUlN4RlFVRkZkRVVzVDBGQlQwTXNZMEZCWTI5RkxFVkJRVVZ1UlN4alFVRmpReXhqUVVGamIwVXNZMEZCWXpGRkxFdEJRVXRITEU5QlFVOHNTVUZCU1Vrc1NVRkJTVXdzY1VKQlFYRkNMRTlCUVU5MVJTeEZRVUZGYWtVc1UwRkJVME1zWTBGQlkzRkVMRVZCUVVWRUxFZEJRVWMzUkN4TFFVRkxSeXhQUVVGUFV5eEpRVUZKYTBRc1JVRkJSVVFzUjBGQlIyaEVMSE5DUVVGelFpeEpRVUZKYVVRc1JVRkJSU3gzUTBGQmQwTkJMRWRCUVVjNVJDeExRVUZMWlN4elFrRkJjMElyUXl4SFFVRkhPVVFzUzBGQlMyZENMSFZDUVVGMVFqaERMRWRCUVVjNVJDeExRVUZMYVVJc05FSkJRVFJDTEUxQlFVMDBReXhGUVVGRkxFTkJRVU14UXl4SlFVRkpMRWRCUVVkRExFdEJRVXNzU1VGQlNTeEpRVUZKTEVsQlFVa3lReXhGUVVGRlF5eExRVUZMYUVVc1MwRkJTMGNzVDBGQlQydENMRlZCUVZWNVF5eEhRVUZIT1VRc1MwRkJTM05DTEdkQ1FVRm5RbmxETEVWQlFVVkRMRWRCUVVkSUxFVkJRVVZITEVWQlFVVjZReXhSUVVGUlF5eExRVUZMZFVNc1IwRkJSMFFzUjBGQlJ6bEVMRXRCUVV0NVFpeHZRa0ZCYjBKdlF5eEhRVUZITjBRc1MwRkJTekJDTEhWQ1FVRjFRbTlETEVkQlFVYzVReXgxUWtGQmRVSXNTVUZCU1RoRExFVkJRVVVzZVVKQlFYbENMRTlCUVU5dVF5eFBRVUZQUXl4UFFVRlBNRU1zUlVGQlJYcERMRkZCUVZGRExGTkJRVk1yUWl4SFFVRkhReXhIUVVGSExFOUJRVTlFTEU5QlFVOURMRWRCUVVjc1ZVRkJWVUVzUlVGQlJUZERMRFJDUVVFMFFpeEpRVUZKTmtNc1JVRkJSU3hMUVVGTExFOUJRVTg1UkN4TFFVRkxTU3hqUVVGak1rSXNUVUZCVFVRc1UwRkJVU3hEUVVGRkswSXNSVUZCUlVVc1MwRkJTMFFzUjBGQlJ5eHBRa0ZCYVVKRExFMUJRVTF3UXl4UFFVRlBUaXhSUVVGUmQwTXNSMEZCUnk5Q0xGTkJRVkVzUlVGQlJ5dENMRVZCUVVWRkxFdEJRVXRFTEVkQlFVY3NUMEZCVDBRc1QwRkJUeXhwUWtGQmFVSkZMRVZCUVVWQkxFVkJRVVVzU1VGQlNVRXNWVUZCVlVRc1IwRkJSeXhYUVVGWFFTeEZRVUZGTDBNc2MwSkJRWE5DTEUxQlFVMHNkVWxCUVhWSlZTeHZRa0ZCYjBKeFF5eEhRVUZITEVsQlFVbEVMRVZCUVVVc1IwRkJSeXhQUVVGUGJFTXNUMEZCVDA0c1VVRkJVWGxETEVkQlFVZG9ReXhUUVVGUkxFVkJRVWRuUXl4RlFVRkZReXhOUVVGTlJpeEhRVUZITEd0Q1FVRnJRa01zUlVGQlJURkNMRGhDUVVFNFFqSkNMRVZCUVVVeFFpeExRVUZMTEd0Q1FVRnJRbmRDTEVWQlFVVjJReXhuUWtGQlowSjNReXhGUVVGRlJDeEhRVUZITEVsQlFVbEZMRVZCUVVVc2NVSkJRWEZDUkN4WlFVRlpPVVFzUzBGQlMzTkRMR05CUVdOMVFpeEZRVUZGZEVJc1ZVRkJWVU1zVjBGQlZ5eFBRVUZQZFVJc1IwRkJSeXh4UWtGQmNVSkVMR0ZCUVdFNVJDeExRVUZMZVVNc2NVSkJRWEZDYjBJc1JVRkJSVzVDTEdWQlFXVnhRaXhIUVVGSExITkNRVUZ6UWtRc2NVSkJRWEZDUVN3eVFrRkJNa0pFTEVWQlFVVjBReXgxUWtGQmRVSnpReXhGUVVGRmJFSXNORUpCUVRSQ2EwSXNSVUZCUldwQ0xHTkJRV05wUWl4RlFVRkZkRUlzVlVGQlZVTXNTMEZCU3l4bFFVRmxjMElzVTBGQlV5eG5Ra0ZCWjBKQkxEUkNRVUUwUWtFc2QwTkJRWGREUVN4UlFVRlJSQ3hGUVVGRmRFSXNWVUZCVlVNc1MwRkJTeXhqUVVGamMwSXNXVUZCV1N4clFrRkJhMEpCTEN0Q1FVRXJRa0VzTWtKQlFUSkNSQ3hGUVVGRmRFTXNkVUpCUVhWQ2MwTXNSVUZCUld4Q0xEUkNRVUUwUW10Q0xFVkJRVVZxUWl4alFVRmphVUlzUlVGQlJYUkNMRlZCUVZWRExFdEJRVXNzVVVGQlVTeGpRVUZqZFVJc1JVRkJSWHBDTEdOQlFXTjNRaXhIUVVGSExFOUJRVTlCTEVWQlFVVXNhMEpCUVd0Q1FTeEZRVUZGTEUxQlFVMDVSQ3hMUVVGTE5rTXNiMEpCUVc5Q2FVSXNSMEZCUnl4blFrRkJaMEpxUWl4dlFrRkJiMEpwUWl4SFFVRkhMRWxCUVVsRUxFVkJRVVVzU1VGQlNTeFBRVUZQYkVNc1QwRkJUMDRzVVVGQlVYbERMRWRCUVVkb1F5eFRRVUZSTEVWQlFVZG5ReXhGUVVGRlF5eE5RVUZOTEVkQlFVY3NhVUpCUVdsQ1JDeEZRVUZGTEZGQlFVOHNSVUZCUjFNc1JVRkJSWGhDTEdsQ1FVRnBRbWRDTEVsQlFVa3NTMEZCUzA4c1JVRkJSWFJDTEdGQlFXRkRMRXRCUVV0WkxFZEJRVWNzVTBGQlUwTXNTVUZCU1VNc1JVRkJSV0lzWVVGQllTeEpRVUZKTEU5QlFVOWhMRVZCUVVWYUxHRkJRV0VzVlVGQlZTeE5RVUZOV1N4RlFVRkZXQ3haUVVGWkxFMUJRVTBzUzBGQlMydENMRVZCUVVWMFFpeGhRVUZoU3l4TlFVRk5VU3hIUVVGSExGTkJRVk5ETEV0QlFVa3NTVUZCUzBNc1JVRkJSV0lzWVVGQllTeEpRVUZKTEZGQlFWRnNSQ3hMUVVGTE5rTXNiMEpCUVc5Q2EwSXNSVUZCUlZRc1owSkJRV2RDTEUxQlFVMHNTMEZCUzJkQ0xFVkJRVVYwUWl4aFFVRmhUeXhQUVVGUFRTeEhRVUZITEZOQlFWTkRMRXRCUVVrc1NVRkJTME1zUlVGQlJXSXNZVUZCWVN4SlFVRkpMRTlCUVU5aExFVkJRVVZhTEdGQlFXRXNWVUZCVlN4TlFVRk5ia1FzUzBGQlN6WkRMRzlDUVVGdlFtdENMRlZCUVZWR0xFZEJRVWNzVVVGQlVVRXNSVUZCUlhCQ0xIRkNRVUZ4UW5GQ0xFZEJRVWNzU1VGQlNVRXNSVUZCUlN4TlFVRk5MRTFCUVUwc1NVRkJTVVFzUlVGQlJTeEpRVUZKTEU5QlFVOXNReXhQUVVGUFRpeFJRVUZSZVVNc1IwRkJSMmhETEZOQlFWRXNSVUZCUjJkRExFVkJRVVZETEUxQlFVMHNSMEZCUnl4cFFrRkJhVUpFTEVWQlFVVXNVVUZCVHl4RlFVRkhVeXhGUVVGRmVFSXNhVUpCUVdsQ1owSXNTVUZCU1N4TFFVRkxUeXhGUVVGRmRFSXNZVUZCWVVNc1MwRkJTMWtzUjBGQlJ5eFRRVUZUUXl4SlFVRkpReXhGUVVGRllpeGhRVUZoTEVsQlFVa3NUMEZCVDJFc1JVRkJSVm9zWVVGQllTeFZRVUZWTEUxQlFVMVpMRVZCUVVWWUxGbEJRVmtzVFVGQlRTeExRVUZMYTBJc1JVRkJSWFJDTEdGQlFXRkxMRTFCUVUxUkxFZEJRVWNzVTBGQlUwTXNTMEZCU1N4SlFVRkxReXhGUVVGRllpeGhRVUZoTEVsQlFVa3NVVUZCVVd4RUxFdEJRVXQ1UXl4eFFrRkJjVUp6UWl4RlFVRkZWQ3huUWtGQlowSXNUVUZCVFN4TFFVRkxaMElzUlVGQlJYUkNMR0ZCUVdGUExFOUJRVTlOTEVkQlFVY3NVMEZCVTBNc1MwRkJTU3hKUVVGTFF5eEZRVUZGWWl4aFFVRmhMRWxCUVVrc1QwRkJUMkVzUlVGQlJWb3NZVUZCWVN4VlFVRlZMRTFCUVUxdVJDeExRVUZMZVVNc2NVSkJRWEZDYzBJc1ZVRkJWVVlzUjBGQlJ5eFJRVUZSUVN4RlFVRkZia01zZFVKQlFYVkNiME1zUjBGQlIwOHNSVUZCUlVZc1VVRkJVVmdzVlVGQlZVTXNVVUZCVVVNc1NVRkJTVU1zZFVKQlFYVkNMRmxCUVZsSExFbEJRVWxFTEVWQlFVVTFSQ3hoUVVGaGQwVXNSMEZCUnl4SlFVRkpMRU5CUVVOWUxFVkJRVVZFTEV0QlFVdHNReXhQUVVGUGVVTXNaVUZCWlZBc1JVRkJSU3hoUVVGaExFTkJRVU16UWl4UFFVRk5MRWxCUVVzeVFpeEZRVUZGZUVRc2JVSkJRV01zUlVGQlR5eE5RVUZOTUVRc1JVRkJSVGRFTEdkQ1FVRm5RaXhKUVVGSk5rUXNSVUZCUldoRExFMUJRVTB5UXl4alFVRmpNVVVzUzBGQlN5dENMRTFCUVUwc1NVRkJTWGhDTEVsQlFVbE1MSEZDUVVGeFFpeFBRVUZQTmtRc1JVRkJSWFpFTEZOQlFWTnZSQ3hoUVVGaFJTeEZRVUZGUkN4SFFVRkhOMFFzUzBGQlN5dENMRTFCUVUxdVFpeEpRVUZKYTBRc1JVRkJSVVFzU1VGQlNVRXNSVUZCUlhoRUxHTkJRV013UkN4SFFVRkhMRWxCUVVrc1EwRkJRMFFzUlVGQlJVUXNTMEZCUzJ4RExFOUJRVTk1UXl4bFFVRmxVQ3hGUVVGRkxHRkJRV0VzUTBGQlF6TkNMRTlCUVUwc1NVRkJTekpDTEVWQlFVVmpMSGxDUVVGdlFpeEZRVUZQTEUxQlFVMWFMRlZCUVZWaExFMUJRVTFETEV0QlFVc3NTVUZCU1VNc1dVRkJXVU1zVVVGQlVVd3NXVUZCV1Zvc1JVRkJSVVFzUjBGQlIyMUNMRTFCUVUxc1FpeEhRVUZIT1VRc1MwRkJTMVVzUzBGQlN5eGxRVUZsVml4TFFVRkxhVVlzWTBGQlkyNUNMRVZCUVVWRUxFZEJRVWMzUkN4TFFVRkxPRVVzV1VGQldXcENMRVZCUVVWdlFpeGpRVUZqYmtJc1JVRkJSVVFzUjBGQlJ6ZEVMRXRCUVVzclJTeFJRVUZSTEdsQ1FVRnBRbXBDTEcxRFFVRnRRMjlDTEV0QlFVdERMRlZCUVZWMFFpeFBRVUZGTEVWQlFVOHNVVUZCVVVFc1JVRkJSV01zYjBKQlFXOUNXaXhIUVVGSExFbEJRVWtzUTBGQlEwUXNSVUZCUlVRc1JVRkJSVVVzUzBGQlMzQkRMRTlCUVU5NVF5eGxRVUZsVUN4RlFVRkZMR0ZCUVdFc1EwRkJRek5DTEU5QlFVMHNTVUZCU3pKQ0xFVkJRVVZrTEdkQ1FVRm5RbU1zUlVGQlJXeEVMRmRCUVUwc1JVRkJUeXhOUVVGTmNVUXNSVUZCUlVRc1JVRkJSU3hMUVVGTFRTeEZRVUZGVGl4RlFVRkZMRXRCUVV0UExFVkJRVVZRTEVWQlFVVXNTMEZCUzFFc1JVRkJSVklzUlVGQlJTeExRVUZMTEZOQlFWTlRMRVZCUVVWV0xFVkJRVVZFTEVkQlFVY3NTVUZCU1N4SlFVRkpSU3hGUVVGRlRTeExRVUZMTVVNc1QwRkJUMDRzVVVGQlVYbERMRWRCUVVjc1QwRkJUMWNzUlVGQlJVb3NTVUZCU1N4TFFVRkxUQ3hGUVVGRmFFSXNZVUZCWVVNc1MwRkJTeXhKUVVGSldTeEZRVUZGUlN4TFFVRkxUU3hGUVVGRmJrSXNZVUZCWVN4TlFVRk5MRlZCUVZWWExFVkJRVVZGTEV0QlFVdE5MRVZCUVVWcVFpeFRRVUZUTEU5QlFVMHNSVUZCUnl4TlFVRk5MRXRCUVV0WkxFVkJRVVZvUWl4aFFVRmhTeXhOUVVGTkxFbEJRVWxSTEVWQlFVVkZMRWxCUVVsTkxFVkJRVVZ1UWl4aFFVRmhMRTlCUVUwc1JVRkJSeXhIUVVGSFZ5eEZRVUZGUlN4SFFVRkhMRWxCUVVrc1NVRkJTVVFzUzBGQlMwUXNSVUZCUlVVc1IwRkJSeXhKUVVGSlV5eEZRVUZGU0N4RlFVRkZaaXhWUVVGVlVTeEhRVUZITEU5QlFVMHNSVUZCUnl4TlFVRk5MRXRCUVV0RkxFVkJRVVZvUWl4aFFVRmhUeXhQUVVGUExFbEJRVWxOTEVWQlFVVkZMRXRCUVV0TkxFVkJRVVZ1UWl4aFFVRmhMRTFCUVUwc1NVRkJTVmNzUlVGQlJVVXNTMEZCUzFNc1JVRkJSVWdzUlVGQlJWSXNSVUZCUlVVc1NVRkJTU3hQUVVGTkxFVkJRVWNzVDBGQlRTeEZRVUZITEZOQlFWTlZMRVZCUVVWWUxFZEJRVWNzVFVGQlRVUXNSVUZCUld4RExFOUJRVTk1UkN4TFFVRkxkRUlzUjBGQlJ5eFBRVUZQUkN4RlFVRkZkMElzVVVGQlVTeEhRVUZIZUVJc1JVRkJSWGRDTEZGQlFWRXNSMEZCUjNoQ0xFVkJRVVY1UWl4VFFVRlRMR0ZCUVdGNlFpeEZRVUZGTUVJc1QwRkJUM3BDTEVkQlFVY3NRMEZCUXl4WFFVRlhMR1ZCUVdVc1owSkJRV2RDZDBJc1UwRkJVM2hDTEV0QlFVdEZMRVZCUVVWb1FpeGhRVUZoUXl4TFFVRkxXU3hGUVVGRmQwSXNVVUZCVVN4SFFVRkhlRUlzUlVGQlJYZENMRkZCUVZFc1IwRkJSM2hDTEVWQlFVVjVRaXhUUVVGVExHTkJRV042UWl4RlFVRkZNRUlzVDBGQlQzcENMRWRCUVVjc1EwRkJReXhaUVVGWkxHVkJRV1VzWjBKQlFXZENkMElzVTBGQlUzaENMRXRCUVV0RkxFVkJRVVZvUWl4aFFVRmhTeXhOUVVGTlZ5eEZRVUZGYUVJc1lVRkJZVThzVDBGQlQwMHNSVUZCUld4RUxFMUJRVTBzVlVGQlZVUXNTMEZCUzI5RUxFVkJRVVYyUXl4UFFVRlBjME1zUlVGQlJXeENMRXRCUVV0dlFpeEZRVUZGYmtJc1MwRkJTMjlDTEVWQlFVVjZRaXhUUVVGVGEwTXNSVUZCUlM5Q0xGTkJRVk00UXl4SlFVRkpMRTlCUVU5cVFpeEZRVUZGYTBJc1owSkJRV2RDUXl4UFFVRlBReXhKUVVGSkxGVkJRVlU1UWl4TFFVRkxSU3h4UWtGQmNVSkRMRXRCUVV0TExFVkJRVVZ3UlN4aFFVRmhTeXhqUVVGalJ5eGpRVUZqY1VRc1IwRkJSeXhUUVVGVFFTeEhRVUZITEU5QlFVOHNUVUZCVFVFc1JVRkJSU3hIUVVGSFFTeEZRVUZGT0VJc1ZVRkJWU3hGUVVGRk9VSXNSVUZCUlhWQ0xGRkJRVkYyUWl4SFFVRkhLMElzVVVGQlVTeHBRa0ZCYVVJc1MwRkJTME1zVFVGQlRTeExRVUZMUXl4UlFVRlBMRU5CUVVWcVF5eEZRVUZGUkN4SlFVRkpReXhGUVVGRlJDeEZRVUZGTEVkQlFVZDZRaXhqUVVGamVVSXNSVUZCUlN0Q0xGVkJRVlVzUlVGQlJTOUNMRVZCUVVWM1FpeFRRVUZUTEVsQlFTOUtMRU5CUVc5TGRFSXNSMEZCUnl4RFFVRkRlRU1zVDBGQlQzTkRMRVZCUVVWc1FpeExRVUZMYjBJc1JVRkJSVzVDTEV0QlFVdHZRaXhGUVVGRmVrSXNVMEZCVTJ0RExFVkJRVVV2UWl4VFFVRlRPRU1zU1VGQlNTeFRRVUZUTVVJc1JVRkJSVThzUlVGQlJXMUNMRWRCUVVjc1RVRkJUVkVzUlVGQlJVTXNUVUZCVFc1RExFVkJRVVZFTEV0QlFVc3NTVUZCU1N4SFFVRkhXU3hGUVVGRkxFTkJRVU1zUjBGQlIwRXNSVUZCUldwRExFMUJRVTBzVVVGQlVYTkNMRVZCUVVWMlF5eFBRVUZQTEVOQlFVTXNUVUZCVFhORExFVkJRVVZETEVWQlFVVnZReXhOUVVGTlF5eE5RVUZOTEVsQlFVbDBReXhGUVVGRkxFMUJRVTBzU1VGQlNWTXNSVUZCUlVzc2IwSkJRVzlDTEhGRFFVRnhReXhEUVVGRGJrTXNTMEZCUzNOQ0xFVkJRVVZ2UXl4TlFVRk5ReXhSUVVGUkxFZEJRVWNzYVVKQlFXbENkRU1zUlVGQlJTeE5RVUZOTEVsQlFVbFRMRVZCUVVWTExHOUNRVUZ2UWl4M1FrRkJkMElzUTBGQlEyNURMRXRCUVV0elFpeEZRVUZGYjBNc1RVRkJUVU1zVVVGQlVYSkRMRVZCUVVWMFFpeExRVUZMTUVNc1MwRkJTMnRDTEUxQlFVMTJReXhKUVVGSkxGTkJRVk5ETEVWQlFVVkVMRWRCUVVjc1IwRkJSME1zUlVGQlJYUkNMRTlCUVU4c2EwSkJRV3RDYzBJc1JVRkJSWFJDTEU5QlFVOWlMRTlCUVU5NVJDeExRVUZMZGtJc1JVRkJSWEpDTEUxQlFVMDJReXhSUVVGUkxHdENRVUZyUW5aQ0xFVkJRVVYwUWl4UFFVRlBaME1zUlVGQlJWWXNSVUZCUlhSQ0xFdEJRVXR4UWl4RlFVRkZja0lzVDBGQlR5eE5RVUZOTEVsQlFVazRRaXhGUVVGRlN5eHZRa0ZCYjBJc2RVTkJRWFZETEVOQlFVTnVReXhMUVVGTGNVSXNSVUZCUlhKQ0xFOUJRVGROTEVOQlFYRk9hVU1zUlVGQlJWZ3NSMEZCUnl4TlFVRk5ReXhSUVVGUmVVSXNSVUZCUlhSRUxFMUJRVTAwUWl4RlFVRkZSQ3hIUVVGSFZTeEZRVUZGYTBJc1owSkJRV2RDV1N4VFFVRlRlRU1zUlVGQlJVVXNSMEZCUnl4TlFVRk5SQ3hIUVVGSFV5eEZRVUZGYTBJc1owSkJRV2RDWVN4VlFVRlZla01zUlVGQlJVTXNTMEZCUzNsRExFVkJRVVZvUXl4RlFVRkZhMElzWjBKQlFXZENia1lzWTBGQll6QkVMRVZCUVVWMVF5eEZRVUZGUXl4VFFVRlRNME1zUjBGQlIwVXNSVUZCUlhkRExFVkJRVVZGTEZOQlFWTlVMRWRCUVVkNlFpeEZRVUZGYTBJc1owSkJRV2RDYmtZc1kwRkJZMnRITEZOQlFWTXpReXhIUVVGSFJTeEZRVUZGYVVNc1MwRkJTMjVETEVWQlFVVmtMR2RDUVVGblFqQkNMRWRCUVVjc1NVRkJTU3hEUVVGRFdDeEZRVUZGUkN4TFFVRkxiRU1zVDBGQlQzbERMR1ZCUVdWUUxFVkJRVVVzWVVGQllTeERRVUZETTBJc1QwRkJUU3hKUVVGTE1rSXNSVUZCUlRSQ0xIRkNRVUZuUWl4RlFVRlBMRTFCUVUweFFpeEZRVUZGTjBRc1owSkJRV2RDTEVsQlFVazJSQ3hGUVVGRk4wUXNZMEZCWTNkSExFbEJRVWxETEdGQlFXRnFReXhsUVVGbGVFVXNhVUpCUVdsQ05FUXNSMEZCUjBNc1JVRkJSVEpDTEU5QlFVODFRaXhGUVVGRk9FTXNUMEZCVHpsRExFZEJRVWRETEVWQlFVVXlRaXhQUVVGUFF5eEpRVUZKTEdkRFFVRm5Rek5HTEV0QlFVc3dSeXhKUVVGSk5VTXNSVUZCUlN0RExHdENRVUZyUWk5RExFZEJRVWRETEVWQlFVVXlRaXhQUVVGUFF5eEpRVUZKTEdsRFFVRnBRek5HTEV0QlFVc3lSeXhoUVVGaE4wTXNSVUZCVFRKRExHVkJRVmNzVDBGQlQzcEhMRXRCUVVzeVJ5eGhRVUZoU0N4VFFVRlRMRTlCUVU5NFJ5eExRVUZMTUVjc1NVRkJTWGhITEhGQ1FVRnhRaXhQUVVGUE5rUXNSVUZCUlhaRUxGTkJRVk5PTEdkQ1FVRm5RalJFTEVWQlFVVkVMRWRCUVVkRkxFVkJRVVV5UWl4UFFVRlBReXhKUVVGSkxFZEJRVWMzUWl4RlFVRkZaMFFzU1VGQlNXNUZMRlZCUVZWMVF5eExRVUZMUXl4VlFVRlZkRUlzVFVGQlRVTXNSVUZCUldsRUxFOUJRVThzUzBGQlMwTXNTMEZCUzI1RUxFZEJRVWN6UkN4blFrRkJaMEkwUkN4RlFVRkZSQ3hIUVVGSFF5eEZRVUZGYVVRc1QwRkJUeXhMUVVGTFJTeExRVUZMY0VRc1IwRkJSek5FTEdsQ1FVRnBRalJFTEVWQlFVVkVMRWRCUVVkRkxFVkJRVVV5UWl4UFFVRlBkMElzV1VGQldYSkVMRWRCUVVkRExFVkJRVVZwUkN4UFFVRlBiRVFzUlVGQlJXZENMRTFCUVUxdFF5eExRVUZMTEVOQlFVTkhMRTFCUVUxMFJDeExRVUZMUVN4RlFVRkZORUlzWjBKQlFXZENNVUlzUjBGQlJ5eEpRVUZKTEZOQlFWTkVMRVZCUVVWRUxFVkJRVVZGTEVkQlFVY3NTVUZCU1VNc1JVRkJSV2hGTEUxQlFVMUJMRXRCUVV0dlNDeHJRa0ZCYTBKNlJpeFBRVUZQTUVZc1QwRkJUeXhUUVVGVGRrUXNSVUZCUlVRc1JVRkJSVVVzUlVGQlJVTXNVVUZCUnl4SlFVRlRRU3hKUVVGSlFTeEZRVUZGUkN4SFFVRkhMRWxCUVVsTkxFVkJRVVV4UXl4UFFVRlBNa1lzZVVKQlFYbENla1FzUlVGQlJVVXNSMEZCUjAwc1MwRkJTeXhSUVVGUlFTeEhRVUZIVWl4RlFVRkZTeXhYUVVGWFJ5eEZRVUZGYTBRc1ZVRkJWV3hFTEVWQlFVVnRSQ3huUWtGQlowSnVSQ3hGUVVGRkxFTkJRVU52UkN4WlFVRlhMRVZCUVVkMFJ5eEpRVUZKTEZkQlFWY3NUMEZCVHpCRExFVkJRVVZGTEUxQlFVMXdReXhQUVVGUGVVTXNaVUZCWlU0c1JVRkJSVVVzUlVGQlJVc3NTVUZCU1N4VFFVRlRVQ3hGUVVGRlJDeEZRVUZGUlN4RlFVRkZReXhSUVVGSExFbEJRVk5CTEVsQlFVbEJMRVZCUVVWRUxFZEJRVWRFTEVWQlFVVkZMRWRCUVVkSUxFVkJRVVZGTEV0QlFVdE5MRVZCUVVWeVJTeE5RVUZOUVN4TFFVRkxNRWdzWTBGQll5eFRRVUZUTlVRc1JVRkJSVVFzUjBGQlJ5eEpRVUZKTEVsQlFVbEZMRXRCUVV0RUxFVkJRVVVzV1VGQldVTXNSMEZCUjNCRExFOUJRVTluUnl4VlFVRlZReXhsUVVGbFF5eExRVUZMYUVVc1JVRkJSVVVzU1VGQlNVTXNSVUZCUlVnc1JVRkJSVU1zUlVGQlJVTXNTVUZCU1hCRExFOUJRVTk1UXl4bFFVRmxVQ3hGUVVGRkxHRkJRV0VzUTBGQlF6TkNMRTlCUVUwc1NVRkJTMjFETEVWQlFVVk9MRVZCUVVVc1MwRkJTMFlzUjBGQlIxRXNSVUZCUlU0c1JVRkJSU3hMUVVGTFJpeEhRVUZIVVN4RlFVRkZUaXhGUVVGRkxFdEJRVXRHTEVkQlFVZFJMRVZCUVVWT0xFVkJRVVVzUzBGQlMwWXNSMEZCUjFFc1JVRkJSVTRzUlVGQlJTeExRVUZMUml4SlFVRkpMRWxCUVVsRExFbEJRVWxCTEVWQlFVVnNSU3hSUVVGUmJVVXNSVUZCUlN4UFFVRlBSaXhGUVVGRkxFZEJRVWNzVDBGQlR5eFRRVUZUUlN4RlFVRkZReXhIUVVGSExFbEJRVWxMTEVWQlFVVlNMRVZCUVVWSExFZEJRVWNzVVVGQlJ5eEpRVUZUU3l4RlFVRkZMRTlCUVU5QkxFVkJRVVY2UlN4UlFVRlJMRWxCUVVrd1JTeEZRVUZGVkN4RlFVRkZSeXhIUVVGSExFTkJRVU53UlN4UlFVRlJMRWxCUVVrc1QwRkJUMnRGTEVWQlFVVkZMRWRCUVVjMlJDeExRVUZMZGtRc1JVRkJSVEZGTEZGQlFWRXdSU3hGUVVGRlFTeEZRVUZGTVVVc1VVRkJVVzFGTEVkQlFVZFBMRVZCUVVVeFJTeFJRVUUxU0N4RFFVRnhTU3hOUVVFMU1rOHNSMEZCY1ROUGEwVXNSVUZCUld4RkxGRkJRVkZ2UlN4TFFVRkxMRWxCUVVrc1EwRkJRMFlzUlVGQlJVUXNTMEZCU3l4aFFVRmhiRU1zVDBGQlQzbERMR1ZCUVdWUUxFVkJRVVVzWVVGQllTeERRVUZETTBJc1QwRkJUU3hKUVVGTE1rSXNSVUZCUldNc2VVSkJRVzlDTEVWQlFVOHNUVUZCVFZvc1ZVRkJWV0VzVFVGQlRVTXNTMEZCU3l4SlFVRkpReXhaUVVGWlF5eFJRVUZSVEN4WlFVRlpXaXhGUVVGRlJDeEhRVUZIYlVJc1RVRkJUV3hDTEVkQlFVYzVSQ3hMUVVGTFZTeExRVUZMTEdWQlFXVldMRXRCUVV0cFJpeGpRVUZqYmtJc1JVRkJSVVFzUjBGQlJ6ZEVMRXRCUVVzNFJTeFpRVUZaYWtJc1JVRkJSVzlDTEdOQlFXTnVRaXhGUVVGRlJDeEhRVUZITjBRc1MwRkJTeXRGTEZGQlFWRXNhVUpCUVdsQ2FrSXNiVU5CUVcxRGIwSXNTMEZCUzBNc1ZVRkJWWFJDTEU5QlFVVXNSVUZCVHl4UlFVRlJRU3hGUVVGRll5eHZRa0ZCYjBKYUxFZEJRVWNzU1VGQlNTeERRVUZEUkN4RlFVRkZSQ3hGUVVGRlJTeExRVUZMTEdGQlFXRndReXhQUVVGUGVVTXNaVUZCWlZBc1JVRkJSU3hoUVVGaExFTkJRVU16UWl4UFFVRk5MRWxCUVVzeVFpeEZRVUZGWkN4blFrRkJaMEpqTEVWQlFVVnNSQ3hYUVVGTkxFVkJRVThzVFVGQlRYRkVMRVZCUVVWRUxFVkJRVVVzUzBGQlMwMHNSVUZCUlU0c1JVRkJSU3hMUVVGTFR5eEZRVUZGVUN4RlFVRkZMRXRCUVV0UkxFVkJRVVZTTEVWQlFVVXNTMEZCU3l4VFFVRlRVeXhGUVVGRlZpeEZRVUZGUkN4SFFVRkhMRWxCUVVrc1NVRkJTVVVzUlVGQlJVMHNTMEZCU3pGRExFOUJRVTlPTEZGQlFWRjVReXhIUVVGSExFOUJRVTlYTEVWQlFVVktMRWxCUVVrc1MwRkJTMHdzUlVGQlJXaENMR0ZCUVdGRExFdEJRVXNzU1VGQlNWa3NSVUZCUlVVc1MwRkJTMDBzUlVGQlJXNUNMR0ZCUVdFc1RVRkJUU3hWUVVGVlZ5eEZRVUZGUlN4TFFVRkxUU3hGUVVGRmFrSXNVMEZCVXl4UFFVRk5MRVZCUVVjc1RVRkJUU3hMUVVGTFdTeEZRVUZGYUVJc1lVRkJZVXNzVFVGQlRTeEpRVUZKVVN4RlFVRkZSU3hKUVVGSlRTeEZRVUZGYmtJc1lVRkJZU3hQUVVGTkxFVkJRVWNzUjBGQlIxY3NSVUZCUlVVc1IwRkJSeXhKUVVGSkxFbEJRVWxFTEV0QlFVdEVMRVZCUVVWRkxFZEJRVWNzU1VGQlNWTXNSVUZCUlVnc1JVRkJSV1lzVlVGQlZWRXNSMEZCUnl4UFFVRk5MRVZCUVVjc1RVRkJUU3hMUVVGTFJTeEZRVUZGYUVJc1lVRkJZVThzVDBGQlR5eEpRVUZKVFN4RlFVRkZSU3hMUVVGTFRTeEZRVUZGYmtJc1lVRkJZU3hOUVVGTkxFbEJRVWxYTEVWQlFVVkZMRXRCUVV0VExFVkJRVVZJTEVWQlFVVlNMRVZCUVVWRkxFbEJRVWtzVDBGQlRTeEZRVUZITEU5QlFVMHNSVUZCUnl4VFFVRlRWU3hGUVVGRldDeEhRVUZITEUxQlFVMUVMRVZCUVVWc1F5eFBRVUZQZVVRc1MwRkJTM1JDTEVkQlFVY3NUMEZCVDBRc1JVRkJSWGRDTEZGQlFWRXNSMEZCUjNoQ0xFVkJRVVYzUWl4UlFVRlJMRWRCUVVkNFFpeEZRVUZGZVVJc1UwRkJVeXhoUVVGaGVrSXNSVUZCUlRCQ0xFOUJRVTk2UWl4SFFVRkhMRU5CUVVNc1YwRkJWeXhsUVVGbExHZENRVUZuUW5kQ0xGTkJRVk40UWl4TFFVRkxSU3hGUVVGRmFFSXNZVUZCWVVNc1MwRkJTMWtzUlVGQlJYZENMRkZCUVZFc1IwRkJSM2hDTEVWQlFVVjNRaXhSUVVGUkxFZEJRVWQ0UWl4RlFVRkZlVUlzVTBGQlV5eGpRVUZqZWtJc1JVRkJSVEJDTEU5QlFVOTZRaXhIUVVGSExFTkJRVU1zV1VGQldTeGxRVUZsTEdkQ1FVRm5RbmRDTEZOQlFWTjRRaXhMUVVGTFJTeEZRVUZGYUVJc1lVRkJZVXNzVFVGQlRWY3NSVUZCUldoQ0xHRkJRV0ZQTEU5QlFVOU5MRVZCUVVWc1JDeE5RVUZOTEZWQlFWVkVMRXRCUVV0dlJDeEZRVUZGZGtNc1QwRkJUM05ETEVWQlFVVnNRaXhMUVVGTGIwSXNSVUZCUlc1Q0xFdEJRVXR2UWl4RlFVRkZla0lzVTBGQlUydERMRVZCUVVVdlFpeFRRVUZUT0VNc1NVRkJTU3hQUVVGUGFrSXNSVUZCUld0Q0xHZENRVUZuUWtNc1QwRkJUME1zU1VGQlNTeFZRVUZWT1VJc1MwRkJTMFVzY1VKQlFYRkNReXhMUVVGTFN5eEZRVUZGY0VVc1lVRkJZVXNzWTBGQlkwY3NZMEZCWTNGRUxFZEJRVWNzVTBGQlUwRXNSMEZCUnl4UFFVRlBMRTFCUVUxQkxFVkJRVVVzUjBGQlIwRXNSVUZCUlRoQ0xGVkJRVlVzUlVGQlJUbENMRVZCUVVWMVFpeFJRVUZSZGtJc1IwRkJSeXRDTEZGQlFWRXNhVUpCUVdsQ0xFdEJRVXRETEUxQlFVMHNTMEZCUzBNc1VVRkJUeXhEUVVGRmFrTXNSVUZCUlVRc1NVRkJTVU1zUlVGQlJVUXNSVUZCUlN4SFFVRkhla0lzWTBGQlkzbENMRVZCUVVVclFpeFZRVUZWTEVWQlFVVXZRaXhGUVVGRmQwSXNVMEZCVXl4SlFVRXZTaXhEUVVGdlMzUkNMRWRCUVVjc1EwRkJRM2hETEU5QlFVOXpReXhGUVVGRmJFSXNTMEZCUzI5Q0xFVkJRVVZ1UWl4TFFVRkxiMElzUlVGQlJYcENMRk5CUVZOclF5eEZRVUZGTDBJc1UwRkJVemhETEVsQlFVa3NVMEZCVXpGQ0xFVkJRVVZQTEVWQlFVVnRRaXhIUVVGSExFMUJRVTFSTEVWQlFVVkRMRTFCUVUxdVF5eEZRVUZGUkN4TFFVRkxMRWxCUVVrc1IwRkJSMWtzUlVGQlJTeERRVUZETEVkQlFVZEJMRVZCUVVWcVF5eE5RVUZOTEZGQlFWRnpRaXhGUVVGRmRrTXNUMEZCVHl4RFFVRkRMRTFCUVUxelF5eEZRVUZGUXl4RlFVRkZiME1zVFVGQlRVTXNUVUZCVFN4SlFVRkpkRU1zUlVGQlJTeE5RVUZOTEVsQlFVbFRMRVZCUVVWTExHOUNRVUZ2UWl4eFEwRkJjVU1zUTBGQlEyNURMRXRCUVV0elFpeEZRVUZGYjBNc1RVRkJUVU1zVVVGQlVTeEhRVUZITEdsQ1FVRnBRblJETEVWQlFVVXNUVUZCVFN4SlFVRkpVeXhGUVVGRlN5eHZRa0ZCYjBJc2QwSkJRWGRDTEVOQlFVTnVReXhMUVVGTGMwSXNSVUZCUlc5RExFMUJRVTFETEZGQlFWRnlReXhGUVVGRmRFSXNTMEZCU3pCRExFdEJRVXRyUWl4TlFVRk5ka01zU1VGQlNTeFRRVUZUUXl4RlFVRkZSQ3hIUVVGSExFZEJRVWRETEVWQlFVVjBRaXhQUVVGUExHdENRVUZyUW5OQ0xFVkJRVVYwUWl4UFFVRlBZaXhQUVVGUGVVUXNTMEZCUzNaQ0xFVkJRVVZ5UWl4TlFVRk5Oa01zVVVGQlVTeHJRa0ZCYTBKMlFpeEZRVUZGZEVJc1QwRkJUMmRETEVWQlFVVldMRVZCUVVWMFFpeExRVUZMY1VJc1JVRkJSWEpDTEU5QlFVOHNUVUZCVFN4SlFVRkpPRUlzUlVGQlJVc3NiMEpCUVc5Q0xIVkRRVUYxUXl4RFFVRkRia01zUzBGQlMzRkNMRVZCUVVWeVFpeFBRVUUzVFN4RFFVRnhUbWxETEVWQlFVVllMRWRCUVVjc1RVRkJUVU1zVVVGQlVYbENMRVZCUVVWMFJDeE5RVUZOTkVJc1JVRkJSVVFzUjBGQlIxVXNSVUZCUld0Q0xHZENRVUZuUWxrc1UwRkJVM2hETEVWQlFVVkZMRWRCUVVjc1RVRkJUVVFzUjBGQlIxTXNSVUZCUld0Q0xHZENRVUZuUW1Fc1ZVRkJWWHBETEVWQlFVVkRMRXRCUVV0NVF5eEZRVUZGYUVNc1JVRkJSV3RDTEdkQ1FVRm5RbTVHTEdOQlFXTXdSQ3hGUVVGRmRVTXNSVUZCUlVNc1UwRkJVek5ETEVkQlFVZEZMRVZCUVVWM1F5eEZRVUZGUlN4VFFVRlRWQ3hIUVVGSGVrSXNSVUZCUld0Q0xHZENRVUZuUW01R0xHTkJRV05yUnl4VFFVRlRNME1zUjBGQlIwVXNSVUZCUldsRExFdEJRVXR1UXl4RlFVRkZaQ3huUWtGQlowSXdRaXhIUVVGSExFbEJRVWtzUTBGQlExZ3NSVUZCUlVRc1MwRkJTeXhoUVVGaGJFTXNUMEZCVDNsRExHVkJRV1ZRTEVWQlFVVXNZVUZCWVN4RFFVRkRNMElzVDBGQlRTeEpRVUZMTWtJc1JVRkJSVFJDTEhGQ1FVRm5RaXhGUVVGUExFMUJRVTB4UWl4RlFVRkZOMFFzWjBKQlFXZENMRWxCUVVrMlJDeEZRVUZGTjBRc1kwRkJZM2RITEVsQlFVbERMR0ZCUVdGcVF5eGxRVUZsZUVVc2FVSkJRV2xDTkVRc1IwRkJSME1zUlVGQlJUSkNMRTlCUVU4MVFpeEZRVUZGT0VNc1QwRkJUemxETEVkQlFVZERMRVZCUVVVeVFpeFBRVUZQUXl4SlFVRkpMR2REUVVGblF6TkdMRXRCUVVzd1J5eEpRVUZKTlVNc1JVRkJSU3RETEd0Q1FVRnJRaTlETEVkQlFVZERMRVZCUVVVeVFpeFBRVUZQUXl4SlFVRkpMR2xEUVVGcFF6TkdMRXRCUVVzeVJ5eGhRVUZoTjBNc1JVRkJUVEpETEdWQlFWY3NUMEZCVDNwSExFdEJRVXN5Unl4aFFVRmhTQ3hUUVVGVExFOUJRVTk0Unl4TFFVRkxNRWNzU1VGQlNYaEhMSEZDUVVGeFFpeFBRVUZQTmtRc1JVRkJSWFpFTEZOQlFWTk9MR2RDUVVGblFqUkVMRVZCUVVWRUxFZEJRVWRGTEVWQlFVVXlRaXhQUVVGUFF5eEpRVUZKTEVkQlFVYzNRaXhGUVVGRlowUXNTVUZCU1c1RkxGVkJRVlYxUXl4TFFVRkxReXhWUVVGVmRFSXNUVUZCVFVNc1JVRkJSV2xFTEU5QlFVOHNTMEZCUzBNc1MwRkJTMjVFTEVkQlFVY3pSQ3huUWtGQlowSTBSQ3hGUVVGRlJDeEhRVUZIUXl4RlFVRkZhVVFzVDBGQlR5eExRVUZMUlN4TFFVRkxjRVFzUjBGQlJ6TkVMR2xDUVVGcFFqUkVMRVZCUVVWRUxFZEJRVWRGTEVWQlFVVXlRaXhQUVVGUGQwSXNXVUZCV1hKRUxFZEJRVWRETEVWQlFVVnBSQ3hQUVVGUGJFUXNSVUZCUldkQ0xFMUJRVTF0UXl4TFFVRkxMRU5CUVVOSExFMUJRVTEwUkN4TFFVRkxRU3hGUVVGRk5FSXNaMEpCUVdkQ01VSXNSMEZCUnl4SlFVRkpMRk5CUVZORUxFVkJRVVZFTEVWQlFVVkZMRWRCUVVjc1lVRkJZU3hKUVVGSlF5eEZRVUZGYUVVc1RVRkJUVUVzUzBGQlMyOUlMR3RDUVVGclFucEdMRTlCUVU4d1JpeFBRVUZQTEZOQlFWTjJSQ3hGUVVGRlJDeEZRVUZGUlN4RlFVRkZReXhSUVVGSExFbEJRVk5CTEVsQlFVbEJMRVZCUVVWRUxFZEJRVWNzU1VGQlNVMHNSVUZCUlRGRExFOUJRVTh5Uml4NVFrRkJlVUo2UkN4RlFVRkZSU3hIUVVGSFRTeExRVUZMTEZGQlFWRkJMRWRCUVVkU0xFVkJRVVZMTEZkQlFWZEhMRVZCUVVWclJDeFZRVUZWYkVRc1JVRkJSVzFFTEdkQ1FVRm5RbTVFTEVWQlFVVXNRMEZCUTI5RUxGbEJRVmNzUlVGQlIzUkhMRWxCUVVrc1YwRkJWeXhQUVVGUE1FTXNSVUZCUlVVc1RVRkJUWEJETEU5QlFVOTVReXhsUVVGbFRpeEZRVUZGUlN4RlFVRkZTeXhKUVVGSkxGTkJRVk5RTEVWQlFVVkVMRVZCUVVWRkxFVkJRVVZETEZGQlFVY3NTVUZCVTBFc1NVRkJTVUVzUlVGQlJVUXNSMEZCUjBRc1JVRkJSVVVzUjBGQlIwZ3NSVUZCUlVVc1MwRkJTMDBzUlVGQlJYSkZMRTFCUVUxQkxFdEJRVXN3U0N4alFVRmpMRk5CUVZNMVJDeEZRVUZGUkN4SFFVRkhMRWxCUVVrc1NVRkJTVVVzUzBGQlMwUXNSVUZCUlN4WlFVRlpReXhIUVVGSGNFTXNUMEZCVDJkSExGVkJRVlZETEdWQlFXVkRMRXRCUVV0b1JTeEZRVUZGUlN4SlFVRkpReXhGUVVGRlNDeEZRVUZGUXl4RlFVRkZReXhKUVVGSmNFTXNUMEZCVDNsRExHVkJRV1ZRTEVWQlFVVXNZVUZCWVN4RFFVRkRNMElzVDBGQlRTeEpRVUZMYlVNc1JVRkJSVTRzUlVGQlJTeExRVUZMUml4SFFVRkhVU3hGUVVGRlRpeEZRVUZGTEV0QlFVdEdMRWRCUVVkUkxFVkJRVVZPTEVWQlFVVXNTMEZCUzBZc1IwRkJSMUVzUlVGQlJVNHNSVUZCUlN4TFFVRkxSaXhIUVVGSFVTeEZRVUZGVGl4RlFVRkZMRXRCUVV0R0xFZEJRVWRSTEVWQlFVVk9MRVZCUVVVc1MwRkJTMFlzU1VGQlNTeEpRVUZKTEVOQlFVTkRMRVZCUVVWRUxFdEJRVXNzWVVGQllTeEpRVUZKUlN4RlFVRkZReXhGUVVGRmNrTXNUMEZCVDNsRExHVkJRV1ZRTEVWQlFVVXNZVUZCWVN4RFFVRkRNMElzVDBGQlRTeEpRVUZMTWtJc1JVRkJSV2hETEU5QlFVOW5ReXhGUVVGRllpeHJRa0ZCWVN4SFFVRlJaMElzUlVGQlJVZ3NSVUZCUldJc1pVRkJaV0VzUlVGQlJXSXNZVUZCWVN4TFFVRkxaMElzUlVGQlJXWXNTMEZCU3l4SFFVRkhMRTlCUVU5bExFVkJRVVZCTEVWQlFVVllMRTFCUVUwc1IwRkJSeXhSUVVGUlZ5eEZRVUZGUVN4RlFVRkZWQ3hQUVVGUExFZEJRVWNzVlVGQlZWRXNSVUZCUlVZc1JVRkJSV2hETEZOQlFWTm5ReXhGUVVGRmFFTXNUMEZCVHl4TFFVRkxhVWNzU1VGQlNTeE5RVUZOTDBRc1JVRkJSV2RGTEV0QlFVc3NVVUZCVVN4SlFVRkpha1VzU1VGQlNTeGhRVUZoUVN4RlFVRkZiRVVzVVVGQlVTeEZRVUZSTEU5QlFXbENhVVVzUlVGQlJTeEhRVUZITEZOQlFWTkZMRVZCUVVWRExFZEJRVWNzU1VGQlNVc3NSVUZCUlZJc1JVRkJSVWNzUjBGQlJ5eFJRVUZITEVsQlFWTkxMRVZCUVVVc1QwRkJUMEVzUlVGQlJYcEZMRkZCUVZFc1NVRkJTVEJGTEVWQlFVVlVMRVZCUVVWSExFZEJRVWNzUTBGQlEzQkZMRkZCUVZFc1NVRkJTU3hQUVVGUGEwVXNSVUZCUlVVc1IwRkJSelpFTEV0QlFVdDJSQ3hGUVVGRk1VVXNVVUZCVVRCRkxFVkJRVVZCTEVWQlFVVXhSU3hSUVVGUmJVVXNSMEZCUjA4c1JVRkJSVEZGTEZGQlFUVklMRU5CUVhGSkxFdEJRVXNzU1VGQlNXdEZMRVZCUVVWRUxFZEJRWFo0WldoRkxFVkJRVTlFTEZGQlFWRnBSU3hMTEhWSFEwVm9SaXhOUVVGaFl5eFZRVUUwUWtNc1RVRkROVUpETEV0QlFVOHNTVUZEVUVNc1dVRkRWRU1zVVVGRlFVd3NXVUZCV1Vzc1JVRkJhMEpFTEVkQlF6RkNSU3hOUVVGTlJDeEhRVU5PTDBVc1MwRkJTMVVzUzBGQlR5eGxRVU5hVml4TFFVRkxhVVlzWTBGQlkwWXNSVUZCVTBRc1IwRkROVUk1UlN4TFFVRkxPRVVzV1VGQlkwRXNSVUZIWmtjc1kwRkJZMFlzUlVGQmEwSkVMRWRCUTNCRE9VVXNTMEZCU3l0RkxGRkJRVlVzYVVKQlFXbENRU3h0UTBGQmVVTkhMRXRCUVV0RExGVkJRekZGVEN4UFFVTkJhMFFzUlVGRFFTeFJRV2hDV2l4NVFpdzJSME5FUVN4bFFVOUJMRk5CUTBFc1UwRkRRU3hUUVhORlFTeFRRVUZUUXl4RlFVRmxReXhGUVVFeVFrTXNSMEZETDBNc1NVRkJTeXhKUVVGTGNrWXNSVUZCVldRc1MwRkJVMHdzVDBGQlQwNHNVVUZCVVRaSExFZEJRM2hETEU5QlFWRnVSaXhGUVVGblFtWXNTVUZEY0VJc1MwRkJTeXhGUVVGQlowSXNZVUZCWVVNc1MwRkRaQ3hKUVVGTGEwWXNSVUZCVDNKR0xFdEJRV05rTEVWQlFVdHJRaXhoUVVGakxFMUJRemRETEZWQlFWZHBSaXhGUVVGUGNrWXNTMEZCWTJRc1JVRkJTMjlDTEZOQlFWVXNUMEZCVHl4RlFVTjBSQ3hOUVVOS0xFdEJRVXNzUlVGQlFVb3NZVUZCWVVzc1RVRkRaQ3hKUVVGTE9FVXNSVUZCVDNKR0xFbEJRV0ZrTEVWQlFVdHJRaXhoUVVGakxFOUJRVThzUlVGRGJrUXNSMEZCU1dsR0xFVkJRVTl5Uml4SFFVTlFMRWxCUVVzc1NVRkJTWE5HTEV0QlFWRkVMRVZCUVU5eVJpeEhRVVZ3UWl4SlFVUlpiVVlzUlVGQlpXcEhMRVZCUVV0elFpeFZRVUZYT0VVc1IwRkRha01zVDBGQlR5eEZRVVY2UWl4TlFVTktMRXRCUVVzc1JVRkJRWEJHTEdGQlFXRlBMRTlCUTJRc1NVRkJTelJGTEVWQlFVOXlSaXhMUVVGalpDeEZRVUZMYTBJc1lVRkJZeXhOUVVNM1F5eEpRVU5MYVVZc1JVRkJUM0pHTEV0QlExQnRSaXhGUVVGbGFrY3NSVUZCVFcxSExFVkJRVTl5Uml4SlFVVTNRaXhQUVVGUExFVkJTWFpDTEU5QlFVOHNSVUZIV0N4VFFVRm5Ra01zUlVGQlowSm1MRWRCUXpWQ0xFMUJRVTF2UkN4RlFVRlBla1FzVDBGQlQzbEVMRXRCUVV0d1JDeEhRVVY2UWl4UFFVTkpiMFFzUlVGQlMwTXNVVUZCVlN4SFFVTm1SQ3hGUVVGTFF5eFJRVUZWTEVkQlEyWkVMRVZCUVV0RkxGTkJRVk1zWVVGRFpFWXNSVUZCUzBjc1QwRkJUM1JFTEVkQlExSXNRMEZCUXl4WFFVRlpMR1ZCUVdkQ0xHZENRVUZuUW5GRUxGTkJRVk55UkN4TFFVZHVSQ3hGUVVGQlpTeGhRVUZoUXl4TFFVVndRbTFETEVWQlFVdERMRkZCUVZVc1IwRkRaa1FzUlVGQlMwTXNVVUZCVlN4SFFVTm1SQ3hGUVVGTFJTeFRRVUZUTEdOQlEyUkdMRVZCUVV0SExFOUJRVTkwUkN4SFFVTlNMRU5CUVVNc1dVRkJZU3hsUVVGblFpeG5Ra0ZCWjBKeFJDeFRRVUZUY2tRc1MwRkhjRVFzUlVGQlFXVXNZVUZCWVVzc1RVRkZZaXhGUVVGQlRDeGhRVUZoVHl4UFFYUklOVUlzYTBKQlFUSkRMRXRCUTNaRE4wTXNSVUZCU1N4UFFVTktZU3hGUVVGTkxFdEJRMDV2UWl4RlFVRkpMRXRCUTBwRExFVkJRVWtzVTBGRFNrd3NSVUZCVVN4VFFVTlNSeXhKUVZOQkxFOUJVRUVzUlVGQlFTdERMR2RDUVVGblFrTXNUMEZCVDBNc1NVRkRia0lzVlVGQlZYQkZMRXRCUVZWdlFpeHhRa0ZCZDBKRExFdEJSV2hFTEVWQlFVRXpReXhoUVVGaFN5eGpRVUZqUnl4alFVTjJRa01zUjBFNFIxSXNVMEZCTmtKcFF5eEhRVWw2UWl4UFFVZzJRaXhOUVVGYVFTeEZRVUZMTEVkQlFXRkJMRVZCUVV0cFJDeFZRVUZWTEVWQlFVZHFSQ3hGUVVGTE1FTXNVVUZCVlRGRExFZEJRM3BEYTBRc1VVRkJVU3hwUWtGQmEwSXNTMEZCUzBNc1RVRkJUU3hMUVVVdlEwTXNVVUZCVHl4RFFVRkRja1lzUlVGQlRUSklMRWxCUlhCQ00wZ3NSVUZFVHpKSUxFVkJRVXNzUjBGQlIycEhMR05CUTBGcFJ5eEZRVUZMZWtNc1ZVRkJWU3hGUVVGSGVVTXNSVUZCUzJoRUxGTkJRemxETEVsQmNraFRhVVFzUTBGQmIwSXpSaXhIUVVNMVFpeERRVUZGY0VJc1UwRkJVVzlDTEU5QlFVMURMRTlCUVUxTUxGZEJRVlZITEdGQlJUZENMRk5CUTBnMlJpeEZRVU5CUXl4RlFVTkJReXhIUVVWQkxFMUJRVTB2Uml4RlFVRlhkVVFzVFVGQlQyRXNSVUZCWXpSQ0xFdEJRMnhETEVsQlEwa3NSMEZCU1c1SExFVkJRVlVzUTBGRFZpeEhRVUZKUVN4RlFVRlRReXhOUVVGMVFpeFJRVUZtYzBVc1JVRkJTWFpHTEU5QlFXdENMRU5CUTNaRExFMUJRVTF2U0N4RlFVRlBOMElzUlVGQlNWb3NUVUZCVFVNc1RVRkRka0lzU1VGQlMzZERMRVZCUTBRc1RVRkJUU3hKUVVGSkxFVkJRVUZvUlN4dlFrRkRUaXh4UTBGRFFTeERRVUZGYmtNc1MwRkJUWE5GTEVWQlFVbGFMRTFCUVUxRExGRkJSVEZDTEVkQlFYTkNMR2xDUVVGVWQwTXNSVUZEVkN4TlFVRk5MRWxCUVVrc1JVRkJRV2hGTEc5Q1FVTk9MSGRDUVVOQkxFTkJRVVZ1UXl4TFFVRk5jMFVzUlVGQlNWb3NUVUZCVFVNc1VVRkZNVUpYTEVWQlFVbDBSU3hMUVVGUE1FTXNTMEZCUzJ0Q0xFMUJRVTExUXl4SlFXbENPVU1zVTBGQk1rSndSeXhGUVVGM1FuVkZMRWRCUXk5RExFZEJRVWwyUlN4RlFVRlRReXhQUVVWeFFpeHJRa0ZCYkVKRUxFVkJRVk5ETEU5QlExcGlMRTlCUVU5NVJDeExRVUZMTUVJc1JVRkJTWFJGTEUxQlFVMDJReXhSUVVORUxHdENRVUZzUWpsRExFVkJRVk5ETEU5QlExcDVSaXhGUVVGbE1VWXNSVUZCVTBNc1MwRkJUWE5GTEVWQlFVbDBSU3hQUVVWMlF5eE5RVUZOTEVsQlFVa3NSVUZCUVcxRExHOUNRVU5PTEhWRFFVTkJMRU5CUVVWdVF5eExRVUZOYzBVc1JVRkJTWFJGTEU5QmVrSlNiMGNzUTBGQmEwSnlSeXhGUVVGVmRVVXNSMEZGYUVNc1RVRkJUU3RDTEZGQlFXbENTaXhGUVVGWGRrY3NUVUZCVFRSRkxFVkJRVXMwUWl4SFFVTTNReXhGUVVGQmFrUXNaMEpCUVdkQ1dTeFRRVUZUY1VNc1JVRkJTMGNzUjBGRGFFTXNUVUZCVDBNc1IwRkRUQ3hGUVVGQmNrUXNaMEpCUVdkQ1lTeFZRVUZWYjBNc1JVRkJTMGtzUzBGSmFrTkRMRVZCUVZNc1JVRkJRWFJFTEdkQ1FVRm5RbTVHTEdOQlF6TkNjME1zUlVGQlRXMUhMRVZCUVU5MlF5eFRRVUZUYWtZc1IwRkJVVzlDTEVWQlFVMXZSeXhGUVVGUGRFTXNVMEZCVlM5RUxFZEJRM0JFTEVWQlFVRXJReXhuUWtGQlowSnVSaXhqUVVGamEwY3NVMEZCVTJwR0xFZEJRVkZ2UWl4RlFVRk5SQ3hMUVdkRWJFVXNjVUlzYlVkRGRrZEJMRTFCUVdFclF5eEZRVU5FZGtZc1owSkJRVzFETEVsQlFVbDFSaXhGUVVNdlEzWkdMR05CUTFGM1J5eEpRVU5CUXl4aFFVVlNMR1ZCUlVGNlJ5eHBRa0ZCYVVKM1JpeEhRVU5pUkN4RlFVRm5Ra01zVDBGQlUwRXNSVUZITjBKclFpeFBRVUZQUml4SFFVTklha0lzUlVGQlowSkRMRTlCUVU5RExFbEJRVWtzWjBOQlF6TkNNMFlzUzBGQlN6QkhMRWxCUVUxQkxFVkJSMlpITEd0Q1FVRnJRa1lzUjBGRFpHeENMRVZCUVdkQ1F5eFBRVUZQUXl4SlFVRkpMR2xEUVVNelFqTkdMRXRCUVVzeVJ5eGhRVUZsUVN4RlFVZHdRa1lzWlVGRFFTeFBRVUZQZWtjc1MwRkJTekpITEdGQlIyaENTQ3hUUVVOSkxFOUJRVTk0Unl4TFFVRkxNRWNzU1VGSGFFSjRSeXh4UWtGRFNTeFBRVUZQZFVZc1JVRkJaMEpxUml4VFFVY3pRazRzWjBKQlFXZENkMGtzUlVGQlpVTXNSMEZETTBKc1JDeEZRVUZuUWtNc1QwRkJUME1zU1VGQlNTeEhRVUZISzBNc1JVRkJTVFZDTEVsQlFVbHVSU3hWUVVGVmRVTXNTMEZCUzBNc1ZVRkJWWGRFTEUxQlF5OUVSQ3hGUVVGSk0wSXNUMEZCVHl4TFFVRkxReXhMUVVGTE1rSXNSMEZIZWtKNlNTeG5Ra0ZCWjBKM1NTeEZRVUZsTTBRc1IwRkRNMEl5UkN4RlFVRkpNMElzVDBGQlR5eExRVUZMUlN4TFFVRkxiRU1zUjBGSGVrSTNSU3hwUWtGQmFVSjNTU3hGUVVGbGRrSXNSMEZETlVJeFFpeEZRVUZuUWtNc1QwRkJUM2RDTEZsQlFWbERMRWRCUTI1RGRVSXNSVUZCU1ROQ0xFOUJRVTlKTEVWQlFVMTBReXhOUVVGTmJVTXNTMEZCU3l4RFFVRkZSeXhYUVRkRGRFTXNjVUlzYzJkQ1EweEJMRmxCUlVFc1dVRkRRU3haUVVOQkxGbEJRMEVzV1VGRFFTeGhMSGxDUXpoRlFTeEpRVUZaZEVZc1JVRk1RVzFDTEVVc2FVWkJRVUZCTEVWQlFVRXNSVUZCUVVFc1pVRkJRU3hGUVVGQlFTeGhRVUZaTEV0QlEzQkNMR2xDUVVOQkxIRkNRVU5CTEhkQ1FVVlJia0lzUlVGQlFTeEZRVUZCUVN4VFFVRkJMRVZCUVVGQkxFOUJRVTBzUzBGRFpDeFZRVU5CTEdVc2NVSkRkRVpLYUVNc1JVRkJUMFFzVVVGQlZXOUtMRkZCUVZFc2FVSkRRM0pDUXl4RlFVRXlRaXhIUVVjdlFpeFRRVUZUUXl4RlFVRnZRa01zUjBGRk5VSXNTVUZCU1VNc1JVRkJaVWdzUlVGQmVVSkZMRWRCUXpWRExGRkJRWEZDYmtJc1NVRkJha0p2UWl4RlFVTklMRTlCUVU5QkxFVkJRV0Y0U2l4UlFVZHlRaXhKUVVGSlF5eEZRVUZUYjBvc1JVRkJlVUpGTEVkQlFWa3NRMEZIYWtSMlNpeFJRVUZUTEVsQlQxWXNUMEZJUVhsS0xFVkJRVzlDUml4SFFVRlZkRUlzUzBGQlMyaEpMRVZCUVU5RUxGRkJRVk5ETEVWQlFWRkJMRVZCUVU5RUxGRkJRVk56U2l4SFFVZHdSWEpLTEVWQlFVOUVMRkZEYkVKWGMwb3NRMEZCYjBJc1N5eE5SRVl4UTBRaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlCVkVkbGJpOTNaV0p3WVdOckwzVnVhWFpsY25OaGJFMXZaSFZzWlVSbFptbHVhWFJwYjI0aUxDSjNaV0p3WVdOck9pOHZRVlJIWlc0dkxpOWpiM0psTDJGd2FTNW5aVzVsY21GMGIzSXVkSE1pTENKM1pXSndZV05yT2k4dlFWUkhaVzR2TGk5amIzSmxMM1I1Y0dWekxuSmxaMmx6ZEdWeUxuUnpJaXdpZDJWaWNHRmphem92TDBGVVIyVnVMeTR2WkdsemRDOXBibVJsZUM1cWN5SXNJbmRsWW5CaFkyczZMeTlCVkVkbGJpOHVMMlZ5Y205eWN5OXBiblpoYkdsa0xYSmxjWFZsYzNRdVpYSnliM0l1ZEhNaUxDSjNaV0p3WVdOck9pOHZRVlJIWlc0dkxpOWxlSEJ5WlhOekwyUmxZMjl5WVhSdmNuTXZjbTkxZEdVdVpHVmpiM0poZEc5eUxuUnpJaXdpZDJWaWNHRmphem92TDBGVVIyVnVMeTR2Wlhod2NtVnpjeTlsZUhCeVpYTnpMbkJ5YjNacFpHVnlMblJ6SWl3aWQyVmljR0ZqYXpvdkwwRlVSMlZ1THk0dmFXNWtaWGd1ZEhNaUxDSjNaV0p3WVdOck9pOHZRVlJIWlc0dkxpOTBlWEJsY3k1MGN5SXNJbmRsWW5CaFkyczZMeTlCVkVkbGJpOWxlSFJsY201aGJDQnViMlJsTFdOdmJXMXZibXB6SUZ3aVpuTXZjSEp2YldselpYTmNJaUlzSW5kbFluQmhZMnM2THk5QlZFZGxiaTkzWldKd1lXTnJMMkp2YjNSemRISmhjQ0lzSW5kbFluQmhZMnM2THk5QlZFZGxiaTkzWldKd1lXTnJMM04wWVhKMGRYQWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpS0daMWJtTjBhVzl1SUhkbFluQmhZMnRWYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVLSEp2YjNRc0lHWmhZM1J2Y25rcElIdGNibHgwYVdZb2RIbHdaVzltSUdWNGNHOXlkSE1nUFQwOUlDZHZZbXBsWTNRbklDWW1JSFI1Y0dWdlppQnRiMlIxYkdVZ1BUMDlJQ2R2WW1wbFkzUW5LVnh1WEhSY2RHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ptRmpkRzl5ZVNncE8xeHVYSFJsYkhObElHbG1LSFI1Y0dWdlppQmtaV1pwYm1VZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ1pHVm1hVzVsTG1GdFpDbGNibHgwWEhSa1pXWnBibVVvWENKQlZFZGxibHdpTENCYlhTd2dabUZqZEc5eWVTazdYRzVjZEdWc2MyVWdhV1lvZEhsd1pXOW1JR1Y0Y0c5eWRITWdQVDA5SUNkdlltcGxZM1FuS1Z4dVhIUmNkR1Y0Y0c5eWRITmJYQ0pCVkVkbGJsd2lYU0E5SUdaaFkzUnZjbmtvS1R0Y2JseDBaV3h6WlZ4dVhIUmNkSEp2YjNSYlhDSkJWRWRsYmx3aVhTQTlJR1poWTNSdmNua29LVHRjYm4wcEtIUm9hWE1zSUNncElEMCtJSHRjYm5KbGRIVnliaUFpTENKcGJYQnZjblFnWm5NZ1puSnZiU0JjSW1aekwzQnliMjFwYzJWelhDSTdYSEpjYm1sdGNHOXlkQ0I3SUUxbGRHaHZaQ3dnVUhKdmNHVnlkSGxVZVhCbExDQlNaWEYxWlhOMFNXNXdkWFFzSUZKbGNYVmxjM1JQZFhSd2RYUXNJRkp2ZFhSbElIMGdabkp2YlNCY0lpNHVYQ0k3WEhKY2JtbHRjRzl5ZENCN0lHZGxkRkJ5YjNCbGNuUjVWSGx3WlNCOUlHWnliMjBnWENJdUxpOWxlSEJ5WlhOekwyUmxZMjl5WVhSdmNuTXZjbTkxZEdVdVpHVmpiM0poZEc5eVhDSTdYSEpjYm1sdGNHOXlkQ0I3SUZSNWNHVnpVbVZuYVhOMFpYSWdmU0JtY205dElGd2lMaTkwZVhCbGN5NXlaV2RwYzNSbGNsd2lPMXh5WEc1Y2NseHVaWGh3YjNKMElHTnNZWE56SUVGd2FVZGxibVZ5WVhSdmNpQjdYSEpjYmlBZ0lDQndjbWwyWVhSbElITjBZWFJwWXlCcGJuTjBZVzVqWlRvZ1FYQnBSMlZ1WlhKaGRHOXlJRDBnYm1WM0lFRndhVWRsYm1WeVlYUnZjaWdwTzF4eVhHNGdJQ0FnY0hKcGRtRjBaU0J5YjNWMFpYTTZJRTFoY0R4emRISnBibWNzSUZKdmRYUmxQanRjY2x4dUlDQWdJSEJ5YVhaaGRHVWdkSGx3WlhOU1pXZHBjM1JsY2pvZ1ZIbHdaWE5TWldkcGMzUmxjaUE5SUZSNWNHVnpVbVZuYVhOMFpYSXVaMlYwU1c1emRHRnVZMlVvS1R0Y2NseHVYSEpjYmlBZ0lDQndjbWwyWVhSbElHTnZibk4wY25WamRHOXlLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y205MWRHVnpJRDBnYm1WM0lFMWhjRHh6ZEhKcGJtY3NJRkp2ZFhSbFBpZ3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhOMFlYUnBZeUJuWlhSSmJuTjBZVzVqWlNncElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdRWEJwUjJWdVpYSmhkRzl5TG1sdWMzUmhibU5sTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxaMmx6ZEdWeVVtOTFkR1VvYm1GdFpUb2djM1J5YVc1bkxDQnliM1YwWlRvZ1VtOTFkR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5KdmRYUmxjeTV6WlhRb2JtRnRaU3dnY205MWRHVXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdkbGJtVnlZWFJsUVhCcFVtVm5hWE4wWlhJb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElIUnpJRDBnWENJdkx5QkhaVzVsY21GMFpXUWdZMjl1ZEdWdWRDd2daRzl1SjNRZ2RHOTFZMmhjWEc1Y1hHNWNJanRjY2x4dUlDQWdJQ0FnSUNCMGN5QXJQU0IwYUdsekxtZGxibVZ5WVhSbFVtOTFkR1ZVZVhCbFZGTW9LVHRjY2x4dUlDQWdJQ0FnSUNCMGN5QXJQU0IwYUdsekxtZGxibVZ5WVhSbFRXVjBhRzlrUlc1MWJWUlRLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RITWdLejBnZEdocGN5NW5aVzVsY21GMFpWSmxaMmx6ZEdWeVpXUlVlWEJsYzFSVEtDazdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjbTkxZEdWelZIbHdaWE02SUhzZ1czUjVjR1VnYVc0Z1RXVjBhRzlrWFRvZ2MzUnlhVzVuVzEwZ2ZTQTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwT2lCYlhTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXpkRG9nVzEwc1hISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCYmJtRnRaU3dnY205MWRHVmRJRzltSUhSb2FYTXVjbTkxZEdWekxtVnVkSEpwWlhNb0tTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjeUFyUFNCMGFHbHpMbWRsYm1WeVlYUmxVbTkxZEdWVVV5aHVZVzFsTENCeWIzVjBaU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEp2ZFhSbGMxUjVjR1Z6VzNKdmRYUmxMbTFsZEdodlpGMHVjSFZ6YUNodVlXMWxLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdkSE1nS3owZ2RHaHBjeTVuWlc1bGNtRjBaVkp2ZFhSbGMxUjVjR1Z6S0hKdmRYUmxjMVI1Y0dWektUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuZHlhWFJsUVhCcFVtVm5hWE4wWlhKVWIwWnBiR1VvZEhNcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSEJ5YVhaaGRHVWdaMlZ1WlhKaGRHVk5aWFJvYjJSRmJuVnRWRk1vS1NCN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUhSeklEMGdZRnhjYm1WNGNHOXlkQ0JsYm5WdElFMWxkR2h2WkNCN1lEdGNjbHh1SUNBZ0lDQWdJQ0JQWW1wbFkzUXVkbUZzZFdWektFMWxkR2h2WkNrdVptOXlSV0ZqYUNnb2JXVjBhRzlrS1NBOVBpQW9kSE1nS3owZ1lGeGNibHhjZENSN2JXVjBhRzlrZlN4Z0tTazdYSEpjYmlBZ0lDQWdJQ0FnZEhNZ0t6MGdYQ0pjWEc1OVhGeHVYRnh1WENJN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnpPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhCeWFYWmhkR1VnWjJWdVpYSmhkR1ZTWldkcGMzUmxjbVZrVkhsd1pYTlVVeWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnZEhNZ1BTQmNJbHhjYmx3aU8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWRIbHdaWE5TWldkcGMzUmxjaTVsYm5WdGN5NW1iM0pGWVdOb0tDaDBlWEJsTENCdVlXMWxLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSeklDczlJR0JjWEc1bGVIQnZjblFnWlc1MWJTQWtlMjVoYldWOUlIdGdPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQlBZbXBsWTNRdVpXNTBjbWxsY3loMGVYQmxLUzVtYjNKRllXTm9LRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0Z0clpYa3NJSFpoYkhWbFhTa2dQVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9kSE1nS3owZ1lGeGNibHhjZENSN2EyVjVmU0E5SUNSN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ1hDSnVkVzFpWlhKY0lpQS9JSFpoYkhWbElEb2dZRndpSkh0MllXeDFaWDFjSW1CY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEdBcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSeklDczlJRndpWEZ4dWZWeGNibHdpTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY3p0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQndjbWwyWVhSbElHZGxibVZ5WVhSbFVtOTFkR1ZVZVhCbFZGTW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdCY1hHNTBlWEJsSUZKdmRYUmxJRDBnZTI1aGJXVTZJSE4wY21sdVp6c2diV1YwYUc5a09pQk5aWFJvYjJRN0lIQmhkR2c2SUhOMGNtbHVaenNnY21WeGRXbHlaVUYxZEdnL09pQmliMjlzWldGdUlId2dkVzVrWldacGJtVmtPeUJrWVhSaFB6b2dZVzU1SUh3Z2RXNWtaV1pwYm1Wa095QnlaWE02WVc1NWZUdGNYRzVjWEc1Z08xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSEJ5YVhaaGRHVWdaMlZ1WlhKaGRHVlNiM1YwWlhOVWVYQmxjeWh5YjNWMFpYTlVlWEJsY3pvZ2V5QmJkSGx3WlNCcGJpQk5aWFJvYjJSZE9pQnpkSEpwYm1kYlhTQjlLU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSFI1Y0dWeklEMGdYQ0pjSWp0Y2NseHVJQ0FnSUNBZ0lDQlBZbXBsWTNRdVpXNTBjbWxsY3loeWIzVjBaWE5VZVhCbGN5a3VabTl5UldGamFDZ29XMjFsZEdodlpDd2djbTkxZEdWelhTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbGN5QXJQU0JnWEZ4dVpYaHdiM0owSUhSNWNHVWdWQ1I3YldWMGFHOWtMblJ2VlhCd1pYSkRZWE5sS0NsOVVtOTFkR1Z6SUQwZ1VtOTFkR1VrZTNKdmRYUmxjeTVxYjJsdUtGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0lnZkNCU2IzVjBaVndpWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ2w5TzJBN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSNWNHVnpPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhCeWFYWmhkR1VnWjJWdVpYSmhkR1ZTYjNWMFpWUlRLRzVoYldVNklITjBjbWx1Wnl3Z2NtOTFkR1U2SUZKdmRYUmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSFJ6SUQwZ1lHVjRjRzl5ZENCMGVYQmxJRlJTYjNWMFpTUjdibUZ0WlgxSmJuQjFkQ0E5SUNSN2RHaHBjeTVuWlhSRVlYUmhWSGx3WlZSVEtGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeWIzVjBaUzV5WlhGMWFYSmxaRDh1WW05a2VWeHlYRzRnSUNBZ0lDQWdJQ2w5TzF4Y2JtQTdYSEpjYmlBZ0lDQWdJQ0FnZEhNZ0t6MGdZR1Y0Y0c5eWRDQjBlWEJsSUZSU2IzVjBaU1I3Ym1GdFpYMVBkWFJ3ZFhRZ1BTQWtlM1JvYVhNdVoyVnVaWEpoZEdWUGRYUndkWFJVZVhCbFZGTW9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISnZkWFJsTG5KbGMzQnZibk5sWEhKY2JpQWdJQ0FnSUNBZ0tYMDdYRnh1WUR0Y2NseHVJQ0FnSUNBZ0lDQjBjeUFyUFNCZ1hISmNibVY0Y0c5eWRDQjBlWEJsSUZKdmRYUmxKSHR1WVcxbGZTQTlJSHRjY2x4dUlDQWdJRzVoYldVNklGd2lKSHR1WVcxbGZWd2lPMXh5WEc0Z0lDQWdiV1YwYUc5a09pQk5aWFJvYjJRdUpIdHliM1YwWlM1dFpYUm9iMlI5TzF4eVhHNGdJQ0FnY0dGMGFEb2dYQ0lrZTNKdmRYUmxMbkJoZEdoOVhDSTdYSEpjYmlBZ0lDQnlaWEYxYVhKbFFYVjBhRG9nSkh0eWIzVjBaUzVoZFhSb2ZUdGNjbHh1SUNBZ0lDUjdYSEpjYmlBZ0lDQWdJQ0FnY205MWRHVXVjbVZ4ZFdseVpXUS9MbUp2WkhsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUHlCZ1pHRjBZVG9nVkZKdmRYUmxKSHR1WVcxbGZVbHVjSFYwWUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUdCa1lYUmhQem9nVkZKdmRYUmxKSHR1WVcxbGZVbHVjSFYwWUZ4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21Wek9pQlVVbTkxZEdVa2UyNWhiV1Y5VDNWMGNIVjBPMXh5WEc1OU8xeHlYRzVsZUhCdmNuUWdZMjl1YzNRZ1oyVjBVbVZ4ZFdWemRDUjdibUZ0WlgwZ1BTQW9KSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbTkxZEdVdWNtVnhkV2x5WldRL0xtSnZaSGtnUHlCZ1pHRjBZVG9nVW05MWRHVWtlMjVoYldWOVcxd2laR0YwWVZ3aVhXQWdPaUJjSWx3aVhISmNiaUFnSUNBZ0lDQWdmU2s2SUU5dGFYUThVbTkxZEdVa2UyNWhiV1Y5TENCY0luSmxjMXdpUGlBOVBpQW9lMXh5WEc0Z0lDQWdibUZ0WlRvZ1hDSWtlMjVoYldWOVhDSXNYSEpjYmlBZ0lDQnRaWFJvYjJRNklFMWxkR2h2WkM0a2UzSnZkWFJsTG0xbGRHaHZaSDBzWEhKY2JpQWdJQ0J3WVhSb09pQmNJaVI3Y205MWRHVXVjR0YwYUgxY0lpeGNjbHh1SUNBZ0lISmxjWFZwY21WQmRYUm9PaUFrZTNKdmRYUmxMbUYxZEdoOUxGeHlYRzRnSUNBZ0pIdHliM1YwWlM1eVpYRjFhWEpsWkQ4dVltOWtlU0EvSUZ3aVpHRjBZU3hjSWlBNklGd2lYQ0o5WEhKY2JuMHBPMXhjYmx4Y2JtQTdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ6TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lIQnlhWFpoZEdVZ1oyVjBSR0YwWVZSNWNHVlVVeWhpYjJSNVB6b2dZbTl2YkdWaGJpQjhJRkpsY1hWbGMzUkpibkIxZER4aGJuaytLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR0p2WkhrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUJpYjJSNUlEMDlQU0JjSW1KdmIyeGxZVzVjSWx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QmNJbUZ1ZVZ3aVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJSFJvYVhNdVoyVnVaWEpoZEdWSmJuQjFkRlI1Y0dWVVV5aGliMlI1S1R0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSjFKdmRYUmxXMXdpWkdGMFlWd2lYU2M3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSEJ5YVhaaGRHVWdaMlZ1WlhKaGRHVkpibkIxZEZSNWNHVlVVeWgwZVhCbE9pQlNaWEYxWlhOMFNXNXdkWFE4WVc1NVBpa2dlMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQjBjeUE5SUZ3aWUxd2lPMXh5WEc0Z0lDQWdJQ0FnSUU5aWFtVmpkQzVsYm5SeWFXVnpLSFI1Y0dVcExtWnZja1ZoWTJnb0tGdHdjbTl3WlhKMGVTd2dkSGx3WlYwcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCeWIzQmxjblI1SUNFOVBTQmNJbDlmY21WeGRXbHlaV1JmWDF3aUtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0lDaG5aWFJRY205d1pYSjBlVlI1Y0dVb2RIbHdaU2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGQnliM0JsY25SNVZIbHdaUzVDUVZORk9seHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjeUFyUFNCZ1hGeHVYRngwWEZ4MEpIdHdjbTl3WlhKMGVYMGtlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaUzVmWDNKbGNYVnBjbVZrWDE4Z1B5QmNJanBjSWlBNklGd2lQenBjSWx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUpIdDBlWEJsTGw5ZmJuVnNiR0ZpYkdWZlh5QS9JRndpSUc1MWJHd2dmRndpSURvZ1hDSmNJbjBnSkh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVdVgxOTBlWEJsWDE5Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGdPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRkJ5YjNCbGNuUjVWSGx3WlM1QlVsSkJXVHBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhNZ0t6MGdZRnhjYmx4Y2RGeGNkQ1I3Y0hKdmNHVnlkSGw5Skh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVdVgxOXlaWEYxYVhKbFpGOWZJQ0U5UFNCbVlXeHpaU0EvSUZ3aU9sd2lJRG9nWENJL09sd2lYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnSkh0MGFHbHpMbWRsYm1WeVlYUmxTVzV3ZFhSVWVYQmxWRk1vZEhsd1pTNWZYMkZ5Y21GNVgxOHBmVnRkTzJBN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1VISnZjR1Z5ZEhsVWVYQmxMazlDU2tWRFZEcGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSE1nS3owZ1lGeGNibHhjZEZ4Y2RDUjdjSEp2Y0dWeWRIbDlKSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1V1WDE5eVpYRjFhWEpsWkY5ZklDRTlQU0JtWVd4elpTQS9JRndpT2x3aUlEb2dYQ0kvT2x3aVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGtlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaUzVmWDI1MWJHeGhZbXhsWDE4Z1B5QmNJaUJ1ZFd4c0lIeGNJaUE2SUZ3aVhDSmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0FrZTNSb2FYTXVaMlZ1WlhKaGRHVkpibkIxZEZSNWNHVlVVeWgwZVhCbEtYMDdZRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZEhNZ0t6MGdYQ0pjWEc1Y1hIUjlYQ0k3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSek8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSEJ5YVhaaGRHVWdaMlZ1WlhKaGRHVlBkWFJ3ZFhSVWVYQmxWRk1vZEhsd1pUODZJRkpsY1hWbGMzUlBkWFJ3ZFhROFlXNTVQaWtnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEhsd1pTa2djbVYwZFhKdUlGd2lZVzU1WENJN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUhSeklEMGdYQ0o3WENJN1hISmNiaUFnSUNBZ0lDQWdUMkpxWldOMExtVnVkSEpwWlhNb2RIbHdaU2t1Wm05eVJXRmphQ2dvVzNCeWIzQmxjblI1TENCMGVYQmxYU2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jSEp2Y0dWeWRIa2dJVDA5SUZ3aVgxOXlaWEYxYVhKbFpGOWZYQ0lwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdnS0dkbGRGQnliM0JsY25SNVZIbHdaU2gwZVhCbEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnVUhKdmNHVnlkSGxVZVhCbExrSkJVMFU2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeklDczlJR0JjWEc1Y1hIUmNYSFFrZTNCeWIzQmxjblI1ZlNSN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbExsOWZjbVZ4ZFdseVpXUmZYeUEvSUZ3aU9sd2lJRG9nWENJL09sd2lYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBrZTNSNWNHVXVYMTl1ZFd4c1lXSnNaVjlmSUQ4Z1hDSWdiblZzYkNCOFhDSWdPaUJjSWx3aWZTQWtlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaUzVmWDNSNWNHVmZYMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzJBN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1VISnZjR1Z5ZEhsVWVYQmxMa0ZTVWtGWk9seHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjeUFyUFNCZ1hGeHVYRngwWEZ4MEpIdHdjbTl3WlhKMGVYMGtlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaUzVmWDNKbGNYVnBjbVZrWDE4Z0lUMDlJR1poYkhObElEOGdYQ0k2WENJZ09pQmNJajg2WENKY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQWtlM1JvYVhNdVoyVnVaWEpoZEdWUGRYUndkWFJVZVhCbFZGTW9kSGx3WlM1ZlgyRnljbUY1WDE4cGZWdGRPMkE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnVUhKdmNHVnlkSGxVZVhCbExrOUNTa1ZEVkRwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RITWdLejBnWUZ4Y2JseGNkRnhjZENSN2NISnZjR1Z5ZEhsOUpIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVXVYMTl5WlhGMWFYSmxaRjlmSUNFOVBTQm1ZV3h6WlNBL0lGd2lPbHdpSURvZ1hDSS9PbHdpWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwa2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pTNWZYMjUxYkd4aFlteGxYMThnUHlCY0lpQnVkV3hzSUh4Y0lpQTZJRndpWENKY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQWtlM1JvYVhNdVoyVnVaWEpoZEdWUGRYUndkWFJVZVhCbFZGTW9kSGx3WlNsOU8yQTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSFJ6SUNzOUlGd2lYRnh1WEZ4MGZWd2lPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY3p0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQndjbWwyWVhSbElIZHlhWFJsUVhCcFVtVm5hWE4wWlhKVWIwWnBiR1VvZEhNNklITjBjbWx1WnlrZ2UxeHlYRzRnSUNBZ0lDQWdJR1p6TG5keWFYUmxSbWxzWlNod2NtOWpaWE56TG1WdWRpNUJWRWRGVGw5VVdWQkZVMTlHVDB4RVJWSlFRVlJJSUNzZ1hDSXZZWEJwTG1RdWRITmNJaXdnZEhNcE8xeHlYRzRnSUNBZ2ZWeHlYRzU5WEhKY2JpSXNJbWx0Y0c5eWRDQjdJRkp2ZFhSbElIMGdabkp2YlNCY0lpNHVYQ0k3WEhKY2JseHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1ZIbHdaWE5TWldkcGMzUmxjaUI3WEhKY2JpQWdJQ0J3Y21sMllYUmxJSE4wWVhScFl5QnBibk4wWVc1alpUb2dWSGx3WlhOU1pXZHBjM1JsY2lBOUlHNWxkeUJVZVhCbGMxSmxaMmx6ZEdWeUtDazdYSEpjYmlBZ0lDQnlaV0ZrYjI1c2VTQmxiblZ0Y3pvZ1RXRndQSE4wY21sdVp5d2dZVzU1UGp0Y2NseHVYSEpjYmlBZ0lDQndjbWwyWVhSbElHTnZibk4wY25WamRHOXlLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Wlc1MWJYTWdQU0J1WlhjZ1RXRndQSE4wY21sdVp5d2dVbTkxZEdVK0tDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYzNSaGRHbGpJR2RsZEVsdWMzUmhibU5sS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlVlWEJsYzFKbFoybHpkR1Z5TG1sdWMzUmhibU5sTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxaMmx6ZEdWeVJXNTFiU2h1WVcxbE9pQnpkSEpwYm1jc0lIUjVjR1U2SUdGdWVTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaVzUxYlhNdWMyVjBLRzVoYldVc0lIUjVjR1VwTzF4eVhHNGdJQ0FnZlZ4eVhHNTlYSEpjYmlJc0lpRm1kVzVqZEdsdmJpaGxMSFFwZTF3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCbGVIQnZjblJ6SmlaY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2JXOWtkV3hsUDIxdlpIVnNaUzVsZUhCdmNuUnpQWFFvS1RwY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQmtaV1pwYm1VbUptUmxabWx1WlM1aGJXUS9aR1ZtYVc1bEtGd2lRVlJIWlc1Y0lpeGJYU3gwS1RwY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ1pYaHdiM0owY3o5bGVIQnZjblJ6TGtGVVIyVnVQWFFvS1RwbExrRlVSMlZ1UFhRb0tYMG9kR2hwY3l3b0tDazlQbnR5WlhSMWNtNGdaVDE3TkRReU9tWjFibU4wYVc5dUtHVXNkQ3h5S1h0Y0luVnpaU0J6ZEhKcFkzUmNJanQyWVhJZ2JqMTBhR2x6SmlaMGFHbHpMbDlmYVcxd2IzSjBSR1ZtWVhWc2RIeDhablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1VtSm1VdVgxOWxjMDF2WkhWc1pUOWxPbnRrWldaaGRXeDBPbVY5ZlR0UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kQ3hjSWw5ZlpYTk5iMlIxYkdWY0lpeDdkbUZzZFdVNklUQjlLU3gwTGtGd2FVZGxibVZ5WVhSdmNqMTJiMmxrSURBN1kyOXVjM1FnYnoxdUtISW9Namt5S1Nrc2N6MXlLRGd4TWlrc1lUMXlLRFkxTUNrc2FUMXlLREUzT1NrN1kyeGhjM01nZFh0emRHRjBhV01nYVc1emRHRnVZMlU5Ym1WM0lIVTdjbTkxZEdWek8zUjVjR1Z6VW1WbmFYTjBaWEk5YVM1VWVYQmxjMUpsWjJsemRHVnlMbWRsZEVsdWMzUmhibU5sS0NrN1kyOXVjM1J5ZFdOMGIzSW9LWHQwYUdsekxuSnZkWFJsY3oxdVpYY2dUV0Z3ZlhOMFlYUnBZeUJuWlhSSmJuTjBZVzVqWlNncGUzSmxkSFZ5YmlCMUxtbHVjM1JoYm1ObGZYSmxaMmx6ZEdWeVVtOTFkR1VvWlN4MEtYdDBhR2x6TG5KdmRYUmxjeTV6WlhRb1pTeDBLWDFuWlc1bGNtRjBaVUZ3YVZKbFoybHpkR1Z5S0NsN2JHVjBJR1U5WENJdkx5QkhaVzVsY21GMFpXUWdZMjl1ZEdWdWRDd2daRzl1SjNRZ2RHOTFZMmhjWEc1Y1hHNWNJanRsS3oxMGFHbHpMbWRsYm1WeVlYUmxVbTkxZEdWVWVYQmxWRk1vS1N4bEt6MTBhR2x6TG1kbGJtVnlZWFJsVFdWMGFHOWtSVzUxYlZSVEtDa3NaU3M5ZEdocGN5NW5aVzVsY21GMFpWSmxaMmx6ZEdWeVpXUlVlWEJsYzFSVEtDazdZMjl1YzNRZ2REMTdaMlYwT2x0ZExIQnZjM1E2VzExOU8yWnZjaWhzWlhSYmNpeHVYVzltSUhSb2FYTXVjbTkxZEdWekxtVnVkSEpwWlhNb0tTbGxLejEwYUdsekxtZGxibVZ5WVhSbFVtOTFkR1ZVVXloeUxHNHBMSFJiYmk1dFpYUm9iMlJkTG5CMWMyZ29jaWs3WlNzOWRHaHBjeTVuWlc1bGNtRjBaVkp2ZFhSbGMxUjVjR1Z6S0hRcExIUm9hWE11ZDNKcGRHVkJjR2xTWldkcGMzUmxjbFJ2Um1sc1pTaGxLWDFuWlc1bGNtRjBaVTFsZEdodlpFVnVkVzFVVXlncGUyeGxkQ0JsUFZ3aVhGeHVaWGh3YjNKMElHVnVkVzBnVFdWMGFHOWtJSHRjSWp0eVpYUjFjbTRnVDJKcVpXTjBMblpoYkhWbGN5aHpMazFsZEdodlpDa3VabTl5UldGamFDZ29kRDArWlNzOVlGeGNibHhjZENSN2RIMHNZQ2twTEdVclBWd2lYRnh1ZlZ4Y2JseGNibHdpTEdWOVoyVnVaWEpoZEdWU1pXZHBjM1JsY21Wa1ZIbHdaWE5VVXlncGUyeGxkQ0JsUFZ3aVhGeHVYQ0k3Y21WMGRYSnVJSFJvYVhNdWRIbHdaWE5TWldkcGMzUmxjaTVsYm5WdGN5NW1iM0pGWVdOb0tDZ29kQ3h5S1QwK2UyVXJQV0JjWEc1bGVIQnZjblFnWlc1MWJTQWtlM0o5SUh0Z0xFOWlhbVZqZEM1bGJuUnlhV1Z6S0hRcExtWnZja1ZoWTJnb0tDaGJkQ3h5WFNrOVBtVXJQV0JjWEc1Y1hIUWtlM1I5SUQwZ0pIdGNJbTUxYldKbGNsd2lQVDEwZVhCbGIyWWdjajl5T21CY0lpUjdjbjFjSW1COUxHQXBLU3hsS3oxY0lseGNibjFjWEc1Y0luMHBLU3hsZldkbGJtVnlZWFJsVW05MWRHVlVlWEJsVkZNb0tYdHlaWFIxY201Y0lseGNiblI1Y0dVZ1VtOTFkR1VnUFNCN2JtRnRaVG9nYzNSeWFXNW5PeUJ0WlhSb2IyUTZJRTFsZEdodlpEc2djR0YwYURvZ2MzUnlhVzVuT3lCeVpYRjFhWEpsUVhWMGFEODZJR0p2YjJ4bFlXNGdmQ0IxYm1SbFptbHVaV1E3SUdSaGRHRS9PaUJoYm5rZ2ZDQjFibVJsWm1sdVpXUTdJSEpsY3pwaGJubDlPMXhjYmx4Y2Jsd2lmV2RsYm1WeVlYUmxVbTkxZEdWelZIbHdaWE1vWlNsN2JHVjBJSFE5WENKY0lqdHlaWFIxY200Z1QySnFaV04wTG1WdWRISnBaWE1vWlNrdVptOXlSV0ZqYUNnb0tGdGxMSEpkS1QwK2UzUXJQV0JjWEc1bGVIQnZjblFnZEhsd1pTQlVKSHRsTG5SdlZYQndaWEpEWVhObEtDbDlVbTkxZEdWeklEMGdVbTkxZEdVa2UzSXVhbTlwYmloY0lpQjhJRkp2ZFhSbFhDSXBmVHRnZlNrcExIUjlaMlZ1WlhKaGRHVlNiM1YwWlZSVEtHVXNkQ2w3YkdWMElISTlZR1Y0Y0c5eWRDQjBlWEJsSUZSU2IzVjBaU1I3WlgxSmJuQjFkQ0E5SUNSN2RHaHBjeTVuWlhSRVlYUmhWSGx3WlZSVEtIUXVjbVZ4ZFdseVpXUS9MbUp2WkhrcGZUdGNYRzVnTzNKbGRIVnliaUJ5S3oxZ1pYaHdiM0owSUhSNWNHVWdWRkp2ZFhSbEpIdGxmVTkxZEhCMWRDQTlJQ1I3ZEdocGN5NW5aVzVsY21GMFpVOTFkSEIxZEZSNWNHVlVVeWgwTG5KbGMzQnZibk5sS1gwN1hGeHVZQ3h5S3oxZ1hGeHVaWGh3YjNKMElIUjVjR1VnVW05MWRHVWtlMlY5SUQwZ2UxeGNiaUFnSUNCdVlXMWxPaUJjSWlSN1pYMWNJanRjWEc0Z0lDQWdiV1YwYUc5a09pQk5aWFJvYjJRdUpIdDBMbTFsZEdodlpIMDdYRnh1SUNBZ0lIQmhkR2c2SUZ3aUpIdDBMbkJoZEdoOVhDSTdYRnh1SUNBZ0lISmxjWFZwY21WQmRYUm9PaUFrZTNRdVlYVjBhSDA3WEZ4dUlDQWdJQ1I3ZEM1eVpYRjFhWEpsWkQ4dVltOWtlVDlnWkdGMFlUb2dWRkp2ZFhSbEpIdGxmVWx1Y0hWMFlEcGdaR0YwWVQ4NklGUlNiM1YwWlNSN1pYMUpibkIxZEdCOVhGeHVJQ0FnSUhKbGN6b2dWRkp2ZFhSbEpIdGxmVTkxZEhCMWREdGNYRzU5TzF4Y2JtVjRjRzl5ZENCamIyNXpkQ0JuWlhSU1pYRjFaWE4wSkh0bGZTQTlJQ2drZTNRdWNtVnhkV2x5WldRL0xtSnZaSGsvWUdSaGRHRTZJRkp2ZFhSbEpIdGxmVnRjSW1SaGRHRmNJbDFnT2x3aVhDSjlLVG9nVDIxcGREeFNiM1YwWlNSN1pYMHNJRndpY21WelhDSStJRDArSUNoN1hGeHVJQ0FnSUc1aGJXVTZJRndpSkh0bGZWd2lMRnhjYmlBZ0lDQnRaWFJvYjJRNklFMWxkR2h2WkM0a2UzUXViV1YwYUc5a2ZTeGNYRzRnSUNBZ2NHRjBhRG9nWENJa2UzUXVjR0YwYUgxY0lpeGNYRzRnSUNBZ2NtVnhkV2x5WlVGMWRHZzZJQ1I3ZEM1aGRYUm9mU3hjWEc0Z0lDQWdKSHQwTG5KbGNYVnBjbVZrUHk1aWIyUjVQMXdpWkdGMFlTeGNJanBjSWx3aWZWeGNibjBwTzF4Y2JseGNibUFzY24xblpYUkVZWFJoVkhsd1pWUlRLR1VwZTNKbGRIVnliaUJsUDF3aVltOXZiR1ZoYmx3aVBUMTBlWEJsYjJZZ1pUOWNJbUZ1ZVZ3aU9uUm9hWE11WjJWdVpYSmhkR1ZKYm5CMWRGUjVjR1ZVVXlobEtUb25VbTkxZEdWYlhDSmtZWFJoWENKZEozMW5aVzVsY21GMFpVbHVjSFYwVkhsd1pWUlRLR1VwZTJ4bGRDQjBQVndpZTF3aU8zSmxkSFZ5YmlCUFltcGxZM1F1Wlc1MGNtbGxjeWhsS1M1bWIzSkZZV05vS0Nnb1cyVXNjbDBwUFQ1N2FXWW9YQ0pmWDNKbGNYVnBjbVZrWDE5Y0lpRTlQV1VwYzNkcGRHTm9LQ2d3TEdFdVoyVjBVSEp2Y0dWeWRIbFVlWEJsS1NoeUtTbDdZMkZ6WlNCekxsQnliM0JsY25SNVZIbHdaUzVDUVZORk9uUXJQV0JjWEc1Y1hIUmNYSFFrZTJWOUpIdHlMbDlmY21WeGRXbHlaV1JmWHo5Y0lqcGNJanBjSWo4NlhDSjlKSHR5TGw5ZmJuVnNiR0ZpYkdWZlh6OWNJaUJ1ZFd4c0lIeGNJanBjSWx3aWZTQWtlM0l1WDE5MGVYQmxYMTk5TzJBN1luSmxZV3M3WTJGelpTQnpMbEJ5YjNCbGNuUjVWSGx3WlM1QlVsSkJXVHAwS3oxZ1hGeHVYRngwWEZ4MEpIdGxmU1I3SVRFaFBUMXlMbDlmY21WeGRXbHlaV1JmWHo5Y0lqcGNJanBjSWo4NlhDSjlJQ1I3ZEdocGN5NW5aVzVsY21GMFpVbHVjSFYwVkhsd1pWUlRLSEl1WDE5aGNuSmhlVjlmS1gxYlhUdGdPMkp5WldGck8yTmhjMlVnY3k1UWNtOXdaWEowZVZSNWNHVXVUMEpLUlVOVU9uUXJQV0JjWEc1Y1hIUmNYSFFrZTJWOUpIc2hNU0U5UFhJdVgxOXlaWEYxYVhKbFpGOWZQMXdpT2x3aU9sd2lQenBjSW4wa2UzSXVYMTl1ZFd4c1lXSnNaVjlmUDF3aUlHNTFiR3dnZkZ3aU9sd2lYQ0o5SUNSN2RHaHBjeTVuWlc1bGNtRjBaVWx1Y0hWMFZIbHdaVlJUS0hJcGZUdGdmWDBwS1N4MEt6MWNJbHhjYmx4Y2RIMWNJaXgwZldkbGJtVnlZWFJsVDNWMGNIVjBWSGx3WlZSVEtHVXBlMmxtS0NGbEtYSmxkSFZ5Ymx3aVlXNTVYQ0k3YkdWMElIUTlYQ0o3WENJN2NtVjBkWEp1SUU5aWFtVmpkQzVsYm5SeWFXVnpLR1VwTG1admNrVmhZMmdvS0NoYlpTeHlYU2s5UG50cFppaGNJbDlmY21WeGRXbHlaV1JmWDF3aUlUMDlaU2x6ZDJsMFkyZ29LREFzWVM1blpYUlFjbTl3WlhKMGVWUjVjR1VwS0hJcEtYdGpZWE5sSUhNdVVISnZjR1Z5ZEhsVWVYQmxMa0pCVTBVNmRDczlZRnhjYmx4Y2RGeGNkQ1I3Wlgwa2UzSXVYMTl5WlhGMWFYSmxaRjlmUDF3aU9sd2lPbHdpUHpwY0luMGtlM0l1WDE5dWRXeHNZV0pzWlY5ZlAxd2lJRzUxYkd3Z2ZGd2lPbHdpWENKOUlDUjdjaTVmWDNSNWNHVmZYMzA3WUR0aWNtVmhhenRqWVhObElITXVVSEp2Y0dWeWRIbFVlWEJsTGtGU1VrRlpPblFyUFdCY1hHNWNYSFJjWEhRa2UyVjlKSHNoTVNFOVBYSXVYMTl5WlhGMWFYSmxaRjlmUDF3aU9sd2lPbHdpUHpwY0luMGdKSHQwYUdsekxtZGxibVZ5WVhSbFQzVjBjSFYwVkhsd1pWUlRLSEl1WDE5aGNuSmhlVjlmS1gxYlhUdGdPMkp5WldGck8yTmhjMlVnY3k1UWNtOXdaWEowZVZSNWNHVXVUMEpLUlVOVU9uUXJQV0JjWEc1Y1hIUmNYSFFrZTJWOUpIc2hNU0U5UFhJdVgxOXlaWEYxYVhKbFpGOWZQMXdpT2x3aU9sd2lQenBjSW4wa2UzSXVYMTl1ZFd4c1lXSnNaVjlmUDF3aUlHNTFiR3dnZkZ3aU9sd2lYQ0o5SUNSN2RHaHBjeTVuWlc1bGNtRjBaVTkxZEhCMWRGUjVjR1ZVVXloeUtYMDdZSDE5S1Nrc2RDczlYQ0pjWEc1Y1hIUjlYQ0lzZEgxM2NtbDBaVUZ3YVZKbFoybHpkR1Z5Vkc5R2FXeGxLR1VwZTI4dVpHVm1ZWFZzZEM1M2NtbDBaVVpwYkdVb2NISnZZMlZ6Y3k1bGJuWXVRVlJIUlU1ZlZGbFFSVk5mUms5TVJFVlNVRUZVU0N0Y0lpOWhjR2t1WkM1MGMxd2lMR1VwZlgxMExrRndhVWRsYm1WeVlYUnZjajExZlN3eE56azZLR1VzZENrOVBudGNJblZ6WlNCemRISnBZM1JjSWp0UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kQ3hjSWw5ZlpYTk5iMlIxYkdWY0lpeDdkbUZzZFdVNklUQjlLU3gwTGxSNWNHVnpVbVZuYVhOMFpYSTlkbTlwWkNBd08yTnNZWE56SUhKN2MzUmhkR2xqSUdsdWMzUmhibU5sUFc1bGR5QnlPMlZ1ZFcxek8yTnZibk4wY25WamRHOXlLQ2w3ZEdocGN5NWxiblZ0Y3oxdVpYY2dUV0Z3ZlhOMFlYUnBZeUJuWlhSSmJuTjBZVzVqWlNncGUzSmxkSFZ5YmlCeUxtbHVjM1JoYm1ObGZYSmxaMmx6ZEdWeVJXNTFiU2hsTEhRcGUzUm9hWE11Wlc1MWJYTXVjMlYwS0dVc2RDbDlmWFF1Vkhsd1pYTlNaV2RwYzNSbGNqMXlmU3c0TVRJNlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVPMjQ5S0NrOVBpZ29LVDArZTF3aWRYTmxJSE4wY21samRGd2lPM1poY2lCbFBYczBOREk2Wm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBYUm9hWE1tSm5Sb2FYTXVYMTlwYlhCdmNuUkVaV1poZFd4MGZIeG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdaU1ltWlM1ZlgyVnpUVzlrZFd4bFAyVTZlMlJsWm1GMWJIUTZaWDE5TzA5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBMRndpWDE5bGMwMXZaSFZzWlZ3aUxIdDJZV3gxWlRvaE1IMHBMSFF1UVhCcFIyVnVaWEpoZEc5eVBYWnZhV1FnTUR0amIyNXpkQ0J2UFc0b2NpZ3lPVElwS1N4elBYSW9ORGt5S1N4aFBYSW9OalV3S1N4cFBYSW9NVGM1S1R0amJHRnpjeUIxZTNOMFlYUnBZeUJwYm5OMFlXNWpaVDF1WlhjZ2RUdHliM1YwWlhNN2RIbHdaWE5TWldkcGMzUmxjajFwTGxSNWNHVnpVbVZuYVhOMFpYSXVaMlYwU1c1emRHRnVZMlVvS1R0amIyNXpkSEoxWTNSdmNpZ3BlM1JvYVhNdWNtOTFkR1Z6UFc1bGR5Qk5ZWEI5YzNSaGRHbGpJR2RsZEVsdWMzUmhibU5sS0NsN2NtVjBkWEp1SUhVdWFXNXpkR0Z1WTJWOWNtVm5hWE4wWlhKU2IzVjBaU2hsTEhRcGUzUm9hWE11Y205MWRHVnpMbk5sZENobExIUXBmV2RsYm1WeVlYUmxRWEJwVW1WbmFYTjBaWElvS1h0c1pYUWdaVDFjSWk4dklFZGxibVZ5WVhSbFpDQmpiMjUwWlc1MExDQmtiMjRuZENCMGIzVmphRnhjYmx4Y2Jsd2lPMlVyUFhSb2FYTXVaMlZ1WlhKaGRHVlNiM1YwWlZSNWNHVlVVeWdwTEdVclBYUm9hWE11WjJWdVpYSmhkR1ZOWlhSb2IyUkZiblZ0VkZNb0tTeGxLejEwYUdsekxtZGxibVZ5WVhSbFVtVm5hWE4wWlhKbFpGUjVjR1Z6VkZNb0tUdGpiMjV6ZENCMFBYdG5aWFE2VzEwc2NHOXpkRHBiWFgwN1ptOXlLR3hsZEZ0eUxHNWRiMllnZEdocGN5NXliM1YwWlhNdVpXNTBjbWxsY3lncEtXVXJQWFJvYVhNdVoyVnVaWEpoZEdWU2IzVjBaVlJUS0hJc2Jpa3NkRnR1TG0xbGRHaHZaRjB1Y0hWemFDaHlLVHRsS3oxMGFHbHpMbWRsYm1WeVlYUmxVbTkxZEdWelZIbHdaWE1vZENrc2RHaHBjeTUzY21sMFpVRndhVkpsWjJsemRHVnlWRzlHYVd4bEtHVXBmV2RsYm1WeVlYUmxUV1YwYUc5a1JXNTFiVlJUS0NsN2JHVjBJR1U5WENKY1hHNWxlSEJ2Y25RZ1pXNTFiU0JOWlhSb2IyUWdlMXdpTzNKbGRIVnliaUJQWW1wbFkzUXVkbUZzZFdWektITXVUV1YwYUc5a0tTNW1iM0pGWVdOb0tDaDBQVDVsS3oxZ1hGeHVYRngwSkh0MGZTeGdLU2tzWlNzOVhDSmNYRzU5WEZ4dVhGeHVYQ0lzWlgxblpXNWxjbUYwWlZKbFoybHpkR1Z5WldSVWVYQmxjMVJUS0NsN2JHVjBJR1U5WENKY1hHNWNJanR5WlhSMWNtNGdkR2hwY3k1MGVYQmxjMUpsWjJsemRHVnlMbVZ1ZFcxekxtWnZja1ZoWTJnb0tDaDBMSElwUFQ1N1pTczlZRnhjYm1WNGNHOXlkQ0JsYm5WdElDUjdjbjBnZTJBc1QySnFaV04wTG1WdWRISnBaWE1vZENrdVptOXlSV0ZqYUNnb0tGdDBMSEpkS1QwK1pTczlZRnhjYmx4Y2RDUjdkSDBnUFNBa2Uxd2liblZ0WW1WeVhDSTlQWFI1Y0dWdlppQnlQM0k2WUZ3aUpIdHlmVndpWUgwc1lDa3BMR1VyUFZ3aVhGeHVmVnhjYmx3aWZTa3BMR1Y5WjJWdVpYSmhkR1ZTYjNWMFpWUjVjR1ZVVXlncGUzSmxkSFZ5Ymx3aVhGeHVkSGx3WlNCU2IzVjBaU0E5SUh0dVlXMWxPaUJ6ZEhKcGJtYzdJRzFsZEdodlpEb2dUV1YwYUc5a095QndZWFJvT2lCemRISnBibWM3SUhKbGNYVnBjbVZCZFhSb1B6b2dZbTl2YkdWaGJpQjhJSFZ1WkdWbWFXNWxaRHNnWkdGMFlUODZJR0Z1ZVNCOElIVnVaR1ZtYVc1bFpEc2djbVZ6T21GdWVYMDdYRnh1WEZ4dVhDSjlaMlZ1WlhKaGRHVlNiM1YwWlhOVWVYQmxjeWhsS1h0c1pYUWdkRDFjSWx3aU8zSmxkSFZ5YmlCUFltcGxZM1F1Wlc1MGNtbGxjeWhsS1M1bWIzSkZZV05vS0Nnb1cyVXNjbDBwUFQ1N2RDczlZRnhjYm1WNGNHOXlkQ0IwZVhCbElGUWtlMlV1ZEc5VmNIQmxja05oYzJVb0tYMVNiM1YwWlhNZ1BTQlNiM1YwWlNSN2NpNXFiMmx1S0Z3aUlId2dVbTkxZEdWY0lpbDlPMkI5S1Nrc2RIMW5aVzVsY21GMFpWSnZkWFJsVkZNb1pTeDBLWHRzWlhRZ2NqMWdaWGh3YjNKMElIUjVjR1VnVkZKdmRYUmxKSHRsZlVsdWNIVjBJRDBnSkh0MGFHbHpMbWRsZEVSaGRHRlVlWEJsVkZNb2RDNXlaWEYxYVhKbFpEOHVZbTlrZVNsOU8xeGNibUE3Y21WMGRYSnVJSElyUFdCbGVIQnZjblFnZEhsd1pTQlVVbTkxZEdVa2UyVjlUM1YwY0hWMElEMGdKSHQwYUdsekxtZGxibVZ5WVhSbFQzVjBjSFYwVkhsd1pWUlRLSFF1Y21WemNHOXVjMlVwZlR0Y1hHNWdMSElyUFdCY1hHNWxlSEJ2Y25RZ2RIbHdaU0JTYjNWMFpTUjdaWDBnUFNCN1hGeHVJQ0FnSUc1aGJXVTZJRndpSkh0bGZWd2lPMXhjYmlBZ0lDQnRaWFJvYjJRNklFMWxkR2h2WkM0a2UzUXViV1YwYUc5a2ZUdGNYRzRnSUNBZ2NHRjBhRG9nWENJa2UzUXVjR0YwYUgxY0lqdGNYRzRnSUNBZ2NtVnhkV2x5WlVGMWRHZzZJQ1I3ZEM1aGRYUm9mVHRjWEc0Z0lDQWdKSHQwTG5KbGNYVnBjbVZrUHk1aWIyUjVQMkJrWVhSaE9pQlVVbTkxZEdVa2UyVjlTVzV3ZFhSZ09tQmtZWFJoUHpvZ1ZGSnZkWFJsSkh0bGZVbHVjSFYwWUgxY1hHNGdJQ0FnY21Wek9pQlVVbTkxZEdVa2UyVjlUM1YwY0hWME8xeGNibjA3WEZ4dVpYaHdiM0owSUdOdmJuTjBJR2RsZEZKbGNYVmxjM1FrZTJWOUlEMGdLQ1I3ZEM1eVpYRjFhWEpsWkQ4dVltOWtlVDlnWkdGMFlUb2dVbTkxZEdVa2UyVjlXMXdpWkdGMFlWd2lYV0E2WENKY0luMHBPaUJQYldsMFBGSnZkWFJsSkh0bGZTd2dYQ0p5WlhOY0lqNGdQVDRnS0h0Y1hHNGdJQ0FnYm1GdFpUb2dYQ0lrZTJWOVhDSXNYRnh1SUNBZ0lHMWxkR2h2WkRvZ1RXVjBhRzlrTGlSN2RDNXRaWFJvYjJSOUxGeGNiaUFnSUNCd1lYUm9PaUJjSWlSN2RDNXdZWFJvZlZ3aUxGeGNiaUFnSUNCeVpYRjFhWEpsUVhWMGFEb2dKSHQwTG1GMWRHaDlMRnhjYmlBZ0lDQWtlM1F1Y21WeGRXbHlaV1EvTG1KdlpIay9YQ0prWVhSaExGd2lPbHdpWENKOVhGeHVmU2s3WEZ4dVhGeHVZQ3h5ZldkbGRFUmhkR0ZVZVhCbFZGTW9aU2w3Y21WMGRYSnVJR1UvWENKaWIyOXNaV0Z1WENJOVBYUjVjR1Z2WmlCbFAxd2lZVzU1WENJNmRHaHBjeTVuWlc1bGNtRjBaVWx1Y0hWMFZIbHdaVlJUS0dVcE9pZFNiM1YwWlZ0Y0ltUmhkR0ZjSWwwbmZXZGxibVZ5WVhSbFNXNXdkWFJVZVhCbFZGTW9aU2w3YkdWMElIUTlYQ0o3WENJN2NtVjBkWEp1SUU5aWFtVmpkQzVsYm5SeWFXVnpLR1VwTG1admNrVmhZMmdvS0NoYlpTeHlYU2s5UG50cFppaGNJbDlmY21WeGRXbHlaV1JmWDF3aUlUMDlaU2x6ZDJsMFkyZ29LREFzWVM1blpYUlFjbTl3WlhKMGVWUjVjR1VwS0hJcEtYdGpZWE5sSUhNdVVISnZjR1Z5ZEhsVWVYQmxMa0pCVTBVNmRDczlZRnhjYmx4Y2RGeGNkQ1I3Wlgwa2UzSXVYMTl5WlhGMWFYSmxaRjlmUDF3aU9sd2lPbHdpUHpwY0luMGtlM0l1WDE5dWRXeHNZV0pzWlY5ZlAxd2lJRzUxYkd3Z2ZGd2lPbHdpWENKOUlDUjdjaTVmWDNSNWNHVmZYMzA3WUR0aWNtVmhhenRqWVhObElITXVVSEp2Y0dWeWRIbFVlWEJsTGtGU1VrRlpPblFyUFdCY1hHNWNYSFJjWEhRa2UyVjlKSHNoTVNFOVBYSXVYMTl5WlhGMWFYSmxaRjlmUDF3aU9sd2lPbHdpUHpwY0luMGdKSHQwYUdsekxtZGxibVZ5WVhSbFNXNXdkWFJVZVhCbFZGTW9jaTVmWDJGeWNtRjVYMThwZlZ0ZE8yQTdZbkpsWVdzN1kyRnpaU0J6TGxCeWIzQmxjblI1Vkhsd1pTNVBRa3BGUTFRNmRDczlZRnhjYmx4Y2RGeGNkQ1I3Wlgwa2V5RXhJVDA5Y2k1ZlgzSmxjWFZwY21Wa1gxOC9YQ0k2WENJNlhDSS9PbHdpZlNSN2NpNWZYMjUxYkd4aFlteGxYMTgvWENJZ2JuVnNiQ0I4WENJNlhDSmNJbjBnSkh0MGFHbHpMbWRsYm1WeVlYUmxTVzV3ZFhSVWVYQmxWRk1vY2lsOU8yQjlmU2twTEhRclBWd2lYRnh1WEZ4MGZWd2lMSFI5WjJWdVpYSmhkR1ZQZFhSd2RYUlVlWEJsVkZNb1pTbDdhV1lvSVdVcGNtVjBkWEp1WENKaGJubGNJanRzWlhRZ2REMWNJbnRjSWp0eVpYUjFjbTRnVDJKcVpXTjBMbVZ1ZEhKcFpYTW9aU2t1Wm05eVJXRmphQ2dvS0Z0bExISmRLVDArZTJsbUtGd2lYMTl5WlhGMWFYSmxaRjlmWENJaFBUMWxLWE4zYVhSamFDZ29NQ3hoTG1kbGRGQnliM0JsY25SNVZIbHdaU2tvY2lrcGUyTmhjMlVnY3k1UWNtOXdaWEowZVZSNWNHVXVRa0ZUUlRwMEt6MWdYRnh1WEZ4MFhGeDBKSHRsZlNSN2NpNWZYM0psY1hWcGNtVmtYMTgvWENJNlhDSTZYQ0kvT2x3aWZTUjdjaTVmWDI1MWJHeGhZbXhsWDE4L1hDSWdiblZzYkNCOFhDSTZYQ0pjSW4wZ0pIdHlMbDlmZEhsd1pWOWZmVHRnTzJKeVpXRnJPMk5oYzJVZ2N5NVFjbTl3WlhKMGVWUjVjR1V1UVZKU1FWazZkQ3M5WUZ4Y2JseGNkRnhjZENSN1pYMGtleUV4SVQwOWNpNWZYM0psY1hWcGNtVmtYMTgvWENJNlhDSTZYQ0kvT2x3aWZTQWtlM1JvYVhNdVoyVnVaWEpoZEdWUGRYUndkWFJVZVhCbFZGTW9jaTVmWDJGeWNtRjVYMThwZlZ0ZE8yQTdZbkpsWVdzN1kyRnpaU0J6TGxCeWIzQmxjblI1Vkhsd1pTNVBRa3BGUTFRNmRDczlZRnhjYmx4Y2RGeGNkQ1I3Wlgwa2V5RXhJVDA5Y2k1ZlgzSmxjWFZwY21Wa1gxOC9YQ0k2WENJNlhDSS9PbHdpZlNSN2NpNWZYMjUxYkd4aFlteGxYMTgvWENJZ2JuVnNiQ0I4WENJNlhDSmNJbjBnSkh0MGFHbHpMbWRsYm1WeVlYUmxUM1YwY0hWMFZIbHdaVlJUS0hJcGZUdGdmWDBwS1N4MEt6MWNJbHhjYmx4Y2RIMWNJaXgwZlhkeWFYUmxRWEJwVW1WbmFYTjBaWEpVYjBacGJHVW9aU2w3Ynk1a1pXWmhkV3gwTG5keWFYUmxSbWxzWlNod2NtOWpaWE56TG1WdWRpNUJWRWRGVGw5VVdWQkZVMTlHVDB4RVJWSlFRVlJJSzF3aUwyRndhUzVrTG5SelhDSXNaU2w5ZlhRdVFYQnBSMlZ1WlhKaGRHOXlQWFY5TERFM09Ub29aU3gwS1QwK2UwOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwTEZ3aVgxOWxjMDF2WkhWc1pWd2lMSHQyWVd4MVpUb2hNSDBwTEhRdVZIbHdaWE5TWldkcGMzUmxjajEyYjJsa0lEQTdZMnhoYzNNZ2NudHpkR0YwYVdNZ2FXNXpkR0Z1WTJVOWJtVjNJSEk3Wlc1MWJYTTdZMjl1YzNSeWRXTjBiM0lvS1h0MGFHbHpMbVZ1ZFcxelBXNWxkeUJOWVhCOWMzUmhkR2xqSUdkbGRFbHVjM1JoYm1ObEtDbDdjbVYwZFhKdUlISXVhVzV6ZEdGdVkyVjljbVZuYVhOMFpYSkZiblZ0S0dVc2RDbDdkR2hwY3k1bGJuVnRjeTV6WlhRb1pTeDBLWDE5ZEM1VWVYQmxjMUpsWjJsemRHVnlQWEo5TERRNE5Ub29aU3gwS1QwK2UwOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwTEZ3aVgxOWxjMDF2WkhWc1pWd2lMSHQyWVd4MVpUb2hNSDBwTEhRdVNXNTJZV3hwWkZKbGNYVmxjM1JGY25KdmNqMTJiMmxrSURBN1kyeGhjM01nY2lCbGVIUmxibVJ6SUVWeWNtOXllMk52WkdVOU5EQXdPM0psYkdGMFpXUkVZWFJoTzIxbGMzTmhaMlU3WTI5dWMzUnlkV04wYjNJb1pTeDBLWHR6ZFhCbGNpaGxLU3gwYUdsekxtNWhiV1U5WENKSmJuWmhiR2xrVm1Gc2RXVmNJaXgwYUdsekxtWnZjbTFoZEUxbGMzTmhaMlVvWlN4MEtTeDBhR2x6TG5KbGJHRjBaV1JFWVhSaFBYUjlabTl5YldGMFRXVnpjMkZuWlNobExIUXBlM1JvYVhNdWJXVnpjMkZuWlQxZ1FtRmtJRkpsY1hWbGMzUWdPaUFrZTJWOVhGeHVYRngwVUhKdmRtbGtaV1FnUlhKeWIzSWdSR0YwWVNBNlhGeHVYRngwWEZ4MEpIdEtVMDlPTG5OMGNtbHVaMmxtZVNoMExIWnZhV1FnTUN3eUtYMWNYRzVnZlgxMExrbHVkbUZzYVdSU1pYRjFaWE4wUlhKeWIzSTljbjBzTmpVd09paGxMSFFzY2lrOVBudFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEN4Y0lsOWZaWE5OYjJSMWJHVmNJaXg3ZG1Gc2RXVTZJVEI5S1N4MExtZGxkRkJ5YjNCbGNuUjVWSGx3WlQxMExuSnZkWFJsUFhadmFXUWdNRHRqYjI1emRDQnVQWElvTkRreUtTeHZQWElvTkRReUtTeHpQWElvTkRnMUtTeGhQWElvTlRBM0tUdG1kVzVqZEdsdmJpQnBLR1VzZENsN1ptOXlLR3hsZEZ0eUxHOWRiMllnVDJKcVpXTjBMbVZ1ZEhKcFpYTW9aU2twYzNkcGRHTm9LSFVvYnlrcGUyTmhjMlVnYmk1UWNtOXdaWEowZVZSNWNHVXVRa0ZUUlRwcFppZ2hkRnR5WFNZbUlXOHVYMTl5WlhGMWFYSmxaRjlmS1dKeVpXRnJPMmxtS0hSNWNHVnZaaUIwVzNKZElUMDlieTVmWDNSNWNHVmZYeWx5WlhSMWNtNGhNVHRpY21WaGF6dGpZWE5sSUc0dVVISnZjR1Z5ZEhsVWVYQmxMa0ZTVWtGWk9tbG1LQ0YwVzNKZEppWnZMbDlmY21WeGRXbHlaV1JmWHlseVpYUjFjbTRoTVR0cFppaDBXM0pkS1dadmNpaHNaWFFnWlNCdlppQjBXM0pkS1dsbUtDRnBLRzh1WDE5aGNuSmhlVjlmTEdVcEtYSmxkSFZ5YmlFeE8ySnlaV0ZyTzJOaGMyVWdiaTVRY205d1pYSjBlVlI1Y0dVdVQwSktSVU5VT21sbUtDRjBXM0pkSmlZaGJ5NWZYM0psY1hWcGNtVmtYMThwWW5KbFlXczdhV1lvSVhSYmNsMThmQ0ZwS0c4c2RGdHlYU2twY21WMGRYSnVJVEY5Y21WMGRYSnVJVEI5Wm5WdVkzUnBiMjRnZFNobEtYdGpiMjV6ZENCMFBVOWlhbVZqZEM1clpYbHpLR1VwTzNKbGRIVnliaUIwTG14bGJtZDBhRDQ5TVNZbWRDNXNaVzVuZEdnOFBUTW1KblF1YVc1amJIVmtaWE1vWENKZlgzUjVjR1ZmWDF3aUtTWW1kQzVsZG1WeWVTZ29aVDArVzF3aVgxOTBlWEJsWDE5Y0lpeGNJbDlmY21WeGRXbHlaV1JmWDF3aUxGd2lYMTl1ZFd4c1lXSnNaVjlmWENKZExtbHVZMngxWkdWektHVXBLU2svYmk1UWNtOXdaWEowZVZSNWNHVXVRa0ZUUlRwMExteGxibWQwYUQ0OU1TWW1kQzVzWlc1bmRHZzhQVE1tSm5RdWFXNWpiSFZrWlhNb1hDSmZYMkZ5Y21GNVgxOWNJaWttSm5RdVpYWmxjbmtvS0dVOVBsdGNJbDlmWVhKeVlYbGZYMXdpTEZ3aVgxOXlaWEYxYVhKbFpGOWZYQ0lzWENKZlgyNTFiR3hoWW14bFgxOWNJbDB1YVc1amJIVmtaWE1vWlNrcEtUOXVMbEJ5YjNCbGNuUjVWSGx3WlM1QlVsSkJXVHB1TGxCeWIzQmxjblI1Vkhsd1pTNVBRa3BGUTFSOWRDNXliM1YwWlQxbWRXNWpkR2x2YmloN2JtRnRaVHBsTEcxbGRHaHZaRHAwTEhCaGRHZzZjaXhoZFhSb09tNHNjbVZ4ZFdseVpXUTZkU3h5WlhOd2IyNXpaVHB3ZlNsN2NtVjBkWEp1SUdFdVJYaHdjbVZ6YzFCeWIzWnBaR1Z5TG14dloyZGxjaTVzYjJjb1lFTnlaV0YwWlNBa2UzUjlPaVI3Y24wZ2NtOTFkR1VnZDJsMGFDQmhkWFJvT2lSN2JuMWdLU3h2TGtGd2FVZGxibVZ5WVhSdmNpNW5aWFJKYm5OMFlXNWpaU2dwTG5KbFoybHpkR1Z5VW05MWRHVW9aWHg4Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1S0Z3aUwxd2lQVDA5WlZzd1hUOWxMbk4xWW5OMGNtbHVaeWd4TEdVdWJHVnVaM1JvS1RwbEtTNXlaWEJzWVdObEtDOWNYQzg2VzJFdGVrRXRXbDByWEZ3dkx5eGNJaTljSWlrdWMzQnNhWFFvWENJdlhDSXBMbkpsWkhWalpTZ29LR1VzZENrOVBtVXJkRnN3WFM1MGIxVndjR1Z5UTJGelpTZ3BLM1F1YzNWaWMzUnlhVzVuS0RFc2RDNXNaVzVuZEdncEtTeGNJbHdpS1gwb2Npa3NlMjFsZEdodlpEcDBMSEJoZEdnNmNpeGhkWFJvT200c2NtVnhkV2x5WldRNmRTeHlaWE53YjI1elpUcHdmU2tzWm5WdVkzUnBiMjRvWlN4dkxIQXBlMk52Ym5OMElHUTlZWE41Ym1Nb1pTeDBLVDArZTNSeWVYdHBaaWgxS1h0cFppaDFMbUp2WkhrbUpsd2lSMFZVWENJOVBUMWxMbTFsZEdodlpDbDdZMjl1YzNRZ2REMWxMbkYxWlhKNUxsOWtZWFJoTzJsbUtDRjBLWFJvY205M0lHNWxkeUJ6TGtsdWRtRnNhV1JTWlhGMVpYTjBSWEp5YjNJb1hDSk9ieUJrWVhSaElHWnZjaUJpYjJSNUlIZHBkR2dnUjBWVUlISmxjWFZsYzNRdVhDSXNlMkp2WkhrNlpTNXhkV1Z5ZVM1ZlpHRjBZWDBwTzJsbUtGd2ljM1J5YVc1blhDSWhQWFI1Y0dWdlppQjBLWFJvY205M0lHNWxkeUJ6TGtsdWRtRnNhV1JTWlhGMVpYTjBSWEp5YjNJb1hDSkVZWFJoSUhSNWNHVWdhWE1nYVc1MllXeHBaQzVjSWl4N1ltOWtlVHBsTG5GMVpYSjVMbDlrWVhSaGZTazdaUzVpYjJSNVBVcFRUMDR1Y0dGeWMyVW9kQ2w5SVdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvWlM1aWIyUjVKaVlvWENKaWIyOXNaV0Z1WENJOVBYUjVjR1Z2WmlCbExtSnZaSGttSmlGUFltcGxZM1F1YTJWNWN5aDBMbUp2WkhrcExteGxibWQwYUh4OFhDSmliMjlzWldGdVhDSWhQWFI1Y0dWdlppQmxMbUp2WkhrbUppRnBLR1V1WW05a2VTeDBMbUp2WkhrcEtTbDBhSEp2ZHlCdVpYY2djeTVKYm5aaGJHbGtVbVZ4ZFdWemRFVnljbTl5S0Z3aVRtOGdZbTlrZVNCdmNpQmliMlI1SUhSeWRXTjBkWEpsSUdseklHbHVkbUZzYVdRdVhDSXNlMkp2WkhrNmRDNWliMlI1ZlNsOUtIVXNaU2w5WTI5dWMzUWdjajFoZDJGcGRDQndMblpoYkhWbEtHVXNkQ2s3WVM1RmVIQnlaWE56VUhKdmRtbGtaWEl1YzJWdVpFUmhkR0VvZEN4eUtYMWpZWFJqYUNobEtYdGhMa1Y0Y0hKbGMzTlFjbTkyYVdSbGNpNXpaVzVrUlhKeWIzSW9kQ3hsS1gxOUxGODlZUzVGZUhCeVpYTnpVSEp2ZG1sa1pYSXVaMlYwU1c1emRHRnVZMlVvS1R0dVAxOHVaMlYwUVhCd0tDbGJkRjBvY2l4ZkxuZHBkR2hCZFhSb0xHUXBPbUV1Ulhod2NtVnpjMUJ5YjNacFpHVnlMbWRsZEVsdWMzUmhibU5sS0NrdVoyVjBRWEJ3S0NsYmRGMG9jaXhrS1gxOUxIUXVaMlYwVUhKdmNHVnlkSGxVZVhCbFBYVjlMRFV3Tnpvb1pTeDBLVDArZTA5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBMRndpWDE5bGMwMXZaSFZzWlZ3aUxIdDJZV3gxWlRvaE1IMHBMSFF1Ulhod2NtVnpjMUJ5YjNacFpHVnlQWFp2YVdRZ01EdGpiR0Z6Y3lCeWUzTjBZWFJwWXlCcGJuTjBZVzVqWlQxdVpYY2djanR6ZEdGMGFXTWdiRzluWjJWeU8yRndjRHRoZFhSb1pXNTBhV05oZEdVN1kyOXVjM1J5ZFdOMGIzSW9LWHQ5YzNSaGRHbGpJSE5sZEV4dloyZGxjaWhsS1h0eUxteHZaMmRsY2oxbGZYTmxkRUZ3Y0NobEtYdHlMbXh2WjJkbGNpNXNiMmNvWENKRmVIQnlaWE56SUZCeWIzWnBaR1Z5SUVGd2NDQlRaWFFnTGk0dVhDSXBMSFJvYVhNdVlYQndQV1Y5YzJWMFFYVjBhRTFwWkdSc1pYZGhjbVVvWlNsN2NpNXNiMmRuWlhJdWJHOW5LRndpUlhod2NtVnpjeUJRY205MmFXUmxjaUJCZFhSb0lGTmxkQ0F1TGk1Y0lpa3NkR2hwY3k1aGRYUm9aVzUwYVdOaGRHVTlaWDFuWlhRZ2QybDBhRUYxZEdnb0tYdHlaWFIxY200Z2RHaHBjeTVoZFhSb1pXNTBhV05oZEdWOVoyVjBRWEJ3S0NsN2NtVjBkWEp1SUhSb2FYTXVZWEJ3ZlhOMFlYUnBZeUJuWlhSSmJuTjBZVzVqWlNncGUzSmxkSFZ5YmlCeUxtbHVjM1JoYm1ObGZYTjBZWFJwWXlCelpXNWtSR0YwWVNobExIUXBlM0l1Ykc5bloyVnlMbXh2WnloZ0pIdGxMbkpsY1M1d1lYUm9mU0E2SUNSN1NsTlBUaTV6ZEhKcGJtZHBabmtvZENsOVlDa3NaUzV6ZEdGMGRYTW9NakF3S1M1cWMyOXVLSFFwZlhOMFlYUnBZeUJ6Wlc1a1ZHVjRkQ2hsTEhRcGUyVXVjM1JoZEhWektESXdNQ2t1YzJWdVpDaDBLWDF6ZEdGMGFXTWdjMlZ1WkVWeWNtOXlLR1VzZENsN2NpNXNiMmRuWlhJdVpYSnliM0pQWW1wbFkzUW9kQ2tzWlM1emRHRjBkWE1vZEM1amIyUmxLUzVxYzI5dUtIdGxjbkp2Y2pwMGZTbDlmWFF1Ulhod2NtVnpjMUJ5YjNacFpHVnlQWEo5TERRNU1qcG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5ZEdocGN5WW1kR2hwY3k1ZlgyTnlaV0YwWlVKcGJtUnBibWQ4ZkNoUFltcGxZM1F1WTNKbFlYUmxQMloxYm1OMGFXOXVLR1VzZEN4eUxHNHBlM1p2YVdRZ01EMDlQVzRtSmlodVBYSXBPM1poY2lCdlBVOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvZEN4eUtUdHZKaVloS0Z3aVoyVjBYQ0pwYmlCdlB5RjBMbDlmWlhOTmIyUjFiR1U2Ynk1M2NtbDBZV0pzWlh4OGJ5NWpiMjVtYVdkMWNtRmliR1VwZkh3b2J6MTdaVzUxYldWeVlXSnNaVG9oTUN4blpYUTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkRnR5WFgxOUtTeFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlN4dUxHOHBmVHBtZFc1amRHbHZiaWhsTEhRc2NpeHVLWHQyYjJsa0lEQTlQVDF1SmlZb2JqMXlLU3hsVzI1ZFBYUmJjbDE5S1N4dlBYUm9hWE1tSm5Sb2FYTXVYMTlsZUhCdmNuUlRkR0Z5Zkh4bWRXNWpkR2x2YmlobExIUXBlMlp2Y2loMllYSWdjaUJwYmlCbEtWd2laR1ZtWVhWc2RGd2lQVDA5Y254OFQySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tIUXNjaWw4Zkc0b2RDeGxMSElwZlR0UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kQ3hjSWw5ZlpYTk5iMlIxYkdWY0lpeDdkbUZzZFdVNklUQjlLU3h2S0hJb05EUXlLU3gwS1N4dktISW9NVGM1S1N4MEtTeHZLSElvTkRnMUtTeDBLU3h2S0hJb05UQTNLU3gwS1N4dktISW9OalV3S1N4MEtYMHNNamt5T21VOVBudGxMbVY0Y0c5eWRITTljaWd5T1RJcGZYMHNkRDE3ZlR0eVpYUjFjbTRnWm5WdVkzUnBiMjRnY2lodUtYdDJZWElnYnoxMFcyNWRPMmxtS0hadmFXUWdNQ0U5UFc4cGNtVjBkWEp1SUc4dVpYaHdiM0owY3p0MllYSWdjejEwVzI1ZFBYdGxlSEJ2Y25Sek9udDlmVHR5WlhSMWNtNGdaVnR1WFM1allXeHNLSE11Wlhod2IzSjBjeXh6TEhNdVpYaHdiM0owY3l4eUtTeHpMbVY0Y0c5eWRITjlLRFE1TWlsOUtTZ3BMR1V1Wlhod2IzSjBjejF1S0NsOUxEUTROVG9vWlN4MEtUMCtlMXdpZFhObElITjBjbWxqZEZ3aU8wOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwTEZ3aVgxOWxjMDF2WkhWc1pWd2lMSHQyWVd4MVpUb2hNSDBwTEhRdVNXNTJZV3hwWkZKbGNYVmxjM1JGY25KdmNqMTJiMmxrSURBN1kyeGhjM01nY2lCbGVIUmxibVJ6SUVWeWNtOXllMk52WkdVOU5EQXdPM0psYkdGMFpXUkVZWFJoTzIxbGMzTmhaMlU3WTI5dWMzUnlkV04wYjNJb1pTeDBLWHR6ZFhCbGNpaGxLU3gwYUdsekxtNWhiV1U5WENKSmJuWmhiR2xrVm1Gc2RXVmNJaXgwYUdsekxtWnZjbTFoZEUxbGMzTmhaMlVvWlN4MEtTeDBhR2x6TG5KbGJHRjBaV1JFWVhSaFBYUjlabTl5YldGMFRXVnpjMkZuWlNobExIUXBlM1JvYVhNdWJXVnpjMkZuWlQxZ1FtRmtJRkpsY1hWbGMzUWdPaUFrZTJWOVhGeHVYRngwVUhKdmRtbGtaV1FnUlhKeWIzSWdSR0YwWVNBNlhGeHVYRngwWEZ4MEpIdEtVMDlPTG5OMGNtbHVaMmxtZVNoMExIWnZhV1FnTUN3eUtYMWNYRzVnZlgxMExrbHVkbUZzYVdSU1pYRjFaWE4wUlhKeWIzSTljbjBzTmpVd09paGxMSFFzY2lrOVBudGNJblZ6WlNCemRISnBZM1JjSWp0UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kQ3hjSWw5ZlpYTk5iMlIxYkdWY0lpeDdkbUZzZFdVNklUQjlLU3gwTG1kbGRGQnliM0JsY25SNVZIbHdaVDEwTG5KdmRYUmxQWFp2YVdRZ01EdGpiMjV6ZENCdVBYSW9PREV5S1N4dlBYSW9ORFF5S1N4elBYSW9ORGcxS1N4aFBYSW9OVEEzS1R0bWRXNWpkR2x2YmlCcEtHVXNkQ2w3Wm05eUtHeGxkRnR5TEc5ZGIyWWdUMkpxWldOMExtVnVkSEpwWlhNb1pTa3BjM2RwZEdOb0tIVW9ieWtwZTJOaGMyVWdiaTVRY205d1pYSjBlVlI1Y0dVdVFrRlRSVHBwWmlnaGRGdHlYU1ltSVc4dVgxOXlaWEYxYVhKbFpGOWZLV0p5WldGck8ybG1LSFI1Y0dWdlppQjBXM0pkSVQwOWJ5NWZYM1I1Y0dWZlh5bHlaWFIxY200aE1UdGljbVZoYXp0allYTmxJRzR1VUhKdmNHVnlkSGxVZVhCbExrRlNVa0ZaT21sbUtDRjBXM0pkSmladkxsOWZjbVZ4ZFdseVpXUmZYeWx5WlhSMWNtNGhNVHRwWmloMFczSmRLV1p2Y2loc1pYUWdaU0J2WmlCMFczSmRLV2xtS0NGcEtHOHVYMTloY25KaGVWOWZMR1VwS1hKbGRIVnliaUV4TzJKeVpXRnJPMk5oYzJVZ2JpNVFjbTl3WlhKMGVWUjVjR1V1VDBKS1JVTlVPbWxtS0NGMFczSmRKaVloYnk1ZlgzSmxjWFZwY21Wa1gxOHBZbkpsWVdzN2FXWW9JWFJiY2wxOGZDRnBLRzhzZEZ0eVhTa3BjbVYwZFhKdUlURjljbVYwZFhKdUlUQjlablZ1WTNScGIyNGdkU2hsS1h0amIyNXpkQ0IwUFU5aWFtVmpkQzVyWlhsektHVXBPM0psZEhWeWJpQjBMbXhsYm1kMGFENDlNU1ltZEM1c1pXNW5kR2c4UFRNbUpuUXVhVzVqYkhWa1pYTW9YQ0pmWDNSNWNHVmZYMXdpS1NZbWRDNWxkbVZ5ZVNnb1pUMCtXMXdpWDE5MGVYQmxYMTljSWl4Y0lsOWZjbVZ4ZFdseVpXUmZYMXdpTEZ3aVgxOXVkV3hzWVdKc1pWOWZYQ0pkTG1sdVkyeDFaR1Z6S0dVcEtTay9iaTVRY205d1pYSjBlVlI1Y0dVdVFrRlRSVHAwTG14bGJtZDBhRDQ5TVNZbWRDNXNaVzVuZEdnOFBUTW1KblF1YVc1amJIVmtaWE1vWENKZlgyRnljbUY1WDE5Y0lpa21KblF1WlhabGNua29LR1U5UGx0Y0lsOWZZWEp5WVhsZlgxd2lMRndpWDE5eVpYRjFhWEpsWkY5ZlhDSXNYQ0pmWDI1MWJHeGhZbXhsWDE5Y0lsMHVhVzVqYkhWa1pYTW9aU2twS1Q5dUxsQnliM0JsY25SNVZIbHdaUzVCVWxKQldUcHVMbEJ5YjNCbGNuUjVWSGx3WlM1UFFrcEZRMVI5ZEM1eWIzVjBaVDFtZFc1amRHbHZiaWg3Ym1GdFpUcGxMRzFsZEdodlpEcDBMSEJoZEdnNmNpeGhkWFJvT200c2NtVnhkV2x5WldRNmRTeHlaWE53YjI1elpUcHdmU2w3Y21WMGRYSnVJR0V1Ulhod2NtVnpjMUJ5YjNacFpHVnlMbXh2WjJkbGNpNXNiMmNvWUVOeVpXRjBaU0FrZTNSOU9pUjdjbjBnY205MWRHVWdkMmwwYUNCaGRYUm9PaVI3Ym4xZ0tTeHZMa0Z3YVVkbGJtVnlZWFJ2Y2k1blpYUkpibk4wWVc1alpTZ3BMbkpsWjJsemRHVnlVbTkxZEdVb1pYeDhablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVLRndpTDF3aVBUMDlaVnN3WFQ5bExuTjFZbk4wY21sdVp5Z3hMR1V1YkdWdVozUm9LVHBsS1M1eVpYQnNZV05sS0M5Y1hDODZXMkV0ZWtFdFdsMHJYRnd2THl4Y0lpOWNJaWt1YzNCc2FYUW9YQ0l2WENJcExuSmxaSFZqWlNnb0tHVXNkQ2s5UG1VcmRGc3dYUzUwYjFWd2NHVnlRMkZ6WlNncEszUXVjM1ZpYzNSeWFXNW5LREVzZEM1c1pXNW5kR2dwS1N4Y0lsd2lLWDBvY2lrc2UyMWxkR2h2WkRwMExIQmhkR2c2Y2l4aGRYUm9PbTRzY21WeGRXbHlaV1E2ZFN4eVpYTndiMjV6WlRwd2ZTa3NablZ1WTNScGIyNG9aU3h2TEhBcGUyTnZibk4wSUdROVlYTjVibU1vWlN4MEtUMCtlM1J5ZVh0cFppaDFLWHRwWmloMUxtSnZaSGttSmx3aVIwVlVYQ0k5UFQxbExtMWxkR2h2WkNsN1kyOXVjM1FnZEQxbExuRjFaWEo1TGw5a1lYUmhPMmxtS0NGMEtYUm9jbTkzSUc1bGR5QnpMa2x1ZG1Gc2FXUlNaWEYxWlhOMFJYSnliM0lvWENKT2J5QmtZWFJoSUdadmNpQmliMlI1SUhkcGRHZ2dSMFZVSUhKbGNYVmxjM1F1WENJc2UySnZaSGs2WlM1eGRXVnllUzVmWkdGMFlYMHBPMmxtS0Z3aWMzUnlhVzVuWENJaFBYUjVjR1Z2WmlCMEtYUm9jbTkzSUc1bGR5QnpMa2x1ZG1Gc2FXUlNaWEYxWlhOMFJYSnliM0lvWENKRVlYUmhJSFI1Y0dVZ2FYTWdhVzUyWVd4cFpDNWNJaXg3WW05a2VUcGxMbkYxWlhKNUxsOWtZWFJoZlNrN1pTNWliMlI1UFVwVFQwNHVjR0Z5YzJVb2RDbDlJV1oxYm1OMGFXOXVLR1VzZENsN2FXWW9aUzVpYjJSNUppWW9YQ0ppYjI5c1pXRnVYQ0k5UFhSNWNHVnZaaUJsTG1KdlpIa21KaUZQWW1wbFkzUXVhMlY1Y3loMExtSnZaSGtwTG14bGJtZDBhSHg4WENKaWIyOXNaV0Z1WENJaFBYUjVjR1Z2WmlCbExtSnZaSGttSmlGcEtHVXVZbTlrZVN4MExtSnZaSGtwS1NsMGFISnZkeUJ1WlhjZ2N5NUpiblpoYkdsa1VtVnhkV1Z6ZEVWeWNtOXlLRndpVG04Z1ltOWtlU0J2Y2lCaWIyUjVJSFJ5ZFdOMGRYSmxJR2x6SUdsdWRtRnNhV1F1WENJc2UySnZaSGs2ZEM1aWIyUjVmU2w5S0hVc1pTbDlZMjl1YzNRZ2NqMWhkMkZwZENCd0xuWmhiSFZsS0dVc2RDazdZUzVGZUhCeVpYTnpVSEp2ZG1sa1pYSXVjMlZ1WkVSaGRHRW9kQ3h5S1gxallYUmphQ2hsS1h0aExrVjRjSEpsYzNOUWNtOTJhV1JsY2k1elpXNWtSWEp5YjNJb2RDeGxLWDE5TEY4OVlTNUZlSEJ5WlhOelVISnZkbWxrWlhJdVoyVjBTVzV6ZEdGdVkyVW9LVHR1UDE4dVoyVjBRWEJ3S0NsYmRGMG9jaXhmTG5kcGRHaEJkWFJvTEdRcE9tRXVSWGh3Y21WemMxQnliM1pwWkdWeUxtZGxkRWx1YzNSaGJtTmxLQ2t1WjJWMFFYQndLQ2xiZEYwb2NpeGtLWDE5TEhRdVoyVjBVSEp2Y0dWeWRIbFVlWEJsUFhWOUxEVXdOem9vWlN4MEtUMCtlMXdpZFhObElITjBjbWxqZEZ3aU8wOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwTEZ3aVgxOWxjMDF2WkhWc1pWd2lMSHQyWVd4MVpUb2hNSDBwTEhRdVJYaHdjbVZ6YzFCeWIzWnBaR1Z5UFhadmFXUWdNRHRqYkdGemN5QnllM04wWVhScFl5QnBibk4wWVc1alpUMXVaWGNnY2p0emRHRjBhV01nYkc5bloyVnlPMkZ3Y0R0aGRYUm9aVzUwYVdOaGRHVTdZMjl1YzNSeWRXTjBiM0lvS1h0OWMzUmhkR2xqSUhObGRFeHZaMmRsY2lobEtYdHlMbXh2WjJkbGNqMWxmWE5sZEVGd2NDaGxLWHR5TG14dloyZGxjaTVzYjJjb1hDSkZlSEJ5WlhOeklGQnliM1pwWkdWeUlFRndjQ0JUWlhRZ0xpNHVYQ0lwTEhSb2FYTXVZWEJ3UFdWOWMyVjBRWFYwYUUxcFpHUnNaWGRoY21Vb1pTbDdjaTVzYjJkblpYSXViRzluS0Z3aVJYaHdjbVZ6Y3lCUWNtOTJhV1JsY2lCQmRYUm9JRk5sZENBdUxpNWNJaWtzZEdocGN5NWhkWFJvWlc1MGFXTmhkR1U5WlgxblpYUWdkMmwwYUVGMWRHZ29LWHR5WlhSMWNtNGdkR2hwY3k1aGRYUm9aVzUwYVdOaGRHVjlaMlYwUVhCd0tDbDdjbVYwZFhKdUlIUm9hWE11WVhCd2ZYTjBZWFJwWXlCblpYUkpibk4wWVc1alpTZ3BlM0psZEhWeWJpQnlMbWx1YzNSaGJtTmxmWE4wWVhScFl5QnpaVzVrUkdGMFlTaGxMSFFwZTNJdWJHOW5aMlZ5TG14dlp5aGdKSHRsTG5KbGNTNXdZWFJvZlNBNklDUjdTbE5QVGk1emRISnBibWRwWm5rb2RDbDlZQ2tzWlM1emRHRjBkWE1vTWpBd0tTNXFjMjl1S0hRcGZYTjBZWFJwWXlCelpXNWtWR1Y0ZENobExIUXBlMlV1YzNSaGRIVnpLREl3TUNrdWMyVnVaQ2gwS1gxemRHRjBhV01nYzJWdVpFVnljbTl5S0dVc2RDbDdjaTVzYjJkblpYSXVaWEp5YjNKUFltcGxZM1FvZENrc1pTNXpkR0YwZFhNb2RDNWpiMlJsS1M1cWMyOXVLSHRsY25KdmNqcDBmU2w5ZlhRdVJYaHdjbVZ6YzFCeWIzWnBaR1Z5UFhKOUxEUTVNanBtZFc1amRHbHZiaWhsTEhRc2NpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN2RtRnlJRzQ5ZEdocGN5WW1kR2hwY3k1ZlgyTnlaV0YwWlVKcGJtUnBibWQ4ZkNoUFltcGxZM1F1WTNKbFlYUmxQMloxYm1OMGFXOXVLR1VzZEN4eUxHNHBlM1p2YVdRZ01EMDlQVzRtSmlodVBYSXBPM1poY2lCdlBVOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvZEN4eUtUdHZKaVloS0Z3aVoyVjBYQ0pwYmlCdlB5RjBMbDlmWlhOTmIyUjFiR1U2Ynk1M2NtbDBZV0pzWlh4OGJ5NWpiMjVtYVdkMWNtRmliR1VwZkh3b2J6MTdaVzUxYldWeVlXSnNaVG9oTUN4blpYUTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkRnR5WFgxOUtTeFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlN4dUxHOHBmVHBtZFc1amRHbHZiaWhsTEhRc2NpeHVLWHQyYjJsa0lEQTlQVDF1SmlZb2JqMXlLU3hsVzI1ZFBYUmJjbDE5S1N4dlBYUm9hWE1tSm5Sb2FYTXVYMTlsZUhCdmNuUlRkR0Z5Zkh4bWRXNWpkR2x2YmlobExIUXBlMlp2Y2loMllYSWdjaUJwYmlCbEtWd2laR1ZtWVhWc2RGd2lQVDA5Y254OFQySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tIUXNjaWw4Zkc0b2RDeGxMSElwZlR0UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kQ3hjSWw5ZlpYTk5iMlIxYkdWY0lpeDdkbUZzZFdVNklUQjlLU3h2S0hJb05EUXlLU3gwS1N4dktISW9NVGM1S1N4MEtTeHZLSElvTkRnMUtTeDBLU3h2S0hJb05UQTNLU3gwS1N4dktISW9OalV3S1N4MEtTeHZLSElvTmpjMktTeDBLWDBzTmpjMk9paGxMSFFwUFQ1N1hDSjFjMlVnYzNSeWFXTjBYQ0k3ZG1GeUlISXNianRQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RDeGNJbDlmWlhOTmIyUjFiR1ZjSWl4N2RtRnNkV1U2SVRCOUtTeDBMazFsZEdodlpEMTBMbEJ5YjNCbGNuUjVWSGx3WlQxMmIybGtJREFzS0c0OWRDNVFjbTl3WlhKMGVWUjVjR1Y4ZkNoMExsQnliM0JsY25SNVZIbHdaVDE3ZlNrcFcyNHVRa0ZUUlQwd1hUMWNJa0pCVTBWY0lpeHVXMjR1UVZKU1FWazlNVjA5WENKQlVsSkJXVndpTEc1YmJpNVBRa3BGUTFROU1sMDlYQ0pQUWtwRlExUmNJaXdvY2oxMExrMWxkR2h2Wkh4OEtIUXVUV1YwYUc5a1BYdDlLU2t1UjBWVVBWd2laMlYwWENJc2NpNVFUMU5VUFZ3aWNHOXpkRndpZlN3eU9USTZaVDArZTF3aWRYTmxJSE4wY21samRGd2lPMlV1Wlhod2IzSjBjejF5WlhGMWFYSmxLRndpWm5NdmNISnZiV2x6WlhOY0lpbDlmU3gwUFh0OUxHWjFibU4wYVc5dUlISW9iaWw3ZG1GeUlHODlkRnR1WFR0cFppaDJiMmxrSURBaFBUMXZLWEpsZEhWeWJpQnZMbVY0Y0c5eWRITTdkbUZ5SUhNOWRGdHVYVDE3Wlhod2IzSjBjenA3ZlgwN2NtVjBkWEp1SUdWYmJsMHVZMkZzYkNoekxtVjRjRzl5ZEhNc2N5eHpMbVY0Y0c5eWRITXNjaWtzY3k1bGVIQnZjblJ6ZlNnME9USXBPM1poY2lCbExIUjlLU2s3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WTJoaGNuTmxkRDExZEdZdE9EdGlZWE5sTmpRc1pYbEtNbHBZU25waFZ6bDFTV3B2ZWt4RFNtMWhWM2hzU1dwdmFXRlhOV3RhV0dkMVlXNU5hVXhEU25SWldFSjNZVmMxYm1ONVNUWkphMDVDVVZWRmMxVXdSa0pOYTA1Q1RFVldRbEZWTVVSTVJXUkNVWHBHUTB4SGJFTlJWVVpoVVhsNFZGRlZSWGRSZVhod1VXdEdRbGRGVFhOVU1FWkVaVVZPUWt4Rk9VSlJWVGxGVEVaR1FsRldWa1ZNUld4Q1VURkZjMkpWU2tKUlZtaElURVpHUWxGWWJFTlJVM2hRVVZWR1VGRjVlRXBSVlUwMVVUQlJjMVF3UmtKVWVYaFNVVlZHVkV4RlpFSlJWV3hKVEVWa1FsRXdNSE5oVlVwQ1VWWndSRXhHUmtKUk1sSkNURVpHUWxGWFZYTlVWVVpDVTFWUmMxTlZSa1ppYTBwRlRFVldRbEZXYTNOVVZVWkNVMVZOYzFOVlJsTmlSVWx6VVRCR1ZGSXdjM05VVlVaQ1ZGTjRURkZWVGxWTVJUaHpTekI0UkZaclJYTmhNRXBDVVRCRmMxVXdSa1JSVTNoVVVWVk9Ra3hHVGtKU1ZVVnpWRlZHUWxsVlRYTlNWVVpFVWtWTmMxb3dTa0pSVjJSRVRFVnNRbEZWYkVWTVJWWkNVVE5DUkZKVGVGQlJWVTVDVVhsNGFsRlZSWEpSYVhoR1VWVkdRbEY1ZUdwUlZVWnFVWGw0YWxGVlZubFNRM2hxVVZWT1NsUnBlRXhSVlVaTVVubDRVRkZWUmxSTVJXeENVVlZzU2t4RmJFSlNNMUpEVkVONGVGRnJSa1JUVTNoUVVWVkdVRkpEZUVaUlZVWm9WSGw0VkZGVlpEUlJhMDF6V1RCR1Fsa3dUWE5TVlVaQ1dUQk5jMUl3UmtSbFJVcFpURVYwUWxGVmRFaE1SVGxDVVZVNVZFeEZiRUpSVld4SFRFVldRbEZWTVVSTVJXUkNVbnBHUTFKVGVIcFJhMFpFVTFONFNsRlZSa3BSZVhoR1VWVkdURXhJWkVSUlZVNVZVVk40U0ZGVlJrNWFRM2hNVVZWR1RGcFRlSHBSYTBaRVYwVlJjMUl3UmtKVVYxRnpVekJHUWxNeVpFTk1TRlpEVVZWT1dWSnBlRWhSVlVaT1drTjRURkZWUmt4aFZVbHpUa1ZLUWxFeFozTlVWVVpDVkZWTmMxSlZSa0pQUlUxelVUQkdSR0ZGVWtSTVJXeENVVlZ6YzFJd1JrUlVSVTF6VXpCR1FsUlRlRXBSVlZaWFRFVnNRbEZWYzNOVFZVWkNVekZaYzFKVlJrSlVWVTF6VXpCR1FsWldaM05UTUVaQ1V6QmpjMVF3UmtKVU1uUkRURVpXUWxFeWVFUlZRM2hJVVZWR1RscERlRXhSVlVaTVl6QkpjMW93U2tKUlYyUkRWMmw0UmxGVlJrNVJlWGhJVVZWT2NWRXdPSE5TVlVaQ1YxWkJjMUpWUmtKVVZtdHpWVlZHUWxWVlRYTlRNRVpDVXpKUmMxSXdSa1ppYTA1S1RFVmtRbEZWTVd0TVJYUkNVVlYwTlZGcGVIWlJhMFpDWWpCS1VVeEZaRUpSZVRsRFlrVkpjMU13UmtKVGVrSkRURWhXUTFGVlJqRlJiRzl6VWpCR1NHVkZTa1pNU0ZaRFVWVk9TMHhGYkVKUlZXeEhURVZXUWxGVmMzTmxWVXBDVWpGUmMxUXdSa2RSVjBWelZEQkdRbFF3VFhOVU1FWkNWSGw0UmxGVlJrSlJlWGhTVVZWR1VsRjVlRlJSVlVaVVZVTjRTRkZWUmxwV1EzaElVVlZHVGt4Rk9VSlJWVGxVVEVVNVFsRXphRVZXUTNoSVVWVkdUa3hHVmtKUk1FNUNURVZXUWxJd2FFaE1SRkpEVVZWT1MweEZiRUpSVld4SlRFVldRbEZWYzNOVE1FWllWa040VUZGV1drSmFRM2hNVVZWR1RGTlRlR3BSVlVacVRXdEpjMVJWUmtKVVZWRnpWVEJHUWxWVGVFUlJWVVpFVWxONFJsRlZSazVrUlVselV6QkdSR05GVGtwTVJXUkNVVlV3YzJGVlNrSlJWMnhEVTJsNFRsRlZUakpSYld4RFRFVTVRbEZWT1U5TVJrWkNVVlpHV0V4RlpFSlJWVEZIVEVaT1FsRXljRU5NUlZaQ1VWVldTRXhGVmtKUlZYUkVURVYwUWxFd1duZFJhWGhJVVZWR1RreEZPVUpSVlRsMFVXbDRVRkZWVGxCTVIyeERVVlZHVjFGNWVFWlJWVVo0VVd0RmMxSlZSa0pWVTNoS1VWVkdTbEZUZUZaUlZXUjNVa2hDUTB4RlpFSlJWVEJ6VmpCR1JsTkZSWE5TVlVaSVUwVk5jMk13U2tKUk1HOXpWRlZHUWxSNWVERlRWVVpJVTBaVmMySXdTa0pSVnpsRFZVTjRTRkZWVGpSUmFYaEtVVlZHU21GVlNYTlNWVVpDVlZONFNGRlZNV0ZNUlRsQ1ZFVkdVMHhGT1VKUlZUbFBURVpHUWxGV1JrbE1SV1JDVVZkR1dreEdUa0pSVmtWelVsVkdRbEpXUVhOU1ZVWkNWVmhDUTB4Rk1VSlJla1pFV2pCTmMxSXdSa0pWZVhoeVVXdEdRbUV3U21GTVJWWkNVVlU1YUV4RWFFTlJWVVUwVVcxd1JFeEZWa0pSVlRseVVYbDRURkZWVG5WU1UzaHlVV3RHU0ZKRldYTlNWVVpJVTBkSmMxb3dTa0pSVjJSRFYybDRSbEZWUm1wUmVYaElVVlZPYzFGNWVFcFJWVVpLVW5sNFJsRlZSa3hNU0VaRFVWVkdlRkZyYjNOWFZVWkNXbFpaYzFNd1JrSlRNMDVFVEVkT1FsRjZiRVJOTUVselVsVkdRbFJVVWtOTVJsWkNVVlpXUkV4R1pFSk5hMHAzVVdsNFVGRlljRU5SVkVaRFRFVmtRbEZWTUhOalZVcENVVmhHUTFOcGVHaFJWVVp1VVd4WmMxTXdSa0pUTTJ4RVRFaEdRMUZWVFRGUmVteERURVZXUWxGVk1ISlJhWGhzVVZWV1YwNVZTWE5TTUVaQ1ZGTjRlbEZyUmtSVE1HOXpZMVZLUWxFd05VSk1SRXBEVVZWT1VsRjVlRVpSVlVaT1YxTjRNVkZyUmtSYVJtOXpVbFZHUWxSWFpFUk1SRkpEVVZWT1FtRkZUWE5TVlVaQ1ZGZHNSRXhIVGtKU1YzQkRZV3ROYzFKVlJrSlVWRkpEVEVaV1FsRldWa1JNUlhSQ1VURlpjMXBWUmtKYVZHeERURVpPUWxFeVdYTmFNRXBDVVZka1ExRlRkekJSYTBaR1dXdEZjMlF3VGtKU1ZrWkNURVpHUWxFeVNrUk1SVlpDVVZVd01GRnBlRlpSVlVaV1VYbDRURkZWUmxCTVIwNUNVVmROTlZGcGVGcFJWVVp3VVdsNGNsRnJSa1JOVlU1Q1RFTjBRMUZWVGxsUlUzZDVVV3RHUkZWVlRYTlNWVVpDVkZacmMyUlZTa0pSTWxKaFRFVldRbEZWTVc1UmVYY3dVV3RHUkZGWGFFUk1SVlpDVVZVeGNGRjVlR3BSVlU1MVVXMXdSRXhGVmtKUlZUQXdVV2w0VmxGVlJsWlJlWGhNVVZWR1VFeEdSa0pSVmxWeldUQkdSbVZGU1hoUmFYaEdVVlZrU1dRd1NYTlpNRVpDV1RCVmMxSXdSa1JpUlVselZEQkdRbE5WUlhOU1ZVWkVaRlZKYzJFd1NrSlJWbEpDVEVWV1FsRXhTWE5VVlVaRVVWaG9SRXhGZEVKUlZYTXlVWGw0ZGxGclJrSmlNRXBOVEVWa1FsSllhRU5NUjJSRFVWVnNVVk41ZUhaUmEwWkNZakJLYVV4RlpFSlJNMmhEVEVWc1FsRlZiSE5SYVhoR1VWVkdURXhGYkVKTlJVcFZURVU1UW1WclNrSlpVM2hRVVZWR1VGUnBlRkpSVlVaU1ZubDRTRkZWUms1U2FYaFVVVlZHVWt4RlZrSlJWVlp1VVdsNFJsRlZSbFphUTNoT1VWVk9lVkY1ZUVoUlZVWndVV2w0Y0ZGclJrSlpiVTF6VWxWR1JGRlRlRkpSVlVaU1RFVnNRbEZWUmtSTVIyeERVVlZHYmxGdFdYTlRWVVpFWTBWSmMxTXdSa0pUZVhoR1VWVkdRbG93U1hOWlZVWkNXVlZOYzFNd1JrUmFSelZFVEVWa1FsRlZNSE5WTUVaQ1ZUSmtSRXhGYkVKUk1XaHJURVZXUWxGVmRISlJhWGhvVVZWR2JFeEZiRUpSVlRCelZEQkdSRTB3U25OUmFYaEdVVlZHVEdKVlNYTlpWVVpDV2xONFZsRlZSbHBNUlRGQ1VYazVRMkpyU1hOU1ZVWkNVekk1UTB4R2JFSlNWbEZ6VkZWR1JGTnBlRXhSVlVaTVRFVldRbEZWUmt0TVIwWkNVVmRHVEV4Rk1VSlJNbEl5VVhsNFNGRlZSazVNUms1Q1VWWk9ibEY1ZUV4UlZVNVlURVZzUWxGWVVrTmFRM2hHVVZWR1RHRXdTWE5aVlVaQ1pWVkpjMU5WUmtKVVUzaFNVVlZPZDFFeWVFVk1SWFJDVVZWek1sRjVlSFpSYTBaQ1lqQkthVXhGVmtKUlZYUjZVV2w0YmxGclJrUmlSVTF6VkZWR1JGTnBlRXhSVlVaTVRFVldRbEZWUms5TVIwWkNVVmRHVUV4Rk9VSlJNbEkyVVhsNFNGRlZSazVNUms1Q1VWWk9ibEY1ZUV4UlZVNVlURVZzUWxGWVVrTmFRM2hHVVZWR1RHRXdTWE5aVlVaQ1pWVkpjMU5WUmtKVVUzaFFVVlZXZDFFeWVFTk1SVlpDVVZWMGRGRnBlR2hSVlVac1RFWldRbEZXYTNOVVZVWkVZVVZPZFZKRGVFeFJWVVpNVG10TmMySXdTa0pSVnpsRFdXbDRWbEZWYXpOUk1uaERURVZrUWxGVk1ITlZWVVpFVVRCRmMxSlZSa2hUUkVwRFRFaEdRMUZWUm5oUmJGRnpVakJHUkdWclNYTlRWVVpDVXpCRmMxSlZSa0pVVTNoT1VWVkdVRXhGTVVKUk1uaERURVZzUWxGVmJITlJhWGhHVVZWR1RFeEZiRUpOUlVwVlRFVTVRbVZyU2tKWlUzaFFVVlZHVUZScGVGSlJWVVpTVm5sNFNGRlZSazVTYVhoVVVWVkdVa3hGVmtKUlZWWnVVV2w0UmxGVlJsWmFRM2hPVVZWT2VWRjVlRWhSVlVad1VXbDRjRkZyUmtKWmJVMXpVbFZHUkZGVGVGSlJWVVpTVEVWc1FsRlZSa1JNUjJ4RFVWVkdibEZ0V1hOVFZVWkVZMFZKYzFNd1JrSlRlWGhHVVZWR1Fsb3dTWE5aVlVaQ1dWVk5jMU13UmtSYVJ6VkVURVZrUWxGVk1ITlZNRVpDVlRKa1JFeEZiRUpSTVdoclRFVldRbEZWZEhKUmFYaG9VVlZHYkV4RmJFSlJWVEJ6VkRCR1JFMHdTbk5SYVhoR1VWVkdUR0pWU1hOWlZVWkNXbE40VmxGVlJscE1SVEZDVVhrNVEySnJTWE5TVlVaQ1V6STVRMHhHYkVKU1ZsRnpWRlZHUkZOcGVFeFJWVVpNVEVWV1FsRlZSa3RNUjBaQ1VWZEdURXhGTVVKUk1sSXlVWGw0U0ZGVlJrNU1SazVDVVZaT2JsRjVlRXhSVlU1WVRFVnNRbEZZVWtOYVEzaEdVVlZHVEdFd1NYTlpWVVpDWlZWSmMxTlZSa0pVVTNoU1VWVk9kMUV5ZUVWTVJYUkNVVlYwTlZGNWVIaFJhMFpDWTFWS1ZVeEZWa0pSVlhSNlVXbDRibEZyUmtSaWEwMXpWRlZHUkZOcGVFeFJWVVpNVEVWV1FsRlZSazlNUjBaQ1VWZEdVRXhGT1VKUk1sSTJVWGw0U0ZGVlJrNU1SazVDVVZaT2JsRjVlRXhSVlU1WVRFVnNRbEZZVWtOYVEzaEdVVlZHVEdFd1NYTlpWVVpDWlZWSmMxTlZSa0pVVTNoUVVWVldkMUV5ZUVOTVJWWkNVVlYwZEZGcGVHaFJWVVpzVEVaV1FsRldhM05VVlVaRVlVVk9kVkpEZUV4UlZVWk1aVlZOYzJOVlNrSlJXRVpEVmtONFZsRlZhelZSTW5oRFRFVmtRbEZWTUhOVlZVWkVVVEJGYzFKVlJraFRSbXR6WkZWS1FsRllWa05YYVhoSVVWVk5lbEZwZUZaUlZVWklUVVZOYzFaVlJrSldWVTF6VlZWR1FsVlZUWE5UVlVaQ1UxVk5jMlJWU2tKUldHeERURVpzUWxGWFJUTlJlWGhLVVZSc1RHUnJWWE5oTUVsellWVmtSRk5GUlhOVVZVWkNXVlpSYzFKVlJrUlNSV2R6V2pCS1FsRlhiRVJNUld4Q1VWVnNTRXhGVmtKUk0wSkVUVVZKYzFSVlJrWldRM2hxVVZWT1Nrd3dTWE5UTUVaQ1UzbDBRMHhGTVVKUlZrVnpVMVZHUWxOWWFFTk1SV3hDVWpOS1ExUkRlSGhSYTBaRVUxTjRVRkZWUmxCU2VYaEdVVlZHYWxKNWVGUlJWV1EyVVcwNVJVeEhSa0pSVjBaelVrTjRSbEZWUm1wak1FbHpVakJHUkdSclNtOVJlWGhNVVZWR1RFc3dTWE5VVlVaQ1ZGYzFRMHhGYkVKUlZXeEhURVZXUWxGVk1YcFJhWGhLVVZkSk0xRnBlSFJSYVhoMlVXdE9SMUY1ZUVwUlZVWllUbXRKYzFOVlJrSmFNREJ6VTFWR1FsTjVlRTVSVlVaT1RFZEdRbEZYUlhOVFZVWkNVMVZOYzFKVlJrSlNVM2hFVVZWR1JFeEZiRUpSVld0elZUQkdRbFV3UlhOU1ZVWkNVbFZSYzFKVlJrSlNWVlZ6VWpCR1FsSjVlRXBSVlVaS1VYbDRSbEZWUmtaaFJWVnpWRlZHUWxSVlJYTlRNRVpDVXpKc1JreEhiRU5SVlVad1VXbDRWRkZWUmxSVFEzaElVVlZHU0V4Rk9VSlJWVGxDVEVWa1FsRlZaRUpNUlZaQ1VWVldTa3hHWkVKUlZtUkxURVZXUWxGVlZYTlJNRVpDVVRCemMxVlZSa0pWVlhkelUxVkdRbE5YTlVSTVJUbENVVlU1TlZGNWVHeFJWVVpzVlVONFJsRlZSa1pNUjBaQ1VWZEZjMUV3UmtKUmVrNURURVU1UWxGVk1ITlRWVVpDVTNwS1EweEZWa0pSVlZVeFVrTjRjbEZyUmtKWlUzaEdVVlZHVUV4Rk1VSlJWVEYyVWxONFJsRlZSa1pVUTNoR1VWVkdSbEpEZUVaUlZVWkdURVV4UWxGVk1WQk1SVlpDVVZWV1VVeEZWa0pSVlZWelV6QkdRbE14UlhOU1ZVWkNVbFpKYzFKVlJrSlNVM2hNVVZWR1RGVjVlRVpSVlVaR1ZrTjRSbEZWUmtaTVJYUkNVVlZ6YzFSVlJrSlVWbFZ6VWxWR1FsSllXa1pNUjJSRFVWVkdibEZwZUVwUlZVWktaRlZWYzFKVlJrSlNXRkpHVEVVNVFsRlZPVVJNUjA1Q1VWZE9kbEpUZUVaUlZVWkdZbXRWYzFrd1JrSlpNRTF6V1RCR1Fsa3lPVVpNUjA1Q1VWZE5lRkpUZUV4UlZVWk1Vbmw0VUZGVlJsQk1SV3hDVVZWc1NreEZiRUpSVld4TlRFaEdRMUZWUm5oUmFYaFFVVlZHVUdSVlZYTlNWVVpDVWxkd1JreEdUa0pSVms1RVRFZE9RbEZYVG5oU1EzaEdVVlZHUmxKRGVFaFJWVVpJVGpCUmMxTXdSa0pUTUdOelZEQkdRbFF4VFhOVFZVWkNVMWQwUlV4RlZrSlJWVlpGVEVWa1FsRlZaRzlTUTNoNlVXdEdRbU13U1hOVFZVWkNVMWRzUlV4RlZrSlJWVlZ6WkRCT1FsRllaRVJSVTNoSVVWVkdTRTlWVVhOVE1FWkNVekpWYzJNd1NrSlJXRTVEU3pCTmMxSXdSa0pTZW14RlRFVjBRbEZWZEc1UmFYZ3hVV3RHUW1SVlNUUlJlWGhJVVZWR1NFOVZVWE5UTUVaQ1V6SnNRMHhFVWtOUlZVVXdVV2w0VGxGVlJrNU9SVTF6VWxWR1FsSlRlRVJSVlVaRVRWVk5jMU5WUmtKVFUzaElVVlZHU0ZGNWVFeFJWVVpNVEVWc1FsRlZhM05UVlVaQ1UxTjRTbEZWUmtwTmEwMXpVbFZHUWxKVlRYTlRNRVpDVXpKb1JreEZkRUpSVlhSSVRFVTVRbEZWT1hKUmFYaFdVVlZHVm1WVlRYTlNNRVpDVW5wc1JVeEZkRUpSVlhSNlVXbDRibEZyUmtKYU1FbzFVWGw0UmxGVlJrWlJlWGhJVVZWR1NGTkRlRVpSVlVaR1VubDRSbEZWUmtabGEwMXpWVlZHUWxWVlRYTlRNRVpDVXpOV1JFeEZaRUpSVldSRlRFVmtRbEZWWXpWU1EzaE1VVlZHVEdWVlNYTmlNRXBDVVZjNVEySXdUWE5TTUVaQ1VucGtSVXhGZEVKUlZYTjNVV2w0TVZGclJrSmtWVXAyVVhsNFNGRlZSa2hQVlUxelpGVktRbEZZVmtOTVJXeENVVlZyTkZGNWVFWlJWVVpHVEVoc1ExRlZSalZSYVhoUVVWVkdVR0pyVFhOVU1FWkNWREJOYzFRd1JrSlVla0pFVEVWV1FsRlZWalpSZVhoU1VWVkdVbEY1ZUZSUlZVWlVTekJKYzFJd1JrSlNNRTF6VWpCR1FsSjVlRkJSVlVaUVVrTjRVRkZWUmxCUmVYaElVVlZHU0V4R1ZrSlJWbFpDVEVWV1FsRlZWVE5SZVhjd1VXdEdRazVGU1hOVFZVWkNVMVJhUkV4RlZrSlJWVlZ6VXpCR1FsTjVlRkJSVlVaUVQxVlJjMU13UmtKVE1HdHpXVEJHUWxsNlNrTk1SVEZDVVZVeFJVeEdUa0pSVmtWelVUQkdRbEpUZEVOTVJWWkNVVlZXUmt4RmRFSlJWWFJGVEVWa1FsRlZZM05oVlVwQ1VWZHNRMUY1ZUU1UlZVWk9ZMFZOYzFRd1JrSlVNRFJ6VlZWR1FsVllaRVJNUldSQ1VWVmpkbEZwZUZSUlZVWlNURVZXUWxGVlkzSlJhWGhHVVZWR1JsSlRlRXhSVlVaTVVrTjRTRkZWUmtoTVJUbENVVlU1UlV4Rk9VSlJWVGh6WVZWS1FsRlhiRU5TVTNoR1VWVkdSbEZUZUVaUlZVWkdURVZzUWxGVmJFSk1SbFpDVVZaV1JVeEZaRUpSVldOelZqQkdRbFl3UlhOU1ZVWkNVbE01UkV4SVRrTlJWVVo2VVdsNFRsRlZSazVNU0ZaS1VWVkdNVk5XVlhOaU1FcENVVmM1UTJOVlRYTlNNRVpDVW5sNFNsRlZSa3BTUTNoR1VWVkdSa3hGWkVKUlZXTnpWREJHUWxReWVFUk1SVGxDVVZVNVQweEdSa0pSVmtZMVVYbDRTRkZWUmtoaFJVMXpWVEJHUWxWVGVFWlJWVVpJV2pCTmMxSlZSa0pTVlUxelZGVkdRbFJWV1hOU01FWkNVbmw0Y2xGclJrSmhNRXBFVEVWV1FsRlZWWGhSYVhjMFVXdEdRazlGU1hsUmFYaEdVVlZHUmsxVlNYTlRNRVpDVTNsNGNsRnJSa0poTUVvelVXbDRSbEZWUmtaa2EwMXpXakJLUWxGWFpFTmtNRTF6VWxWR1FsSlZVWE5TTUVaQ1VubDRTbEZWUmtwU1UzaEdVVlZHUmt4SVJrTlJWVVo0VVd0UmMxZFZSa0pYVkd4RlRFVjBRbEZWZEhwUmVYaHFVVlZHYW1SVlNYTlNWVVpDVWxoU1EweEdWa0pSVmxaRVRFWmtRbEZXWTNOVU1FWkNWRE5XUTB4RlpFSlJWV056WTFWS1FsRllSa05TUTNob1VWVkdhRTlWVVhOVE1FWkNVek5zUkV4SVJrTlJWVVo0VVcwNVEweEZWa0pSVlZaMVVXbDRiRkZWUm14alZVbHpVakJHUWxKNWVIcFJhMFpDWXpCS1JVeElSa05SVlVaNFVXdEZjMDFyU2tKUlZFcERVa040UmxGVlJrWmtSVTF6WkZWS1FsRllWa05qTUUxelVsVkdRbEpYZUVOTVJGSkRVVlZGTUZGdGRFTk1SVlpDVVZWV2NWRnBlR3BSVlVacVlWVkpjMUpWUmtKU1dGSkRURVpXUWxGV1ZrUk1SWFJDVVZWemMxcFZSa0phV0U1RFRFWk9RbEZXVFhOYU1FcENVVmRrUTFGVGR6QlJhMFpDVGtWS1FreElaRVJSVlVZelVUQkZjMVZWUmtKVlZWRnpVbFZHUWxKWVVrTk1SbFpDVVZaV1JFeEZkRUpSVlhOeldUQkdRbGt6VGtOTVJteENVVlpyYzJFd1NrSlJWM1JEVVZOM2NsRnJSa0pMTUVwQ1RFUktRMUZWUlhsUmExRnpVbFZHUWxKWVVrUk1TRlpEVVZWR01WRnVUa1JNUlZaQ1VWVldjMUZwZHpCUmEwWkNUa1ZLY2xGcGVFWlJWVVpHWVd0SmMxa3dSa0paTW14RFRFVldRbEZWVmpCUmFYaFdVVlZHVmxGNWVFeFJWVVpNVEVaR1FsRldSWE5aTUVaQ1dUTldRMHhGVmtKUlZWWTJVV2w0YWxGVlJtcGtNRWx6VWpCR1FsSjVlRkJSVlVaUVVWTjRSbEZWUmtaTVIzUkRVVlZHY2xGclJYTlNWVVpDVWxONFRsRlZSazVQVlZGelV6QkdRbE42V2tSTVJ6bERVVlZHZGxGdGJFTk1SV1JDVVZWamMxb3dTa0pSVjJSRFlXdEpjMkl3U2tKUlZ6bERZVlZKYzFJd1JrSlNlWGhLVVZWR1NsSkRlRVpSVlVaR1RFVnNRbEZWYTNOVU1FWkNWREo0UkV4Rk9VSlJWVGxQVEVaR1FsRldSalZSZVhoSVVWVkdTR0ZGVFhOVk1FWkNWVk40UmxGVlJraGFNRTF6VWxWR1FsSlZUWE5VVlVaQ1ZGTjRTRkZWUmtoTVIyeERVVlZHY0ZGclVYTlNWVVpDVWxONFVsRlZSbEJNUlZaQ1VWVmtWRXhGVmtKUlZWWTBVV2w0Y0ZGclJrSmhWVXB1VVdsNFNsRlZSa3BNUlhSQ1VWVjBVRXhGVmtKUlZWWXdVV2w0YUZGVlJtaFJlWGhNVVZWR1RGZFRlRWhSVlVaSVRFWk9RbEZXVGtSTVJXeENVVlZzUkV4RlZrSlJWVlpwVEVkR1FsRlhSWE5UVlVaQ1UxTjRVRkZWUmxCWlUzaEdVVlZHUmxkcGVHaFJWVVpvVEVaV1FsRldWWE5VVlVaQ1ZGWnJjMUpWUmtKU1ZtZHpWMVZHUWxkVGVFNVJWVVpPVEVWMFFsRlZkSEpSYVhoR1VWVkdSbVJGU1hOWlZVWkNXVlZ6YzFSVlJrSlVWa1Z6VWpCR1FsSjVlRlJSVlVaVVVYbDRURkZWUmtwTVJXeENVVlYwUkV4RlZrSlJWVlpwVEVkR1FsRlhSWE5UVlVaQ1UxTjRVbEZWUmxKaVJWRnpVekJHUWxONldrUk1SemxEVVZWR2RsRnRkRU5NUlZaQ1VWVldWVXhIWkVOUlZVWnVVV2w0VGxGVlJrNU1SWFJDVVZWMGJsRnBlRVpSVlVaR1pFVkpjMWxWUmtKWlZUaHpWREJHUWxRd01ITlNNRVpDVW5sNFZGRlZSbFJSZVhoTVVWVkdTa3hGYkVKUlZYUkVURVZXUWxGVlZtbE1SMFpDVVZkRmMxTlZSa0pUVTNoUVVWVkdVRmxUZUVaUlZVWkdWMmw0YUZGVlJtaE1SbFpDVVZaVmMxUlZSa0pVVnpWRlRFVjBRbEZWY3pKUmVYaDJVV3RHUW1Jd1NuSlJhWGhXVVZWR1ZsSnBlRWhSVlVaSVRFWkdRbEZXUmtKTVJWWkNVVlZXZDFGcGVIaFJhMFpDWTFWS2VGRnBlRWhSVlVaSVRFVnNRbEZWYkVKTVJWWkNVVlZWYzFSVlJrSlVVM2hPVVZWR1RreEZiRUpSVld4RlRFVldRbEZWVlhOVFZVWkNVMU40VUZGVlJsQmlSVTF6VkRCR1FsUXdOSE5WVlVaQ1ZWaHNSRXhGWkVKUlZXUnZVWGw0VkZGVlJsSk1SVlpDVVZWa2JsRjVlRVpSVlVaR1VYbDRUbEZWUms1TVJXUkNVVlZqYzJGVlNrSlJWMnhEVWtONFJsRlZSa1pNUmtaQ1VWVTRjMUpWUmtKU01VMXpVbFZHUWxKWWFFTk1SMnhEVVZWR2NGRnRaRU5NUld4Q1VWVnJjMU13UmtKVE1EaHpVbFZHUWxKWVVrTk1SMFpDVVZkR1JFeEZkRUpSVlhSYVRFVmtRbEZWWTNOVk1FWkNWVEJOYzFOVlJrSlRWVTF6VWxWR1FsSlhTWE5aVlVaQ1dWTjRTbEZWUmtwTVJUbENVVlU1YUV4RlZrSlJWVlpoVEVkR1FsRlhSWE5XVlVaQ1ZsTjRUbEZWUms1WFUzaEdVVlZHUmxkRGVGcFJWVVphVEVVeFFsRlZNSE5UTUVaQ1V6SjBRMHhGVmtKUlZWWXdVV2w0YUZGVlJtaFRlWGhPVVZWR1RsVlRlRWhSVlVaSVRFWk9RbEZXVGtSTVJYUkNVVlZyYzFOVlJrSlRNRTF6VWxWR1FsSlhTWE5aVlVaQ1dWTjRTbEZWUmtwTVJrWkNVVlpHYzFKRGVFeFJWVVpNWlZWTmMyTlZTa0pSV0VaRFl6QkpjMUpWUmtKU1ZsRnpXakJLUWxGWFpFTk1SVEZDVVZVd2MxTXdSa0pUTW1SRFRFVldRbEZWVmpCUmFYaG9VVlZHYUZSNWVGQlJWVVpRVkZONFNGRlZSa2hNUms1Q1VWWk9SRXhGZEVKUlZXdHpVMVZHUWxNd1RYTlNWVVpDVWxkSmMxbFZSa0paVTNoS1VWVkdTa3hGT1VKUlZUbG9URVZXUWxGVlZtRk1SMFpDVVZkRmMxWlZSa0pXVTNoT1VWVkdUbUpyVVhOVE1FWkNVek5zUkV4SVJrTlJWVVo0VVc1T1EweEdWa0pSVmxaSFRFVmtRbEZWWTNOVlZVWkNWVlZGYzFKVlJrSlNWelZFVEVoV1ExRlZSakZSYlRsRVRFVmtRbEZWWkZCTVJWWkNVVlZXUjB4R1JrSlJWa1paVEVaV1FsRldWa1JNUmtaQ1VWWkdSRXhGYkVKUlZXeEVURWhXUTFGVlJqRlJhWGhhVVZWR1dsSjVlRXBSVlVaS1VrTjRSbEZWUmtaT1ZWRnpXVlZHUWxsWVpFWk1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRmREZUVaUlZVWkdVa040VEZGVlJreGlSVTF6VkRCR1FsUXpiRVJNUjFaQ1VWZFdVVXhGVmtKUlZWVnpXVlZHUWxsVGVFUlJWVVpFVFRCSmMxUXdSa0pVVTNoS1VWVkdURTFyU1hOU1ZVWkNVbGhvUlV4SE1VTlJWVVpxVEVWV1FsRlZPSE5VVlVaQ1ZGUkNSVXhGVmtKUlZWVXpVa040YmxGclJrSmFNRWx6VTFWR1FsTlVXa1ZNUlZaQ1VWVldiMUY1ZUU1UlZVWk9UV3ROYzFrd1JrSlpla1pHVEVWMFFsRlZjM0pSYVhoT1VWVkdUa3hGYkVKUlZXdzBVV2w0U2xGVlJrcFVRM2g0VVd0R1FtTlZTWE5VTUVaQ1ZIcGFSVXhGVmtKUlZWWXlVa040VkZGVlJsUmlNRkZ6V1ZWR1FsbFZWWE5TVlVaQ1VsVlJjMUl3UmtKU2VtUkZURVYwUWxGVmMzSlJhWGhPVVZWR1RtSnJTWE5UVlVaQ1UxZDBSVXhGVmtKUlZWWkZURVZzUWxGVmJFSk1SVlpDVVZWV05GSkRlR3BSVlVacVRVVlJjMUl3UmtKU2VYaEtVVlZHU2t4RlRrSlJWVTVGVEVWV1FsRlZWa1ZNUlhSQ1VWVjBjMUY1ZUZCUlZVWlFaVlZOYzFwVlJrSmFWa0Z6VWxWR1FsSlRlR2hSVlVab1RFVk9RbEZWVFhwUmFYaFFVVlZHVGt4RmJFSlJWWE41VVdsNFJsRlZSa1paZVhnMVVXdEdRbUl3U1hOU1ZVWkNWSGw0VGxGVlJrNVhhWGhXVVZWR1ZsbFRlRTVSVlVaT1VYbDRURkZWUmt4TVJXeENVVlZzUkV4R2JFSlJWbXhFVEVaR1FsRldSazFNUm14Q1VWWnNZVXhGVmtKUlZWWkZURVZrUWxGVlpIUlJhWGhPVVZWR1RtSkZTWE5TTUVaQ1VucHNSVXhGZEVKUlZYUldURVYwUWxGVmMzTmFWVVpDV2xaWmMxTXdSa0pUTW14SFRFZE9RbEZYVG5WUmFYaEdVVlZHUmxKRGVFaFJWVVpJVGpCUmMxTXdSa0pUZW1oR1RFWnNRbEZXYkhGUmFYaEdVVlZHUm1Jd1NYTlpNRVpDV1RJMVEweEZWa0pSVlZaRlRFVmtRbEZWWXpOU1EzaE1VVlZHVEVzd1ZYTlZWVVpDVlZONGNGRnJSa0poVlVweFVXbDRkRkV3UmtKaVZVNTJVV2w0VEZGVlJreFJlWGhXVVZWR1ZtUkZTWE5VTUVaQ1VsTjRSbEZWUmxCTVJrWkNVVlpHUWt4RlZrSlJWVlpxVEVjNVExRlZSblpSYkc5elVqQkdRbEo1ZUVwUlZVWktURVZPUWxGVlRrVk1SVlpDVVZWV1JVeEZWa0pSVlZaR1RFVjBRbEZWZEhkUmVYaFFVVlZHVUdWVlRYTmFWVVpDV2xaQmMxSlZSa0pTVTNob1VWVkdhRXhGVGtKUlZVMTZVV2w0VUZGVlJrNU1SV3hDVVZWemVWRnBlRVpSVlVaR1drTjRibEZyUmtKYU1FcHFURVZXUWxGVlZuTlNRM2hZVVZWR1RreEZWa0pSVlRoelZGVkdRbFJZUmtWTVJWWkNVVlZXUlV4RlZrSlJWVlZ6VXpCR1FsTXdNSE5TVlVaQ1VsVTBjMUpWUmtKU1UzaE1VVlZHVEZSNWVFWlJWVVpHVlVONFJsRlZSa1pNUlhSQ1VWVjBVa3hGVmtKUlZWWlRURVZXUWxGVlZYTlRNRVpDVTNsNFZGRlZSbFJWZVhoR1VWVkdSbFpwZUVaUlZVWkdVa040U0ZGVlJraE1SV3hDVVZWcmMxTlZSa0pUVlZWelVsVkdRbEpWTUhOVE1FWkNVM3BHUkV4Rk9VSlJWVGxQVEVaR1FsRldSalZSZVhoSVVWVkdTRXhGT1VKUlZUbFlURVZXUWxGVlZrdE1SV3hDVVZWcmMxTXdSa0pUTUhkelVsVkdRbEpYYUVOTVIwWkNVVmRHUkV4RmRFSlJWWE56VTFWR1FsTldhM05TVlVaQ1VsVlZjMU13UmtKVE1EQnpVbFZHUWxKWE5VTk1SMFpDVVZkRmMxUlZSa0pVVTNoV1VWVkdWbFo1ZUVaUlZVWkdVbE40VEZGVlJreFVVM2hHVVZWR1JtRnJTWE5WTUVaQ1ZYbDRVRkZWUms1TVJWWkNVVlZqYzFSVlJrSlVVM2hNVVZWR1RGZFRlRVpSVlVaR1lVVkpjMWxWUmtKWlZYTnpWRlZHUWxSVGVFcFJWVVpLVlZONFJsRlZSa1pTVTNoS1VWVkdTbFJUZUVaUlZVWkdZbXRKYzFsVlJrSlpVM2hRVVZWR1RreEZWa0pSVldOelVqQkdRbEl4WTNOU1ZVWkNVbFZWYzFJd1JrSlNlWGhLVVZWR1NreEZiRUpSVld4RlRFVjBRbEZWZEVWTVJWWkNVVlZXUmt4RlpFSlJWV056VTFWR1FsTldUWE5TVlVaQ1VsVm5jMUpWUmtKU1YxbHpWbFZHUWxaV1JYTlNNRVpDVW5sNFVGRlZSazVNUlZaQ1VWVmpjMVJWUmtKVVUzaE1VVlZHVEZKVGVFWlJWVVpHWVVWSmMxbFZSa0paVlRoelZEQkdRbFI1ZUVwUlZVWktWRk40UmxGVlJrWlNVM2hNVVZWR1RGUlRlRVpSVlVaR1ltdEpjMWxWUmtKWlUzaE9VVlZHVGt4RmJFSlJWV3hZVEVWV1FsRlZWa1pNUlhSQ1VWVjBWRXhGVmtKUlZWWkpURVZXUWxGVlZsTk1SVlpDVVZWV1JreEZiRUpSVld0elZEQkdRbFJUZUVaUlZVWklURVU1UWxGVk1ITlNWVVpDVW5sNFZGRlZSbFJXVTNoR1VWVkdSbGREZUVoUlZVWklURVV4UWxGVk1VVk1SVlpDVVZWV2MxRjVlRkJSVlVaUVpWVlJjMU13UmtKVE0xSkRURVZrUWxGVlkzTlVNRVpDVkRCUmMxSlZSa0pTV0dSRFRFWkdRbEZXUlhOU01FWkNVak5vUTB4RlZrSlJWVll6VVdsNFVsRlZSbEpNUldSQ1VWVmtORkZwZUVaUlZVWkdaVlZKYzFVd1JrSlZlWGhvVVZWR2FHVnJTWE5TVlVaQ1VsUkNRMHhGT1VKUlZUazJVV2w0U0ZGVlJraE1SVTVDVVZWTmMxWXdSa0pXZVhoc1VWVkdiRXhIWkVOUlZVWnVVVzVrUTB4R1RrSlJWazQwVVdsNFRGRlZSa3hTVTNoR1VWVkdSbUZGU1hOWlZVWkNXVlZOYzFNd1JrSlRNV3R6VWxWR1FsSllaRU5NUmtaQ1VWWkZjMUl3UmtKU00yaERURVZXUWxGVlZqTlJhWGhTVVZWR1VreEZaRUpSVldRMFVXbDRSbEZWUmtabFZVbHpWVEJHUWxWNWVHcFJWVVpxWld0SmMxSlZSa0pTVkVKRFRFVTVRbEZWT1RaUmFYaElVVlZHU0V4RlRrSlJWVTF6VjFWR1FsZFRlR3hSVlVac1RFZGtRMUZWUm01UmJtUkRURVpPUWxGV1RqUlJhWGhNVVZWR1RGSlRlRVpSVlVaR1lVVkpjMWxWUmtKWlZYTnpWRlZHUWxSV1kzTlNWVVpDVWxkb1EweEhSa0pSVjBaUVRFVTVRbEZWT1U1TVJWWkNVVlZXYzFKRGVFNVJWVVpPVEVaV1FsRldWa1ZNUlhSQ1VWVjBkbEpEZUVaUlZVWkdaR3ROYzFRd1JrSlVNMDVFVEVWV1FsRlZWbk5SYVhoTVVWVkdUR0l3U1hOU1ZVWkNVbGMxUTB4RmRFSlJWWFIyVVdsNFJsRlZSa1psYTBselZUQkdRbFV5ZEVSTVJWWkNVVlZWZGxGcGVGUlJWVVpVVDBWTmMxTlZSa0pUVTNoUVVWVkdVR0ZyU1hOU1ZVWkNVbGQwUTB4SFpFTlJWVVp1VVd0TmMxUXdSa0pVTUUxelUxVkdRbE5UZUZaUlZVWldUMVZKYzFNd1JrSlRNRlZ6WTFWS1FsRllSa05SZVhoTVVWVkdURk41ZUVaUlZVWkdZMFZWYzFsVlJrSlpWWE56V1RCR1Fsa3dZM05aTUVaQ1dUTkdSVXhGWkVKUlZXTnpWVEJHUWxVd1JYTlNNRVpDVW5sNFVGRlZSbEJNUlRGQ1VWVXhRa3hGVmtKUlZWVnpVakJHUWxJd1JYTlNWVVpDVWxSb1EweEdWa0pSVmxWelVsVkdRbEpVYkVOTVJWWkNVVlZXTVZGcGVGSlJWVVpTWkd0SmMxSXdSa0pTZVhSRFRFWkdRbEZXUlhOaFZVcENVVmRzUTB4RmRFSlJWWFJFVEVVeFFsRlZNSE5UTUVaQ1V6Qk5jMVZWUmtKVWVYaEVVVlZHUm1GclRYTlNWVVpDVWxWUmMxTlZSa0pUVlUxelVsVkdRbEpWVVhOU1ZVWkNVbE40U0ZGVlJraGxhMGx6V1RCR1Fsa3piRU5NUlZaQ1VWVlZjbEZwZUZaUlZVWldURVZXUWxGVlZYWlJhWGhHVVZWR1JtUXdTWE5WTUVaQ1ZYbDRTbEZWUlhaVGFYaEVVVlZHZGxNelVrTk1SV1JDVVZWamMxRXdSa0pSTTJoRVRFVTVRbEZWT1hwUmVYaEdVVlZHUm1KRlNYTlRNRVpDVXpJNVEweEZWa0pSVlZaMVVXbDRURkZWUmt4aU1FbHpVbFZHUWxKWWNFTk1SazVDVVZaT2NsRjVlRVpSVlVaR1REQkpjMVV3UmtKVmVtaEVURVZzUWxGVmEzTlZNRVpDVlhwR1EweEZWa0pSVlZaUVRFVldRbEZWVm5SUmFYaElVVlZHU0V4Rk1VSlJWVEZTVEVWV1FsRlZWa1JNUlRGQ1VWVXhkVkY1ZUVaUlZVWkdVa040VEZGVlJreE1SV3hDVVZWcmMxSXdSa0pTTVd0elVsVkdRbEpUZUVSUlZVWkVURVZrUWxGVlpFSk1SVlpDVVZWV2NWRjVlRTVSVlVaT1RFWkdRbEZXUm5wUmFYaEdVVlZHUm1SclRYTlVNRVpDVkhsNFJGRlZSa1JNUlRGQ1VWVXhlbEY1ZUVaUlZVWkdVWGw0UmxGVlJrWmlNRTF6VkZWR1FsUlZUWE5VVlVaQ1ZGTjRTbEZWUmtwa1JVMXpVbFZHUWxKVGVFNVJWVVpPVEVWc1FsRlZiRlJNUlZaQ1VWVldURXhIT1VOUlZVWjJVV2w0ZUZFd1JrSmpWVTF6VVRCR1FsRXlOVVJNUlhSQ1VWVjBlbEZwZUVaUlZVWkdZakJOYzFSVlJrSlVWVTF6VlZWR1FsVlRlRWhSVlVaSVRFZHNRMUZWUm5CUmJsSkVURVZXUWxGVlZYTlVWVVpDVkZONFNsRlZSa3BWZVhoR1VWVkdSbE41ZUhaUmEwWkNZakJKYzJRd1NrSlJXR1JEVEVWT1FsRlZUblZSZVhoTVVWVkdUR013U1hOU1ZVWkNVbGM1UkV4Rk1VSlJWVEZFVEVaR1FsRldSbmxSZVhoR1VWVkdSbVJGU1hOVE1FWkNVM3BDUkV4RmRFSlJWWFJ5VVdsNFRsRlZSazVrYTAxelUxVkdRbE5UZUZSUlZVWlVVWGw0UmxGVlJrWlNRM2hJVVZWR1NFeEZaRUpSVldSRVRFVldRbEZWVmpCUmFYaFFVVlZHVUV4SGRFTlJWVVp5VVc1T1EweEZWa0pSVlZZd1VXbDRVRkZWUmxCWmFYaFFVVlZHVUdWVlVYTlRNRVpDVXpOYVEweEZWa0pSVlZaNVVXbDRUbEZWUms1T2EwMXpWVlZHUWxWVGVISlJhMFpDWVRCS01sRnBlRVpSVlVaR1pFVkpjMVF3UmtKVU1tUkVURVZXUWxGVlZsZE1SVlpDVVZWV01GRnBlRXhSVlVaTVkxVkpjMUpWUmtKU1dFcERURVU1UWxGVk9ITlVWVVpDVkZONFNsRlZSa3BQUlVselVsVkdRbEpWYzNOaU1FcENVVmM1UTB4SVZrUlJWVVl4VVhsNFJGRlZSa1JpYTAxelV6QkdRbE16UmtOTVJWWkNVVlZXZVZGcGVGQlJWVVV6VkZONFJGRlZSbmhVYld4RVRFVldRbEZWVmxsTVJXUkNVVlZqYzFSVlJrSlVWVTF6VlZWR1FsVlliRU5NUlZaQ1VWVldNRkpEZUU1UlZVWk9Ua1ZKYzFKVlJrSlNWVkZ6VWpCR1FsSXhWWE5TVlVaQ1VsZDBRMHhIWkVOUlZVWnVVV3hyYzFVd1JrSlZNMmhFVEVWV1FsRlZWa1pNUldSQ1VWVmpjMVJWUmtKVVZWRnpVakJHUWxJeFRYTlNWVVpDVWxkMFEweEhaRU5SVlVadVVXMUZjMVpWUmtKV1dIQkVURVZXUWxGVlZrUk1SWFJDVVZWME5WRjVlRVpSVlVaR1lVVk5jMUpWUmtKU1YzUkRURWRrUTFGVlJtNVJiVFZIVEVkT1FsRlhUWGRTUTNoR1VWVkdSbVJWVFhOU1ZVWkNVbFZOYzFVd1JrSlZlazVFVEVWa1FsRlZaRVpNUlZaQ1VWVldNMUY1ZUVaUlZVWkdVbE40VkZGVlJsUldRM2hJVVZWR1NHVnJTWE5TVlVaQ1VsZDBRMHhIWkVOUlZVWnVVVzAxUjB4SFRrSlJWMDV5VW5sNFZGRlZSbFJOTUUxelVqQkdRbEl3VlhOU1ZVWkNVbGRzUkV4RmRFSlJWWFIxVVhsNFJsRlZSa1phUTNodVVXdEdRbG93U1hkUmFYaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRXhaM05TVlVaQ1VsVlJjMU13UmtKVE1uaEVURVU1UWxGVk9UVlJlWGhzVVZWR2JGVkRlRVpSVlVaR1RFZEdRbEZYUlhOUk1FWkNVWHBPUTB4Rk9VSlJWVEJ6VTFWR1FsTjZTa05NUlZaQ1VWVlZNRkZwZUhoUmEwWkNXakJKYzFKVlJrSlVlWGhPVVZWR1RrMVZTWE5TVlVaQ1VsUmtSVXhIWkVOUlZVWnVVV2w0U2xGVlJrcE9hMUZ6VWxWR1FsSlVaRVZNUjA1Q1VWZE9NMUo1ZUVwUlZVWktVWGw0YUZGVlJtaGhhMDF6V2xWR1FscFlhRVpNUjJ4RFVWVkdjRkZxVWtWTVJXUkNVVlZrUkV4RlZrSlJWVlY1VVdsNFVGRlZSbEJPVlVselVsVkdRbEpVYUVSTVJUbENVVlU0TlZGNWVFaFJWVVpJVVhsNFJsRlZSa1pOYTBselZEQkdRbFF3VFhOVFZVWkNVMU40YmxFd1JrSmFNRTE2VW1sNFRGRlZSa3hOUldOelUxVkdRbE5VVmtSTVJWWkNVVlZWY2xGNWVISlJhMFpDWVRCSmRsRjVlRWhSVlVaSVVYbDRSbEZWUmtaTmEwbHpWREJHUWxRd1RYTlRWVVpDVTFONGNGRXdSa0poVlUxNlVtbDRURkZWUmt4TmEyTnpXVlZHUWxsVVpFUk1SVlpDVVZVd2VWRjVlR3hSVlVaWVRFVTVRbEZWT1RaU2VYaE1VVlZHVEUxclkzTlpWVVpDV1ZWbmMxVXdSa0pWZVhoUVVWVkdVR1ZGWTNOVE1FWkNVM3BDU0V4RmJFSlJWV3cwVW5sNGVGRnJSa0pqVlVselZEQkdRbFI2V2tWTVJWWkNVVlZXTWxKRGVGUlJWVVpVVkdsNGJsRnJSa0phTUVrd1VrTjRSbEZWUmtaU1EzaElVVlZHU0ZKVGVFWlJWVVpHVFd0SmMxUXdSa0pVTUUxelUxVkdRbE5UZUVoUlZVWklUakJKYzFKVlJrSlNWMlJGVEVWc1FsRlZiSFZTVTNoV1VWVkdWbVJWVFhOVE1FWkNVekJOYzFaVlJrSldXRkpEVEVVeFFsRlZNVVJNUlZaQ1VWVldjRkpEZUZCUlZVWlFURVYwUWxGVmRFUk1SWFJDVVZWMGRWSkRlRWhSVlVaSVRUQlJjMW93U2tKUlYyUkRUa1ZSYzFKVlJrSlNWVkZ6VWpCR1FsSXdUWE5TVlVaQ1VsZHNSVXhGT1VKUlZUaHpVekJHUWxNd1ZYTlRNRVpDVXpOQ1JVeEZaRUpSVldONlVrTjRjRkZyUmtKaFZVa3dVa040UmxGVlJrWlNRM2hJVVZWR1NGSlRlRVpSVlVaR1RXdEpjMVF3UmtKVU0yUkRURVpzUWxGV2JIbFNRM2hJVVZWR1NGRjVlRVpSVlVaR1lWVlJjMVF3UmtKVU1uaEZURVZXUWxGVlZtNVJhWGhPVVZWR1RtSlZUWE5UTUVaQ1UzbDRSRkZWUmtSU2VYaE9VVlZHVG1SRlVYTlRNRVpDVXpCRmMxSlZSa0pTVkZKRFRFZGtRMUZWUm01UmFrWkRURVZrUWxGVlkzTlRWVVpDVTFONFZGRlZSbFJTUTNoR1VWVkdSbEpEZUVaUlZVWkdVbE40U0ZGVlJraE1SV3hDVVZWc1JFeEZWa0pSVlZadlVsTjRUbEZWUms1UlUzaE1VVlZHVEdJd1ozTmhNRXBDVVZkMFEyVnJXWE5VTUVaQ1ZIcENSMHhGT1VKUlZUaHpWVEJHUWxVeldrVk1SVlpDVVZWV1JVeEZWa0pSVlZaR1RFVldRbEZWVmtSTVJrWkNVVlZqYzFOVlJrSlZNRVZ6VTFWR1FsTlZSWE5TVlVaQ1VsVlJjMUl3UmtKU2VYaEtVVlZHU2xSVGVFWlJWVVpHVFZWTmMxUXdSa0pVZWtwSFRFaHNRMUZWUmpWUmJuQkZURVZXUWxGVlZrWk1SV1JDVVZWa1RreEZkRUpSVlhOelZWVkdRbFZWUlhOU01FWkNVakZKYzFKVlJrSlNWWE56VmpCR1FsWXdZM05TVlVaQ1VsZDBSVXhHVmtKUlZsWnpVa040UmxGVlJrWmlWVkZ6V2pCS1FsRlhaRU5pYTFGelVsVkdRbEpUZUVSUlZVWkVZakJSYzFkVlJrSldlWGhHVVZWR1NHUkZZM05UVlVaQ1UxTjRXRkZWUmxoTVJUbENVVlU0ZDFGNWVFWlJWVVpHVWxONFRsRlZSazVqUlUxelZEQkdRbFF6YkVSTVIxWkNVVmRXVDB4RlZrSlJWVlpHVEVWV1FsRlZWa3hNUld4Q1VWVnJjMVV3UmtKVk1VRnpVbFZHUWxKVlVYTlNWVVpDVWxWVmMxSlZSa0pTVlUxelZWVkdRbEo1ZUVwUlZVWlVVVk40U2xGVlJrcFJVM2hHVVZWR1JsSkRlRWhSVlVaSVVrTjRSbEZWUmtaU1UzaElVVlZHU0ZORGVFWlJWVVpHVWxONFRGRlZSa3hVVTNoR1VWVkdSbU5yVlhOVVZVWkNWRlZGYzFNd1JrSlRla0pKVEVkT1FsRlhUWE5WTUVaQ1ZYcFdSVXhGVmtKUlZWWkZURVZrUWxGVlkzTlRWVVpDVTFONFNsRlZSa3BTVTNoTVVWVkdURkpEZUVaUlZVWkdURVpzUWxGV2JFUk1SV1JDVVZWa2QxRjVlRkJSVlVaUVdqQmpjMVpWUmtKV1ZVMXpXbFZHUWxwVlRYTlRNRVpDVXpKb1JreEZWa0pSVlZaR1RFVnNRbEZWYkVSTVJWWkNVVlZXU1V4RlZrSlJWVlpFVEVWV1FsRlZWa1JNUld4Q1VWVnNkMUY1ZUZCUlZVWlFaVlZOYzFwVlJrSmFWa0Z6VWxWR1FsSlRlR2hSVlVab1RFVk9RbEZWVFhwUmFYaFFVVlZHVGt4RmJFSlJWWFIwVVhsNFJsRlZSa1pVYVhoR1VWVkdSa3hGZEVKUlZYUkhURVZrUWxGVlpGSk1SVlpDVVZWV1QweEZWa0pSVlZWelV6QkdRbE13V1hOU01FWkNVakZGYzFKVlJrSlNWVFJ6VWxWR1FsSlRlRXhSVlVaTVVtbDRTRkZWUmtoVlUzaEdVVlZHUmxScGVFWlJWVVpHVEVWMFFsRlZkRWRNUldSQ1VWVmtVa3hGVmtKUlZWWlBURVZXUWxGVlZYTlRNRVpDVXpCWmMxTlZSa0pUVTNoS1VWVkdTbEY1ZUVwUlZVWktVVk40UmxGVlJrWmlSVlZ6VlZWR1FsVlRlRVpSVlVaU1RFVTVRbEZYYkVOaFZWVnpVbFZHUWxKVGVFaFJWVVpJVEVVNVFsRlZPSE5WTUVaQ1ZUQlZjMUpWUmtKU1ZVMXpVakJHUWxKNWVFcFJWVVpLVTNsNFJsRlZSa1pWYVhoR1VWVkdSbEo1ZUVoUlZVWklURVpHUWxGVlkzTlRWVVpDVlRCemMxSlZSa0pTVTNoUVVWVkdVRkZUZUVaUlZVWkdaV3RWYzFWVlJrSlZVM2hLVVZWR1NrMUZWWE5TVlVaQ1VsWlJjMUpWUmtKU1ZXTnpVakJHUWxKNWVFUlJWVVpFWTBWVmMxVlZSa0pWVTNoS1VWVkdTa3hGT1VKUlZUbHlVbE40UmxGVlJrWlNVM2hJVVZWR1NFNXJVWE5UTUVaQ1V6TmFSVXhGVmtKUlZWVjRVbE40VWxGVlJsSk5SVlZ6VWxWR1FsSlZSWE5TVlVaQ1VsUkdSa3hHUmtKUlZrWjBVbE40U0ZGVlJraFVlWGhHVVZWR1JrMVZWWE5WVlVaQ1RsVm5jMUV3UmtKalZXdHpWRlZHUWs1VVRsQk1SV1JDVVZkb1MxRjVlRVpSVlVaUVVrTjRVbEZWUmxKaFZWVnpVM2w0TVZJd1RrWmhSVmx6VkZWR1FsbFhUWE5XVlVaQ1RrVktSRXhGTVVKUmVsWkRVWGw0VEZGVlJsQk1SV3hDVVRGQ1JFeEdiRUpSTVZKRVRFWkdRbEpWUmsxTVJteENVVlpzVEV4RlZrSlJWM1JEVWtONFNGRlZUWGhSYTFWelZGVkdRbFJWVVhOU01FWkVWR2s1Umt4RmRFSlJWWFJXVEVWMFFsRlZPSE5hVlVaRVYyeFpjMU13UmtKVE1teEhURWRPUWxGWFRrZE1SVlpDVVZaT1JVeEZaRUpSZWxaRFQxVlZjMU13UmtKVGVtaEdURVpzUWxGWFRrSk1SVlpDVWpKYVNFeEhUa0pSVjA1SFRFVldRbEZYZEVOU1EzaElVVlZPZDFGNmJFWk1SWFJDVVZWemNsSlRlRkpSVlVaV1RFZHNRMUZWUm5CUmEwVnpZbFZPUWxGWWJFUlNlWGhNVVZWR1RGRjVlRlpSVlUxNFVsVjNjMVF3UmtSUlYyUkZURVZXUWxFd1JYTlZWVVp2VVd4dmMyVlZTWE5PYTJSRVVrVkZjMXBWUmxCUlUzaFVVVlZPUWt4R1RrSlJNRVZ6VlRCR2VsSlZSWE5WTUVaQ1ZUQk5jMUpWUmtKYVZVMXpVbFZHUWsxclNrUk1SV1JDVVhrNVJFeEZiRUpSVlhOelUxVkdRbE15TlVkTVJWWkNVVlpXYTB4RmRFSlJWazVOVEVVNVFsRlZPVTlNUmtaQ1VWWkZlVko1ZUVoUlZVNDBVWGw0VUZGVlJsSmhhMWx6VWxWR1Fsb3dTbTFNUld4Q1VUTkNRMHhGZEVKUlZYTnpVbFZHUWxGWFpFTk1SMFpDVVZkR1JFeEZkRUpSTWxGelUxVkdRbE15WkVkTVJWWkNVVlU1ZFZKcGVFeFJWVVpxV2tONFJsRlZSa3hoTUVseldWVkdRbGw1ZUU1UlZVMHpVWGw0VmxGVlJsaExNRlZ6VWxWR1FsUXlOVWRNUlhSQ1VWZE9hMHhGVmtKUlZYUjJVV2w0VkZGVlJsWk1SVGxDVVZVNGMxSlZSa1JrUlZGelZGVkdSRk5wZUV4UlZVWk1URVZXUWxGVlJrdE1SMFpDVVZkR1RFeEZNVUpSTWxGelUxVkdRbE42VWtaTVJWWkNVVlU1ZFZKcGVFcFJWVVpvV2tONFJsRlZSa3hoTUVseldWVkdRbGw1ZUZCUlZVWlFURVZXUWxFeU5VVk1SV1JDVVZWcmNsSlRlRVpSVlVaUVltdFpjMUl3UmtSVlEzaEtVVlZHVEV4RmJFSlJWV3gyVW1sNFRGRlZSbEpTUTNoR1VWVkdVR0pyV1hOU01FWkdZMFZKYzFOVlJrVlhWMnhIVEVWV1FsRlhWWFpTYVhoR1VWVkdUR013U1hOV1ZVWkNWbnBTUmt4RlpFSlJNbkJFVEVVNVFsRlZPSE5TVlVaR1pXdEpjMVJWUmtSVGFYaE1VVlZHVEV4RlZrSlJWVVp6VW1sNGFGRlZSbWhVZVhoUVVWVk9hMHhGYkVKUlZYTjNVbE40UmxGVlJsQmlhMWx6VXpCR1Fsa3lVWE5TVlVaQ1V6SjBRMHhIUmtKUlYwMXpWRlZHUkU0d1RYTlRWVVpFVTNsMFJreEZWa0pSVlRsMVVtbDRURkZWVGxGaFZWbHpVbFZHUWxwVE9VZE1SVlpDVVZVeGNGSjVlRVpSVlVaUVltdFpjMU5WUmtaT01FbHpWREJHUWxSNWVFWlJWV3d5VVdsNFVGRlZSbEJNUlZaQ1VqRm5jMVV3UmtKYU1FcEVURVZXUWxGWFpFTmFhWGhJVVZWTk1WRnBlRTVSVlVaT1lqQlJjMUpWUmtKVU0zQkZURVU1UWxGVk9UVlNRM2hNVVZWR1RHTkZVWE5TTUVaR1pXdEpjMVF3UmtSVFZ6bEZURVZXUWxGVmRFUk1Sa1pDVVZaVmMxSXdSa1JhYTFGelVsVkdRbE13VFhOVlZVWkNWbE40U0ZGVlRtMVNRM2hHVVZWR1RGSlRlRlJSVlVaVVRFZEdRbEV5VWtkTVJWWkNVVlYwU0V4Rk9VSlJWVGt3VWtONFNGRlZUbE5NUlU1Q1VWVk5jMVl3UmtKWFUzaHNVVlZHYmxGcGVHNVJhMFpDV2pCS2VGSkRlRlJSVlVaVVkydFJjMU13UmtoaWExRnpVbFZHUWxGWFZYTlpWVVpDV1ZWTmMxTXdSa1pqUlVwMFVYbDRSbEZWUmt4UmVYaFNVVlZHVmt4RlpFSlJNbHBGVEVWV1FsRlZkRVJNUmtaQ1VWWlZjMUl3UmtSYWExRnpVbFZHUWxNd1ZYTlZNRVpDVlhsNGFsRlZUbXRTYVhoR1VWVkdURko1ZUZCUlZVWlFaRVZSYzFJd1JrUlZhWGhFVVZWR1JFeEdiRUpSVjBWeldsVkdRbG93U1hOYU1FcENVVmRrUTJOVlVYTlZNRVpDVlROS1JVeEZkRUpTTTBKRlRFVldRbEZWUm14TVIwWkNVVmRHVEV4Rk1VSlNWMGx6VWxWR1FsRlZkM05aVlVaQ1dWVTRjMVF3UmpCVFJGWkRURWQwUTFGVlJYbFJlWGhNVVZWT01sRjZaRVJNUlZaQ1VWVnJjMVF3UmtSVGJVVnpVbFZHUWxSVGVFeFJWVTVQWWpCSmMxSlZSa0pUVTNoTVVWVk9TMUY1ZUVaUlZVWktURVpPUWxFd2NFMU1SVlpDVVZaRmMxVXdSa1JWYTJOelUxVkdWRkZUZUZCUlZrSkNURVZXUWxGVlJYSlJlWGh1VVd0R1Fsb3dTa1JNUlRsQ1VWVTVSRXhGYkVKUk1qVkRURVpXUWxGV1ZuZFNVM2hNVVZWR1ZtSXdTWE5qVlVwQ1VWaGtRMUY1ZUV4UlZWWnZVa040UmxGVlJrSk5NRTF6V1ZWR1FsbFZjM05aTUVaQ1dUQmpjMWt3UmtSa2EwcEVURVZrUWs5RlpGTk1SazVDVVZSYVEyRlZUWE5TTUVaS1pXdEpjMVF3UmtsT2EwbHpWRlZHUWxkclJYTlNWVVpDVTNsNFNGRlZSbWhSVTNoR1VWVkdUR0ZWVVhOV1ZVWkNWbE40UmxGVlJraGhhMUZ6VWxWR1FsTjZRa1JNUmtaQ1VWWlZlRkY1ZUVoUlZVNDJVVEowUlV4R1JrSlJWa1Z6WVZWS1FsRlhkRU5NUlhSQ1VWVjBSRXhGTVVKUlZUQnpVekJHUmt3d1RrUk1Sa1pDVVZVNGMxRXdSa0pSTTBwSFRFVldRbEZWTVRWVFEzaEtVVlZXZDFGdWNFbE1SVlpDVWtVNU5WTkRlRVpSVlVaTVRFVmtRbEZWWTNaU2FYaHFVVlZPUWtzd1dYTlNWVVpDVXpOYVJFeEdWa0pSVmxWelVsVkdRbEl6VmtSTVJWWkNVVlZ6TlZGNWVGUlJWVTAxVVhsNFNsRllTa2xWZVhSRVRFVk9RbEZYT1VObGExbHpVakJHUkU1VlNYTlJNRVpDVWxoQ1EweEdUa0pSVmtaMlVXbDRVRkZWUms1UmVYaFFVVlZHVGxSRGVGaFJWVVpXVW5sNGFGRlZWVE5SYVhoVVVWVk9TVTFyV1hOU1ZVWkVVVlZOYzFKVlJrUlJWVTF6VWpCR1JsRlRlRTVSVlVaT1RqQlpjMUpWUmtKV00xWkZURVV4UWxGVk9XaE1SVlpDVVZkTmQxRnBlRXhSVlU1elVYbDRTbEZWVGtwTVJXUkNVVlZzY1ZKNWVFWlJWVVpXVEVWT1FsRXhXWE5TTUVaQ1UxVkZjMUpWUmtKVk1FMXpWRlZHUW1SVlNYTlZWVVpDV201T1JreEZWa0pSVld3eVVtbDRVRkZWUm5KUmFYaEVVVlZPTWxGNWVFNVJWVVpPWVRCbmMxSlZSa0pVZWs1RFRFVldRbEZWYkdGTVJURkNVVlV4UkV4Rk1VSlJNMXBEVEVWc1FsRlZkSHBSZVhoR1VWVk9SVXhGTVVKUlZUQnpVMVZHUWxOVGVFWlJWVVpDVDFWUmMySXdTa0pSTURSelkxVk9RbEV3UlhOUk1FWkNVbGMxUkV4RmRFSlJWVEY2VWxONFJsRlZSa3BYYVhoT1VWVkdUbEY1ZUZKUlZWVjRVV2w0U0ZGVlJucFJhWGh3VVd0R1FsWklUa1JNUlZaQ1VURlJjMVJWUmtKVVUzaEtVVlZHU2t4RlZrSlJWVVUxVWtONGRsRnJSa1JVYVhnelVXdEdSRkZUZUVSUlZVWkdZbXROYzFNd1JrSlVXRTVHVEVWV1FsRlZiR0ZNUlRGQ1VWVXhSRXhHUmtKU1ZFWkRWbmw0UmxGVlJrcGtSVlZ6VXpCR1FsUjZRa1JNUlhSQ1VWVjBjbEZwZUU1UlZVWk9ZMVZOYzFOVlJuQlJhbXhFVEVaT1FsRlVTa05pUldOelVsVkdRbVF3U2pGU1UzaElVVlZOZGxGNWVFaFJWVVpLWkd0VmMxSlZSa0pWTUUxelZEQkdSbU5WU1hOaE1FcENVVmQ0UTFKRGVFWlJWVVpVVVhsNFVGRlZUbUZaYVhoUVVWVkdVR1ZWVVhOVE1FWkNVM3BDUTB4RlZrSlJWV3d3VWxONFRsRlZSazVPYTAxelZWVkdSRkpEZUhKUmEwWkNZa1ZKTlZGNWVFWlJWVVpVVVhsNFVGRlZUbUZrVlZselVsVkdRbHBZYUVkTVJWWkNVVlpPUkV4RmRFSlJWVEY2VWxONFJsRlZSa3BrUlZWelZEQkdSbVJyVFhOVVZVWkNWRk40U2xGVlJrcE1SVlpDVVZWR2RGRjVlSFpSYTBaRVZHbDRNVkV3UmtSUlUzaEVVVlZHUm1KclRYTlRNRVpDVkZoT1JreEZWa0pSVld3d1VsTjRVRkZZY0VOVmJYUklURVZPUWxGWGRFTmlhMk56VWxWR1FsWllWa1pNUldSQ1VsZG9SRXhGTVVKUlZUQXlVV2w0VWxGVlJuQlJhMjl6VWxWR1FsWXpTa2hNUlRGQ1VWVXdNRkpUZUVaUlZVWk1UVVZKYzFJd1JrUk9NRTF6VWxWR1FsRlRPVVJNUjJSRFVWVkdibEZzYTNOVk1FWkNWVEl4UkV4RlZrSlJWWFJJVEVWa1FsRXlhRVJNUlRGQ1VWVTVSRXhGWkVKUk1IZHpVbFZHUWxGWE5VVk1SMlJEVVZWR2JsRnRSWE5XVlVaQ1ZsZDBSRXhGVmtKUlZYUktURVYwUWxOWGNFUlJlWGhHVVZWR1ZFeEZWa0pSVlVaM1VrTjRibEZyUmtKYU1FcDFVbWw0YWxGVlRYcFJiazVFVEVWV1FsRlZNWEJTZVhoR1VWVkdVR05yVFhOVk1FWkNWVEp3UjB4RlpFSlJWa1oyVVdsNFJsRlZSazVoTUdOelVsVkdRbFF6UWtSTVJrNUNVVlpWZGxKRGVFaFJWVTUzVWtONFJsRlZSa0pMTUUxeldqQktRbEZYWkVOaWExbHpXVEJHUWxreWRFaE1SazVDVVZaT2NWSnBlRWhSVlVaU1lqQkpjMUpWUmtKVVZWRnpVekJHYmxKSGVFWk1TRVpEVEVjeFNGRXpXa2hSVTNoT1VWVkdhRXN3VFhOU1ZVWkVVa2hhUjB4SFpFTlJWVVowVVhsNFNsRlZSa3BrVlZselVsVkdSRXd3VGpKU2FYaHFVVlZPVW1Rd1kzTlRWVVpFVVZWTmMxbFZSa1pWYVhoc1VWVldRbVZyWTNOaFZVcENVVmRzUTJRd1dYTlNNRVpFV1d0UmMxSlZSa0phTUVwRVRFVTVRbEZXVGtKTVJWWkNVbnBrUTJFd1NYTlVNRVpDVkRCWmMxSXdSa1JUUjNCRFRFVldRbEZYWkVOUmVYaFFVVlZHVUZGNWVFcFJWVVpLVEVka1JGRlZUWHBSYWs1SFRFVjBRbEZWYzNkU2VYaEtVVlZHVGxGVGVFWlJWV1J0VW5sNGNsRnJSa0poTUVwSFRFVmtRbEV5VW5OUmFYaEdVVlZHYmxGclRYTlVNRVpDVkRCTmMxTlZSa0pUVTNod1VUQkdSRTB3U1hwU2FYaE1VVlZHVEUxclkzTlpWVVpDV2xWRmMxSlZSa2hqUlVwSFRFZFdRbEV3UlhOVU1FWkNWRE53U0V4RmRFSlJWWE41VW5sNGFGRlZaRzlSYTJkelZUQkdSRk5UZUZCUlZVWlFaVVZqYzFNd1JrSlRla0pJVEVWc1FsSXlhRU5sUldOelkxVktRbEV3YTNOVU1FWkNWRE5XUjB4RlZrSlJWMlJEWVd0WmMxVXdSa2hOTUVwUFRFZGtRMUZWUm01UmJrNUtURVZXUWxGWFZrUk1SV1JDVVhwT1EyRkZVWE5TVlVaQ1dqQktSRXhGT1VKUlZUbEVURVZzUWxGVmEzTlNNRVpDVW5wYVJFeEZWa0pSVld0NFVXbDRTbEZWUmtwaWExVnpWbFZHUWxaWVZrUk1SWFJDVVZWMFJFeEdWa0pSVmxaNlVrTjRUbEZWVFhaU1JWRnpVbFZHUWxOWWNFTk1SVGxDVVZVNGMxTXdSa0pUTUUxelV6QkdRbE16YkVOTVJXUkNVak53UTJScmEzTmFNRXBDVVZka1EyTXdhM05TVlVaQ1dsaHdSVXhGWkVKUmVrNURaVlZSYzFKVlJrSlRXSEJEVEVVNVFsRlZPSE5UTUVaQ1V6QlZjMU13UmtKVE1uaEVURVZrUWxJemNFTk9NRlZ6WVZWS1FsRlhiRU5qTUd0elVsVkdRbHBZU2tOTVJXUkNVWHBXUTAxVlNYTlNWVVpDV2pCS1JFeEZPVUpSVlRrelVXbDRXbEZWUmxwUmVYaElVVlZPZFZFelJrTk1SVlpDVVZWc05sRnBlRkJSVlVaUVUxTjRSbEZWUms1a1JVMXpWRlZHUWxSWE1VUk1SWFJDVVZWemMxRXdSa0pTVldOelZqQkZNMUV6VWtSTVNFWkRURWhPYmxGclRrMVJVM2hhVVZWT1FreEdiRUpSTUVWelYxVkdSRkZUZUZwUlZVNUNURVpzUWxFd1JYTlpVM2cxVVd0TmNsSlZSWE5UVlVaQ1YxaFNSMHhGVmtKVVJVWjBVV2w0Umt4SGJFZFJWVVpDVVZONFJsRlZSa0pNUlZaQ1VWVkdRa3hIVmtKUlZVVnpVbFZHUWxGVlJYTlpWVVpDVjFONFRGRlZUbmRSYVhod1VXdEdSRkZUZUhoUmEwWkVVVk40TTFGclJrWlZWelZEVEVWV1FsRlZSWE5TVlVaQ1VWVkZjMVV3UmtKUlUzaEdVVlZHUWxGVGVGQlJWVVpPVEVWMFFsRXlVWE5XVlVaRVVWTjRiRXhJUmtOUk0xSkhVMjFvUkV4RlZrSlJWVGxGVEVaR1FsRldWbkpUYVhoU1VWVkdVa3hIYkVOUk1FNTVVV3ROYzFKVlJrSk5hMGx6VWpCR1NFd3dTWE5WTUVaQ1ZUQk5jMUpWUmtKaU1FcEVURVZrUWxKVVZrTk1SV3hDVVZWc1JFeEZWa0pSVjFaSlRFVldRbEZZYkVOU1UzaElVVlZOTVZGNWVGSlJWVVo0VVcwMVEweEZiRUpSVjNCRFlqQkpjMUpWUmtSVFEzaFFVVlZHVUZGVGVFWlJWVVpvWkVWdmMxVlZSa2hqYTBselUxVkdRbE5WVFhOU1ZVWkNWVEowUzB4RlZrSlJXR3hEVWxONFNGRlZSbHBNUlU1Q1VqSndSV05yYjNOVlZVWkNWWGw0U2xGVk9WZE1SVGxDVTBWR01WTnBlRVpSVlVaMlVXdFpjMUl3UmtKV1dFSkRURVYwUWxGVmRHOVRVM2hHVVZWR1VGSkRlRkpSVlVaVVVYbDRSbEZWUmxKUlUzaEdVVlZHVUZKRGVGSlJWVVpVWWpCdmMxSXdSa2hqUlZaMVUybDRSbEZWUmxCU1EzaFNVVEo0UTFZeU9VdE1SVTVDVVZjNVEweEZjM05VVlZKSFRWVk9SVWxwZDJsak1qa3hZMjFPYkdONVNUWlhlVW96V2xkS2QxbFhUbkpQYVRoMlVWWlNTRnBYTkhaa01sWnBZMGRHYW1GNU9URmliV3d5V2xoS2VsbFhlRTVpTWxJeFlrZFdSVnBYV25CaWJXd3dZVmM1ZFVscGQybGtNbFpwWTBkR2FtRjZiM1pNTUVaVlVqSldkVXg1TkhaWk1qbDVXbE01YUdOSGEzVmFNbFoxV2xoS2FHUkhPWGxNYmxKNlNXbDNhV1F5Vm1salIwWnFZWHB2ZGt3d1JsVlNNbFoxVEhrMGRsa3lPWGxhVXprd1pWaENiR041TlhsYVYyUndZek5TYkdOcE5UQmplVWx6U1c1a2JGbHVRbWhaTW5NMlRIazVRbFpGWkd4aWFUaDFUREpTY0dNelVYWmhWelZyV2xobmRXRnVUV2xNUTBveldsZEtkMWxYVG5KUGFUaDJVVlpTU0ZwWE5IWk1hVGxzWTI1S2RtTnVUWFpoVnpVeVdWZDRjRnBETVhsYVdFWXhXbGhPTUV4dFZubGpiVGw1VEc1U2VrbHBkMmxrTWxacFkwZEdhbUY2YjNaTU1FWlZVakpXZFV4NU5IWmFXR2gzWTIxV2VtTjVPV3RhVjA1MlkyMUdNR0l6U25wTU0wcDJaRmhTYkV4dFVteFpNamw1V1ZoU2RtTnBOVEJqZVVselNXNWtiRmx1UW1oWk1uTTJUSGs1UWxaRlpHeGlhVGgxVERKV05HTklTbXhqTTAxMldsaG9kMk50Vm5wamVUVjNZMjA1TW1GWFVteGphVFV3WTNsSmMwbHVaR3haYmtKb1dUSnpOa3g1T1VKV1JXUnNZbWs0ZFV3eWJIVmFSMVkwVEc1U2VrbHBkMmxrTWxacFkwZEdhbUY2YjNaTU1FWlZVakpXZFV4NU5IWmtTR3gzV2xoTmRXUklUV2xNUTBveldsZEtkMWxYVG5KUGFUaDJVVlpTU0ZwWE5IWmFXR2d3V2xoS2RWbFhkMmRpYlRscldsTXhhbUl5TVhSaU1qVnhZM2xDWTBsdFducE1NMEo1WWpJeGNHTXlWbnBZUTBscFRFTktNMXBYU25kWlYwNXlUMms0ZGxGV1VraGFWelIyWkRKV2FXTkhSbXBoZVRscFlqSTVNR016VW5sWldFRnBURU5LTTFwWFNuZFpWMDV5VDJrNGRsRldVa2hhVnpSMlpESldhV05IUm1waGVUbDZaRWRHZVdSSVZuZEpiREJ6U1c1T2RtUllTbXBhV0U1RVlqSTFNRnBYTlRCSmFuQmlTV2xvYldSWE5XcGtSMngyWW1sQ00xcFhTbmRaVjA1eVZsYzFjR1J0Vm5sak1rWnpWRmM1YTJSWGVHeFNSMVp0WVZjMWNHUkhiSFppYVdoNVlqSTVNRXhEUW0xWlYwNHdZak5LTlV0VFFqZFlSelZqWkVkc2JVdElValZqUjFaMldtbENiR1ZJUW5aamJsSjZTVVF3T1ZCVFFXNWlNa3B4V2xkT01FcDVRVzFLYVVJd1pWaENiR0l5V1dkaVZ6bHJaRmQ0YkVsRU1EbFFVMEZ1WWpKS2NWcFhUakJLZVd4allteDRNRmhJVW5SaU1sSXhZa2RWZFZwWWFIZGlNMG93WTNsQk9VbEhXbWhaTTFKMlkyNXJiMHRVZEdOaWJIZ3dXbGQ0ZWxwVFFuQmFhV2d3WlZoQ2JHSXlXV2RhUjFadFlWYzFiRWxFTURsUVUwRnVXbTVXZFZrelVuQmlNalJ1U1VOWmJVbEhVbXhhYld4MVdsTTFhR0pYVVhCWVJ6VmpaRVo0TUZwSFZtMWhWelZzUzBaM2FWRldVa2hhVnpWalNXbDNaMWN4TUhOSlIxcG9XVE5TZG1OdWEzQlBNWGgxV0VoU2JHSklUbXhKUjJ4dFMwaFNOV05IVm5aYWFVSnNaVWhDZG1OdVVucEpSREE1VUZOQmJtSXlTbkZhVjA0d1NubHNZMkpzZURCWVNGSnNaVWhDZG1OdVVucFhNWGRwVVZaU1NGcFhOV05KYkRCblVGTkNiVmxYVGpCaU0wbzFTME5yTjFoSE5XTmtSMVp6WXpKV1kySnNlREJZU0ZKNVlqSTVNRmN4ZDJsUlZsSklXbGMxWTBsc01HZFFVMEp0V1ZkT01HSXpTalZMUTJzM1dFYzFPVXRUYURCaFIyeDZURU5CYjB0VFFUbFFhVUkzV0VjMWVWcFlVakZqYlRSblNXbDNhV0ZYTVhkaU0wb3dTVWRhZWtsSFdubGlNakJuV0VOS2JXTjVPWGRqYlRsMFlWaE9iR014ZDJsUE1YaDVXRWMxY0dKWVFuWmpibEZuWlhsQ1RscFlVbTlpTWxGelNVWkNlV0l6UW14amJsSTFWa2hzZDFwVGQyZFZiVlo0WkZkV2VtUkZiSFZqU0ZZd1RFTkNVMXBZUmpGYVdFNHdWRE5XTUdOSVZqQk1RMEpUWWpOV01GcFRRamxKUjFwNVlqSXdaMWhEU1hWTWJIZHBUekY0ZVZoSE5YQmlXRUoyWTI1UloyVjVRbTVhV0ZKUlkyMDVkMXBZU2pCbFZsSTFZMGRWWjJaVFFtMWpiVGwwU1VaM2FVeHBOSFphV0doM1kyMVdlbU41T1d0YVYwNTJZMjFHTUdJelNucE1NMHAyWkZoU2JFeHRVbXhaTWpsNVdWaFNkbU5zZDJsUE1YaDVXRWMxY0dKWVFuWmpibEZuWlhsQ1ZXVllRbXhqTVVwc1dqSnNlbVJIVm5sSlNEQm5XbTVLZG1KVFFtTkphVFIyWkVoc2QxcFlUWFZqYlZadVlWaE9NRnBZU21OSmFuUmpZMng0ZFZoSVNtTmliVlkwWTBjNWVXUkRRbXBpUjBaNlkzbENRbU5IYkVoYVZ6VnNZMjFHTUdJelNXZGxNWGg1V0VjMFowbERRV2RqU0Vwd1pHMUdNRnBUUW5wa1IwWXdZVmROWjJGWE5YcGtSMFoxV1RKVk5rbEZSbmRoVldSc1ltMVdlVmxZVW5aamFVRTVTVWMxYkdSNVFrSmpSMnhJV2xjMWJHTnRSakJpTTBsdlMxUjBZMk5zZUhWSlEwRm5TVWhDZVdGWVdtaGtSMVZuWTIwNU1XUkhWbnBQYVVKT1dWaEJPR016VW5saFZ6VnVURU5DVTJJelZqQmFWRFEzV0VoS1kySnBRV2RKUTBKM1kyMXNNbGxZVW14SlNGSTFZMGRXZWxWdFZtNWhXRTR3V2xoSk5rbEdValZqUjFaNlZXMVdibUZZVGpCYVdFbG5VRk5DVldWWVFteGpNVXBzV2pKc2VtUkhWbmxNYldSc1pFVnNkV016VW1oaWJVNXNTME5yTjFoSVNtTmliSGg1V0VjMFowbERRV2RqU0Vwd1pHMUdNRnBUUW1waU1qVjZaRWhLTVZrelVuWmphV2R3U1VoMFkyTnNlSFZKUTBGblNVTkJaMGxEUWpCaFIyeDZURzVLZG1SWVVteGplVUU1U1VjMWJHUjVRazVaV0VFNFl6TlNlV0ZYTlc1TVEwSlRZak5XTUZwVU5HOUxWSFJqWTJ4NGRVbERRV2RKU0RGalkyeDRkVmhJU21OaWFVRm5TVU5DZW1SSFJqQmhWMDFuV2pKV01GTlhOWHBrUjBaMVdUSlZiMHRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuWTIxV01HUllTblZKUlVaM1lWVmtiR0p0Vm5sWldGSjJZMmsxY0dKdVRqQlpWelZxV2xSMFkyTnNlSFZKUTBGblNVZ3hZMk5zZUhWWVNFcGpZbWxCWjBsRFFubGFWMlJ3WXpOU2JHTnNTblprV0ZKc1MwYzFhR0pYVlRaSlNFNHdZMjFzZFZwNWQyZGpiVGt4WkVkVk5rbEdTblprV0ZKc1MxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZGtSMmh3WTNrMWVXSXpWakJhV0UxMVl6SldNRXRITldoaVYxVnpTVWhLZG1SWVVteExWSFJqWTJ4NGRVbERRV2RKU0RGalkyeDRkVmhJU21OaWFVRm5TVU5DYmxwWE5XeGpiVVl3V2xWR2QyRldTbXhhTW14NlpFZFdlVXREYTJkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VkNGJHUkRRakJqZVVFNVNVWjNhVXg1T0dkU01sWjFXbGhLYUdSSFZtdEpSMDUyWW01U2JHSnVVWE5KUjFKMlltbGtNRWxJVW5aa1YwNXZXRVo0ZFZoR2VIVllRMGszV0VoS1kySnBRV2RKUTBGblNVTkJaMlJJVFdkTGVqQm5aRWRvY0dONU5XNWFWelZzWTIxR01GcFdTblprV0ZKc1ZraHNkMXBXVWxSTFEyczNXRWhLWTJKcFFXZEpRMEZuU1VOQloyUklUV2RMZWpCblpFZG9jR041Tlc1YVZ6VnNZMjFHTUZwVk1XeGtSMmgyV2tWV2RXUlhNVlZWZVdkd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsSVVucEpRM001U1VoU2IyRllUWFZhTWxaMVdsaEthR1JIVmxOYVYyUndZek5TYkdOdFZtdFdTR3gzV2xoT1ZWVjVaM0JQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWRPZG1KdVRqQkpTRXAyWkZoU2JHTXhValZqUjFaNlQybENOMGxHZERCbFdFSnNTVWRzZFVsRk1XeGtSMmgyV2tZd05rbElUakJqYld4MVdqRjBaRWxJTUdkUVUwSTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjJSc1pFUnZaMWN4TUhOWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElRblpqTTFFMlNVWjBaRXhHZUhsWVJ6Um5TVU5CWjBsRFFXZEpTREEzV0VoS1kySnBRV2RKUTBGblNVTkJaMXB0T1hsSlEyaHpXbGhSWjFjeU5XaGlWMVZ6U1VoS2RtUllVbXhZVTBKMldtbENNR0ZIYkhwTWJrcDJaRmhTYkdONU5XeGlibEo1WVZkV2VrdERhM0JKU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGtTRTFuUzNvd1oyUkhhSEJqZVRWdVdsYzFiR050UmpCYVZrcDJaRmhTYkZaR1RXOWliVVowV2xOM1oyTnRPVEZrUjFWd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEo1WWpOV01GcFlUbFZsV0VKc1l6RjBlV0l6VmpCYVV6VjBXbGhTYjJJeVVtUk1ia0l4WXpKbmIySnRSblJhVTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjJaV2VIbFlSelJuU1VOQlowbERRV2RKU0ZKNlNVTnpPVWxJVW05aFdFMTFXakpXZFZwWVNtaGtSMVpUWWpOV01GcFlUbFZsV0VKc1kzbG9lV0l6VmpCYVdFNVZaVmhDYkdONWF6ZFlTRXBqWW1sQlowbERRV2RKUTBGblpFZG9jR041TlROamJXd3dXbFZHZDJGV1NteGFNbXg2WkVkV2VWWkhPVWRoVjNoc1MwaFNla3RVZEdOamJIaDFTVU5CWjBsSU1XTmpiSGgxV0VoS1kySnBRV2RKUTBKM1kyMXNNbGxZVW14SlIyUnNZbTFXZVZsWVVteFVWMVl3WVVjNWExSlhOVEZpVmxKVVMwTnJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpSM2hzWkVOQ01HTjVRVGxKUjBKaldFYzFiR1ZJUW5aamJsRm5XbGMxTVdKVFFrNWFXRkp2WWpKUloyVXlRVGRZU0VwalltbEJaMGxEUVdkSlEwRm5WREpLY1ZwWFRqQk1ibHBvWWtoV2JHTjVhRTVhV0ZKdllqSlJjRXh0V25aamExWm9XVEpuYjB0SE1XeGtSMmgyV2tOcloxQlVOR2RMU0ZKNlNVTnpPVWxIUW1OWVJ6VmpXRWhSYTJVeU1XeGtSMmgyV2tnd2MxbERhM0JQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWhTZWtsRGN6bEpSbmRwV0VaNGRXWldlR05pYkhoallteDNhVTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpTRXBzWkVoV2VXSnBRakJqZW5SalkyeDRkVWxEUVdkSlNERmpZMng0ZFZoSVNtTmlhVUZuU1VOQ2QyTnRiREpaV0ZKc1NVZGtiR0p0Vm5sWldGSnNWVzFXYm1GWVRqQmFXRXBzV2taU05XTkhWbnBXUmsxdlMxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZGlSMVl3U1VoU2VrbEVNR2RZUTBwaldFYzFZMGxxZEdOamJIaDFTVU5CWjBsRFFXZEpRMEl3WVVkc2VreHVValZqUjFaNlZXMVdibUZZVGpCYVdFbDFXbGMxTVdKWVRYVmFiVGw1VWxkR2FtRkRaMjlrU0d4M1dsTjNaMkp0Um5SYVUydG5VRlEwWjJVeGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkNNR041UVhKUVUwSm5XRVo0ZFZwWWFIZGlNMG93U1VkV2RXUlhNR2RLU0hSMVdWY3hiR1pUUWpkWlJIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RVTWtweFdsZE9NRXh0Vm5Wa1NFcHdXbGhOYjJSSWJIZGFVMnQxV20wNWVWSlhSbXBoUTJoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOb1ltRXlWalZNUTBJeVdWZDRNVnBXTUhCSlJEQXJXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkTFNGSjZTVU56T1VsSFFtTllSelZqV0VoUmEyVXlkR3hsV0RCblVGTkJhMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUWpCbFdFSnNZakpaWjJSdFJuTmtWMVZuVUZRd09VbEdkMmxpYmxaMFdXMVdlVmhEU1dkUWVVSXlXVmQ0TVZwVFFUWkpSMEpqU1dsU04yUnRSbk5rVjFZNVdFTktaMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblpsTjRaMHRXZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQmNFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DTUdONVFYSlFVMEpqU1d4NFkySnVNV05ZUnpWalNXcDBZMk5zZUhWSlEwRm5TVU5CWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkNlVnBZVWpGamJUUm5aRWhOTjFoSVNtTmlhVUZuU1VOQ09WaElTbU5pYkhoNVdFYzBaMGxEUVdkalNFcHdaRzFHTUZwVFFtNWFWelZzWTIxR01GcFdTblprV0ZKc1ZraHNkMXBXVWxSTFEydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbElTbXhrU0ZaNVltbENaMWhHZUhWa1NHeDNXbE5DVTJJelZqQmFVMEU1U1VoMGRWbFhNV3hQYVVKNlpFaEtjR0p0WXpkSlJ6RnNaRWRvZGxwRWIyZFVWMVl3WVVjNWEwOTVRbmRaV0ZKdlQybENlbVJJU25CaWJXTTNTVWhLYkdOWVZuQmpiVlpDWkZoU2IxQjZiMmRaYlRsMllrZFdhR0pwUWpoSlNGWjFXa2RXYldGWE5XeGFSSE5uV2tkR01GbFVPRFpKUjBaMVpWTkNPRWxJVm5WYVIxWnRZVmMxYkZwRWMyZGpiVlo2VDIxR2RXVllNRGRZUm5oMVdFWjRkVmxFZEdOamJIaDFTVU5CWjBsSU1XTmpiSGgxV0VoS1kySnBRV2RKUTBKM1kyMXNNbGxZVW14SlIyUnNZbTFXZVZsWVVteFZiVGt4WkVkV2VsWkliSGRhV0UxdlkyMDVNV1JIVm5wV1NHeDNXbGhOTmtsSWMyZFhNMUkxWTBkVloyRlhOR2RVVjFZd1lVYzVhMWhVYjJkak0xSjVZVmMxYmxjeE1HZG1VMnRuWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxIZUd4a1EwSXdaVmhDYkdONVFUbEpSbmRwV0VOSk4xaElTbU5pYVVGblNVTkJaMGxEUVdkVU1rcHhXbGRPTUV4dFZuVmtTRXB3V2xoTmIyTnRPVEZrUjFaNlZraHNkMXBZVFhCTWJWcDJZMnRXYUZreVoyOUxSblIwV2xoU2IySXlVWE5KU0VwMlpGaFNiR014TUhCSlJEQXJTVWgwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblpFaHNkMXBZVFdkTGVqQm5XVVo0WTJKdFZqUmpSemw1WkVOQ01HVllRbXhKUmxGclpUSXhiR1JIYUhaYVF6VXdZakZXZDJOSFZubFJNa1o2V2xObmNHWldTblprV0ZKc1kzbEJPVWxHU25aa1dGSnNTa2gwZVdJelZqQmFXRTExWVcwNWNHSnBhR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSbmRwU1VoM1oxVnRPVEZrUjFaalNXeDRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZ3WmxSMFowOHhlSGxZUnpSblNVTkJaMGxEUVdkSlNEQndUekY0ZVZoSE5HZEpRMEZuU1VOQlowbElTbXhrU0ZaNVltbENNR1ZZUW14amVuUmpZMng0ZFVsRFFXZEpTREZqWTJ4NGRWaElTbU5pYVVGblNVTkNkMk50YkRKWldGSnNTVWRrYkdKdFZubFpXRkpzVlcwNU1XUkhWbFZWZVdoMVdWY3hiRTlwUW5wa1NFcHdZbTFqYzBsSVNuWmtXRkpzVDJsQ1UySXpWakJhVTJ0blpURjRlVmhITkdkSlEwRm5TVU5CWjBsSGVHeGtRMEl3WTNsQk9VbEhRbXhsU0VKMlkyNVJaMlJJYkhkYVUwSlZWVzA1TVdSSFZXdGxNalZvWWxkV09WTlhOWGRrV0ZGblVGTkJhMlV6VW05aFdFMTFXakpXTUZKSFJqQlpWbEkxWTBkV1ZWVjVhR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJOdE9URmtSMVYxWTIxV2VHUlhiSGxhVjFFdlRHMUtkbHBJYkdOamJIaDFTVU5CWjBsRFFXZEpRMEZ3WmxSMFkxaEhOV2RQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWhTZWtsRGN6bEpSMEpzWlVoQ2RtTnVVV2RrU0d4M1dsTkNWVlZ0T1RGa1IxVnJaVEkxYUdKWFZqbFVNMVl3WTBoV01FbEVNR2RLU0hRd1lVZHNla3h0Wkd4aWJWWjVXVmhTYkZRelZqQmpTRll3Vmtoc2QxcFdVbFJMUm5oNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFubGlNMVl3V2xNMWVWcFlUbmRpTWpWNldsWjRlVmhITkdkSlEwRm5TVU5CWjBsRGJEbFBNWGhqWW0xQk4xaElTbU5pYVVGblNVTkJaMGxEUVdka1NFMW5TM293WjFsR2VIbFlSelZzWlVoQ2RtTnVVV2RrU0d4M1dsTkNVMkl6VmpCYVUxSTNZbTFHZEZwWU1HZFFVMEkzV0VoS1kySnBRV2RKUTBKMVdWY3hiRTlwUW1OSmFWSTNZbTFHZEZwWU1XTkphblJqWTJ4NGRVbERRV2RKUnpGc1pFZG9kbHBFYjJkVVYxWXdZVWM1YTB4cFVqZGpiVGt4WkVkVmRXSlhWakJoUnpsclpsUjBZMk5zZUhWSlEwRm5TVWhDYUdSSFp6WkpSbmRwU2toMGVXSXpWakJhVXpWM1dWaFNiMlpXZDJsUE1YaDVXRWMwWjBsRFFXZGpiVlo0WkZkc2VWcFZSakZrUjJjMlNVTlNOMk50T1RGa1IxVjFXVmhXTUdGSU1EZFlTRXBqWW1sQlowbERRV3RsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWhLZG1SWVVteE1ia3BzWTFoV2NHTnRWbXRRZVRWcFlqSlNOVmhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VRNFoxbEhVbWhrUjBVMlNVWlNVMkl6VmpCYVUxSTNZbTFHZEZwWU1VcGlia0l4WkVkQ1kyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5UMmxDWjFwSFJqQlpWRGcyU1VaU1UySXpWakJhVTFJM1ltMUdkRnBZTVVwaWJrSXhaRWRDWTJOc2VIVkpRMEZuU1VneFkyTnNlSFZKUTBGblNVaEtiR042YjJkV1JrcDJaRmhTYkVwSWRIVlpWekZzWmxVNU1XUklRakZrUkhSalkyeDRkV1pVZEdOamJIaDFXbGhvZDJJelNqQkpSMDUyWW01T01FbEhaR3hrUmtwc1kxaFdiR016VVd0bE1qVm9ZbGRXT1VsRU1HZExRMUkzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNFcDJaRmhTYkV4dVNteGpXRlp3WTIxV2ExQjVOV2xpTWxJMVNVUTRaMWxIVW1oa1IwVTJTVVpLZG1SWVVteEtTSFIxV1ZjeGJHWldkR05KYlZKb1pFZEdZMGxzTVdkSlJHOW5XRU5LWTBsc2VIbFlSelJuU1VOQlowbERRV2RKU0RCd1QybENVR0pYYkRCUVJrcDJaRmhTYkVwSWRIVlpWekZzWmxOM1oxaERTbmxhV0U1alNXbzBaMUJVTkdkTFNIUmpZMng0ZFVsRFFXZEpSelZvWWxkVk5rbEdkMmxLU0hSMVdWY3hiR1pXZDJsTVJuaDVXRWMwWjBsRFFXZGlWMVl3WVVjNWEwOXBRazVhV0ZKdllqSlJkVXBJZEhsaU0xWXdXbE0xZEZwWVVtOWlNbEk1VEVaNGVWaEhOR2RKUTBGblkwZEdNR0ZFYjJkWVEwbHJaVE5LZG1SWVVteE1ia0pvWkVkb09WaERTWE5ZU0VwalltbEJaMGxEUW5sYVdFWXhZVmhLYkZGWVZqQmhSRzluU2toMGVXSXpWakJhVXpWb1pGaFNiMlpUZUdOamJIaDFTVU5CWjBsRFVqZGpiVGt4WkVkVmRXTnRWbmhrVjJ4NVdsZFJMMHh0U25aYVNHdG5VSGxDWTBsdFVtaGtSMFZ6V0VOSlowOXBRbU5KYkhkcFpsWjRlVmhITlRsTFZIUmpXRWMxWTFoSE5XZFBNWGg1V0VjMFowbERRV2RKUTBGblNVaEtiR1JJVm5saWFVSXdZM3AwWTJOc2VIVkpRMEZuU1VneFkyTnNlSFZZU0VwalltbEJaMGxEUW5kamJXd3lXVmhTYkVsSFpHeGtSVkpvWkVkR1ZXVllRbXhXUmsxdldXMDVhMlZVT0RaSlIwcDJZako0YkZsWE5HZG1RMEpUV2xoR01WcFlUakJUVnpWM1pGaFJPRmxYTlRWUWFXdG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbEhiRzFKUTJocFlqSlNOVXRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElTbXhrU0ZaNVltbENNR1ZZUW14aU1sbG5XVzA1YTJWVFFUbFFWREJuV0VOS2FXSXlPWE5hVjBaMVdFTktZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEVPR2RZUTBwb1ltNXNZMGxzZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RQYVVJd1lVZHNla3h0Wkd4aWJWWjVXVmhTYkZOWE5YZGtXRkpWWlZoQ2JGWkdUVzlaYlRsclpWTnJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZG1VMEpzWWtoT2JFbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VOa1UySXpWakJhVm5SalNXMVNhR1JIUm1OSmJEQnVUekY0ZVZoSE5HZEpRMEZuU1VOQlowbElNV05qYkhoMVNVTkJaMGxJTVdOamJIaDFXRWhLWTJKcFFXZEpRMEozWTIxc01sbFlVbXhKUjJSc1ltMVdlVmxZVW14VFZ6VjNaRmhTVldWWVFteFdSazF2WkVoc2QxcFViMmRWYlZaNFpGZFdlbVJGYkhWalNGWXdVRWRHZFdWVU5IQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkNjMXBZVVdka1NFMW5VRk5DWTBsdWRHTkphblJqWTJ4NGRVbERRV2RKUTBGblNVTkNVRmx0Y0d4Wk0xRjFXbGMxTUdOdGJHeGplV2d3WlZoQ2JFdFROVzFpTTBwR1dWZE9iMHREYUdKalNFcDJZMGRXZVdSSWEzTkpTRkkxWTBkV1pFdFRRVGxRYVVJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMnh0U1VOb2QyTnRPWGRhV0Vvd1pWTkJhRkJVTUdkWVEwcG1XRE5LYkdOWVZuQmpiVlpyV0RFNVkwbHBiR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRTR6WVZoU2FtRkRRVzlhTWxZd1ZVaEtkbU5IVm5sa1NHeFZaVmhDYkV0SVVqVmpSMVZ3UzFOQ04xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuV1RKR2VscFRRbEZqYlRsM1dsaEtNR1ZXVWpWalIxVjFVV3RHVkZKVWNHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGtTRTFuUzNvd1oxbEdlR05pYkhoalpFWjRZMlJEVWpkalNFcDJZMGRXZVdSSWJEbEtTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElValZqUjFWMVdERTVlVnBZUmpGaFdFcHNXa1k1WmtsRU9HZFlRMGsyV0VOSlowOXBRbU5KYWpnMldFTktZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMlpUVWpka1NHeDNXbE0xWmxneU5URmlSM2hvV1cxNGJGZ3hPR2RRZVVKalNXbENkV1JYZUhOSlNIaGpTV2xCTmtsR2QybFlRMG81U1VOU04xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJd1pWaENiRXhzT1daa1NHeDNXbFk1WmxoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSU1EZFpSSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuV1c1S2JGbFhjemRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxa3lSbnBhVTBKUlkyMDVkMXBZU2pCbFZsSTFZMGRWZFZGV1NsTlJWbXMyV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoU2VrbERjemxKUjBKaldFYzFZMWhJVW1OWVNGRnJaVE5DZVdJelFteGpibEkxWmxOU04xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJd1pWaENiRXhzT1daamJWWjRaRmRzZVZwWFVtWlllVUZvVUZRd1oxcHRSbk5qTWxWblVIbENZMGxxY0dOSmFVRTJTVVozYVZCNmNHTkpiSGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1U1VOU04yUkhhSEJqZVRWdVdsYzFiR050UmpCYVZXeDFZMGhXTUZaSWJIZGFWbEpVUzBoU05XTkhWWFZZTVRsb1kyNUthR1ZXT1daTFdERmlXRlIwWjA4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtbGpiVlpvWVhwMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEpxV1ZoT2JFbEdRbmxpTTBKc1kyNVNOVlpJYkhkYVV6VlFVV3R3UmxFeFVUWllTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRko2U1VOek9VbEhRbU5ZUnpWaldFaFNZMWhJVVd0bE0wSjVZak5DYkdOdVVqVm1VMUkzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRakJsV0VKc1RHdzVabU50Vm5oa1YyeDVXbGRTWmxoNVFXaFFWREJuV20xR2MyTXlWV2RRZVVKalNXcHdZMGxwUVRaSlJuZHBVSHB3WTBsc2VIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbEtTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElValZqUjFWMVdERTVkV1JYZUhOWlYwcHpXbFk1WmtsRU9HZFlRMGxuWW01V2MySkRRamhZUTBsblQybENZMGxzZDJsWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNEQm5Ta2gwTUdGSGJIcE1iV1JzWW0xV2VWbFlVbXhUVnpWM1pGaFNWV1ZZUW14V1JrMXZaRWhzZDFwVGJEbFBNa0UzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VkS2VWcFhSbkpQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxaNGVWaEhOR2RKUTBGblNVTkJaMGxJTUhCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VoU2VrbERjemxKUm5kcFdFWjRkVmhHZURCbVZuZHBUekY0ZVZoSE5HZEpRMEZuU1VOQlowbElTbXhrU0ZaNVltbENNR042ZEdOamJIaDFTVU5CWjBsSU1XTmpiSGgxV0VoS1kySnBRV2RKUTBKM1kyMXNNbGxZVW14SlIyUnNZbTFXZVZsWVVteFVNMVl3WTBoV01GWkliSGRhVmxKVVMwaFNOV05IVlM5UGFVSlRXbGhHTVZwWVRqQlVNMVl3WTBoV01GQkhSblZsVkRSd1NVaDBZMk5zZUhWSlEwRm5TVU5CWjBsRFFuQmFhVUZ2U1ZoU05XTkhWWEJKU0Vwc1pFaFdlV0pwUW1OSmJVWjFaVlozYVU4eGVIbFlSelJuU1VOQlowbERRV2RKUjNoc1pFTkNNR041UVRsSlJuZHBaVEYzYVU4eGVIbFlSelJuU1VOQlowbERRV2RKUlRscFlXMVdhbVJETld4aWJsSjVZVmRXZWt0SVVqVmpSMVZ3VEcxYWRtTnJWbWhaTW1kdlMwWjBkMk50T1hkYVdFb3daVk4zWjJSSWJIZGFWakJ3U1VRd0swbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJGWFdXZExTRUo1WWpOQ2JHTnVValZKUTBVNVVGTkNZMGxzT1daamJWWjRaRmRzZVZwWFVtWllNWGRwUzFaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJNelpIQmtSMDV2U1VOb2JscFlVbEZqYlRsM1dsaEtNR1ZXVWpWalIxVnZaRWhzZDFwVGEzQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtcFpXRTVzU1VaQ2VXSXpRbXhqYmxJMVZraHNkMXBUTlVOUlZrNUdUMng0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DTUdONVFYSlFVMEpuV0VaNGRWaEdlREJZUm5nd1NraDBkMk50T1hkYVdFb3daVmd3YTJVeGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWkVoc2QxcFROV1pZTTBwc1kxaFdjR050Vm10WU1UaG5VSGxDWTBscWNHTkphVUUyU1VaM2FWQjZjR05KYkhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJNVNraDBNR1ZZUW14TWJEbG1ZbTVXYzJKSFJtbGlSMVptV0hsQkwwbEdkMmxKUnpVeFlrZDNaMlpHZDJsSlJHOW5XRU5LWTBsdU1HZEtTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElValZqUjFWMVdERTVNR1ZZUW14WU1UbGpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5abFIwWjA4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtbGpiVlpvWVhwMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEpxV1ZoT2JFbEdRbmxpTTBKc1kyNVNOVlpJYkhkYVV6VkNWV3hLUWxkVWNHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGtTRTFuUzNvd1oxbEdlR05pYkhoalpFWjRZMlJEVWpkalNFcDJZMGRXZVdSSWJEbEtTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElValZqUjFWMVdERTVlVnBZUmpGaFdFcHNXa1k1WmtsRFJUbFFVMEp0V1ZkNGVscFRRUzlKUm5kcFQyeDNhVWxFYjJkWVEwa3ZUMngzYVZoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSU1HZEtTSFF3WVVkc2VreHRaR3hpYlZaNVdWaFNiRlF6VmpCalNGWXdWa2hzZDFwV1VsUkxTRkkxWTBkVmRWZ3hPV2hqYmtwb1pWWTVaa3RZTVdKWVZIUm5UekY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DYVdOdFZtaGhlblJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtcFpXRTVzU1VaQ2VXSXpRbXhqYmxJMVZraHNkMXBUTlZCUmEzQkdVVEZSTmxoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVVucEpRM001U1VkQ1kxaEhOV05ZU0ZKaldFaFJhMlV6UW5saU0wSnNZMjVTTldaVFVqZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HVllRbXhNYkRsbVkyMVdlR1JYYkhsYVYxSm1XSGxCYUZCVU1HZGFiVVp6WXpKVloxQjVRbU5KYW5CalNXbEJOa2xHZDJsUWVuQmpTV3g0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DT1VwSWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoU05XTkhWWFZZTVRsMVpGZDRjMWxYU25OYVZqbG1TVVE0WjFoRFNXZGlibFp6WWtOQ09GaERTV2RQYVVKalNXeDNhVmhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTUdkS1NIUXdZVWRzZWt4dFpHeGliVlo1V1ZoU2JGUXpWakJqU0ZZd1ZraHNkMXBXVWxSTFNGSTFZMGRWY0daVWRHZFBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEpwWTIxV2FHRjZkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTREZqWTJ4NGRVbERRV2RKUTBGblNVTkNPVXRVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEl3WTNsQmNsQlRRbU5KYkhoallteDRZMlJJTVdOSmFuUmpZMng0ZFVsRFFXZEpRMEZuU1VOQ2VWcFlVakZqYlRSblpFaE5OMWhJU21OaWFVRm5TVU5DT1ZoSVNtTmliSGg1V0VjMFowbERRV2RqU0Vwd1pHMUdNRnBUUWpOamJXd3dXbFZHZDJGV1NteGFNbXg2WkVkV2VWWkhPVWRoVjNoc1MwaFNlazlwUW5wa1NFcHdZbTFqY0VsSWRHTmpiSGgxU1VOQlowbERRV2RKUTBKdFkzazFNMk50YkRCYVZWcHdZa2RWYjJOSVNuWlpNbFo2WTNrMWJHSnVXWFZSVmxKSVVsVTFabFpHYkZGU1ZrNW1VbXM1VFZKRlZsTlZSVVpWVTBOQmNrbEdkMmxNTWtaM1lWTTFhMHh1VW5wWVEwbHpTVWhTZWt0VWRHTmpiSGgxU1VOQlowbElNV05qYkhoMVpsWjRlVmhITkdsTVEwcHdZbGhDZG1OdVVXZGxlVUpUWWpOV01GcFRRamxKUjFwNVlqSXdaMWhEU1hWTWJIZHBUekY0ZVZoSE5XTmpiSGgxV2xob2QySXpTakJKUjA1eldWaE9la2xHVWpWalIxWjZWVzFXYm1GWVRqQmFXRWxuWlRGNGVWaEhOR2RKUTBGblkwaEtjR1J0UmpCYVUwSjZaRWRHTUdGWFRXZGhWelY2WkVkR2RWa3lWVFpKUmxJMVkwZFdlbFZ0Vm01aFdFNHdXbGhKWjFCVFFuVmFXR05uVmtoc2QxcFlUbE5hVjJSd1l6TlNiR05wWjNCUE1YaDVXRWMwWjBsRFFXZGpiVlpvV2tjNWRXSklhMmRhVnpVeFlsaE5Oa2xGTVdoalJIaDZaRWhLY0dKdFkzTkpSMFoxWlZRME4xaElTbU5pYkhoNVdFYzBaMGxEUVdkalNFcHdaRzFHTUZwVFFtcGlNalY2WkVoS01Wa3pVblpqYVdkd1NVaDBZMk5zZUhWSlEwRm5TVU5CWjBsRFFqQmhSMng2VEcxV2RXUlhNWHBKUkRCblltMVdNMGxGTVdoalJIaDZaRWhLY0dKdFkzTkpSa3AyWkZoU2JGQnBaM0JQTVhoNVdFYzBaMGxEUVdkbVZuaDVXRWMxWTJOc2VIVkpRMEZuU1VoT01GbFlVbkJaZVVKdVdsaFNTbUp1VGpCWlZ6VnFXbE5uY0VsSWRHTmpiSGgxU1VOQlowbERRV2RKUTBKNVdsaFNNV050TkdkV1NHeDNXbGhPVTFwWFpIQmpNMUpzWTJrMWNHSnVUakJaVnpWcVdsUjBZMk5zZUhWSlEwRm5TVWd4WTJOc2VIVllTRXBqWW1sQlowbERRbmxhVjJSd1l6TlNiR05yVm5Wa1Z6QnZZbTFHZEZwVWIyZGpNMUo1WVZjMWJreERRakJsV0VKc1QybENhR0p1YTNCSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYlZaMVpGY3hla3h1VG14a1EyaDFXVmN4YkV4RFFqQmxXRUpzUzFSMFkyTnNlSFZKUTBGblNVZ3hZMk5zZUhWbVZuaDVXRWMwYVV4RFNXaGFibFoxV1ROU2NHSXlORzlhVTNnd1MxaDBZMGx0T1dsaGJWWnFaRVozYVZCVU1UQmxXRUpzWWpKWloxcFlhSGRpTTBvd1kzbFpiVmhEU25aWmJYQnNXVE5TWTBscU1EbGtTR3gzV2xjNWJVbEhNWFphU0ZaeldsUTVkR0l5VWpGaVIxVjFXbGhvZDJJelNqQmplakV3UzBOck5saERTbTFrVnpWcVpFZHNkbUpzZDJsUVZERXdaVmhDYkdJeVdXZGFSMVp0WVZjMWJFcHBXbXRhVjFwd1ltMVZkVmxYTVd0UU1sSnNXbTFzZFZwVGFHTkphMFpWVWpKV2RWaERTWE5YTVRCelpFTnJObGhEU25aWmJYQnNXVE5TWTBscU1EbGtTR3gzV2xjNWJVbEhWalJqUnpsNVpFaE5MMXBZYUhkaU0wb3dZM2sxUWxaRlpHeGlhakV3UzBOck5scFROVUpXUldSc1ltb3hNRXREYkRsTFNGSnZZVmhOYzB0RFozQlFWRFJ2UzBOck9WQnVkR05KYmxaNldsTkNlbVJJU25CWk0xSmpTV3AwTWxsWVNXZGFWREUzVGtSUmVVOXRXakZpYlU0d1lWYzVkVXRIVlhOa1EzaDVTMWgwTWxsWVNXZGlhakV3WVVkc2VrcHBXakJoUjJ4NlRHdzVabUZYTVhkaU0wb3dVa2RXYlZsWVZuTmtTSGc0V201V2RWa3pVbkJpTWpSdldsTnNOMk50VmpCa1dFcDFTVWRWYlVwdFZYVllNVGxzWXpBeGRscElWbk5hVkRsc1QyNTBhMXBYV21oa1YzZ3dUMjFXT1daVWRGQlpiWEJzV1ROUmRWcEhWbTFoVnpWc1ZVaEtkbU5IVm5sa1NHdHZaRU40WTBsc09XWmFXRTVPWWpKU01XSkhWbU5KYVhnM1pHMUdjMlJYVlRaSlZFSTVTMU40TUV4clJuZGhWV1JzWW0xV2VWbFlVblpqYWpFeVlqSnNhMGxFUVRkWk1qbDFZek5SWjJKNk1YVkxTRWx2VFdwcmVVdFRhM05qZWpGNVMwUlJOVTFwYTNOWlZERjVTMFJaTVUxRGEzTmhWREY1UzBSRk0wOVRhemRaTW5ob1l6Tk5aMlJZZEhwa1IwWXdZVmROWjJGWE5YcGtSMFoxV1RKVk9XSnRWak5KU0ZVM1kyMDVNV1JIVm5wUE0xSTFZMGRXZWxWdFZtNWhXRTR3V2xoSk9XRlROVlZsV0VKc1l6RktiRm95Ykhwa1IxWjVURzFrYkdSRmJIVmpNMUpvWW0xT2JFdERhemRaTWpsMVl6TlNlV1JYVGpCaU0wbHZTMWgwTUdGSGJIcE1ia3AyWkZoU2JHTjZNWFZhV0dOblZGZEdkMlpZVGpCWldGSndXWGxDYmxwWVVrcGliazR3V1ZjMWFscFRaM0JsTTBwc1pFaFdlV0pwUWpGTWJXeDFZek5TYUdKdFRteG1XRXBzV2pKc2VtUkhWbmxWYlRreFpFZFZiMXBUZURCTFdIUXdZVWRzZWt4dVNuWmtXRkpzWTNrMWVscFlVVzlhVTNnd1MxZ3hibHBYTld4amJVWXdXbFZHZDJGV1NteGFNbXg2WkVkV2VVdERiRGRpUjFZd1NVZFZPVmhEU1haTWVVSklXbGMxYkdOdFJqQmFWMUZuV1RJNWRXUkhWblZrUTNkbldrYzVkVW96VVdka1J6a3hXVEpvWTFoSE5XTllSelZqU1dwMGJFdDZNVEJoUjJ4NlRHMWtiR0p0Vm5sWldGSnNWVzA1TVdSSFZsVmxXRUpzVmtaTmIwdFRlR3hMZWpFd1lVZHNla3h0Wkd4aWJWWjVXVmhTYkZSWFZqQmhSemxyVWxjMU1XSldVbFJMUTJ0eldsTnpPV1JIYUhCamVUVnVXbGMxYkdOdFJqQmFWa3BzV2pKc2VtUkhWbmxhVjFKVlpWaENiR014VWxSTFEyczNXVEk1ZFdNelVXZGtSREUzV2pKV01FOXNkR1JNU0VKMll6TlJObGN4TVRsUE1scDJZMmxvYzFwWVVtSmphWGgxV0ZjNWJVbElVbTloV0UxMVkyMDVNV1JIVm5wTWJWWjFaRWhLY0ZwWVRXOUxVMnhzUzNveE1HRkhiSHBNYldSc1ltMVdlVmxZVW14VmJUa3haRWRXVlZWNWFIbE1SelJ3VEVoU1ltSnBOWFJhV0ZKdllqSlNaRXh1UWpGak1tZHZZMmxyTjFwVGN6bGtSMmh3WTNrMWJscFhOV3hqYlVZd1dsWktkbVJZVW14ak1WSTFZMGRXZWt0SVVYQk1TRkp2WVZoTmRXUXpTbkJrUjFaQ1kwZHNVMXBYWkhCak0xSnNZMnhTZGxKdGJITmFVMmhzUzFneGJscFhOV3hqYlVZd1dsVXhiR1JIYUhaYVJWWjFaRmN4VlZWNVozQmxNbmhzWkVOQ2JGQldkMmxZUm5oMVdsaG9kMkl6U2pCSlIxWjFaRmN3WjFSWFZqQmhSemxyU1VoMFkwbHFkSGxhV0ZJeFkyMDBaMVF5U25GYVYwNHdURzVhYUdKSVZteGplV2g2VEdzeGJHUkhhSFphUTJ0MVdtMDVlVkpYUm1waFEyZHZaRVF3SzFwVGN6bFpSbmhqWW14NFkyUkRVamRrU0RCeldVTnJjRXhIVlhKUVZuZHBXRVo0ZFdaV2VHTmliSGhqWW14M2FVeEhWamxhTWxaMVdsaEthR1JIVmxOYVYyUndZek5TYkdOdFZtdFdTR3gzV2xoT1ZWVjVaM0JsTW5oc1pFTkNiRkJXZDJsWVJuaDFXRU5KTjJOdFZqQmtXRXAxU1VoU2IyRllUWFZrU0d4M1dsaE9VMXBYWkhCak0xSnNZMmsxYkdKdVZuUmplVFZ0WWpOS1JsbFhUbTlMUTJkdlpFTjRlVXRVTUN0bE1sVnlVRmRDWTFoSE5XeGxTRUoyWTI1UloxcFhOVEZpVTBGclpUTktPVWxJZEdkTVJUbHBZVzFXYW1SRE5XeGlibEo1WVZkV2VrdElVWEJNYlZwMlkydFdhRmt5WjI5TFEyaGlaRU40ZVZoVGF6bFFiVlZ5VUZkQ1kxaEhOV05ZU0ZGclpUTlNPVWxFTUdkS1NIUmpTVzAxTVdKWFNteGpiSGRwVUZReE1HVllRbXhpTWxsblkybzVlVTl0UW1OSmFWSTNZMjR4WTBsdFFqbE1SMEZ3UzFONGJFdDZNV05KYkhoalltNHhZMWhITldOSmJqQndTMU40YkdaWFpHeGliVlo1V1ZoU2JGVnRPVEZrUjFaVlpWaENiRlpHVFc5TFdIUjVXbGhTTVdOdE5XTkpiSGhqWW01U05XTkhWV2RWYlRreFpFZFZaMUJUUWpkaWJVWjBXbFJ2WjJNelVubGhWelZ1VDNsQ2RGcFlVbTlpTWxFMlNVVXhiR1JIYUhaYVJITm5ZMGRHTUdGRWIyZGpNMUo1WVZjMWJrOTVRbmxhV0VZeFlWaEtiRkZZVmpCaFJEZzJTVWRLZG1JeWVHeFpWelJuWmtOQ01XSnRVbXhhYld4MVdsZFJOMGxIVW1oa1IwVXZUMmxDYUdKdWEyZG1RMEl4WW0xU2JGcHRiSFZhVjFFM1NVaEtiR042Y0doaWJtdzVUekY0WTJKc2VHTmliSGRwWmxka2JHSnRWbmxaV0ZKc1ZXMDVNV1JIVm5wV1NHeDNXbGhOYjFwVGJEZGlSMVl3U1VoUk9WaERTbU5KYW5SNVdsaFNNV050TkdkVU1rcHhXbGRPTUV4dFZuVmtTRXB3V2xoTmIxcFRhM1ZhYlRsNVVsZEdhbUZEWjI5TFJuUnNURWhLWkV0VU1DdGxNMUZ5VUZkQ1kxaEhOV3hsU0VKMlkyNVJaMlJJYkhkYVUwSlZTa2gwYkV4dVVuWldXRUozV2xoS1JGbFlUbXhMUTJ3NVZXMDVNV1JIVm5wSlJEQm5WVzA1TVdSSFZXdGxNMGwxWVcwNWNHSnBhR05KYVVJNFNVWktkbVJZVW14WVEwbHdabFIwWjJaVGEzQk1TRkk1V2pKV2RWcFlTbWhrUjFaVFlqTldNRnBXVWxSTFIxVnpaRU5zTjJKSFZqQkpTRWs1V1VkV05HTkhPWGxrUTBJd1pWaENiRWxHVWxOaU0xWXdXbE5TTjFwWU1VcGlia0l4WkVOQk9VbERVamRrUjJod1kzazFibHBZVWtWWldGSm9Wa2hzZDFwV1VsUkxTRkYxWTIxV2VHUlhiSGxhVjFFdlRHMUtkbHBJYTNCbVZIUmpXRWMxWjA4elNteGtTRlo1WW1sQ2VVdDZNV2RhV0doM1lqTktNRWxJVWpWalIxVm5Wa1pLZG1SWVVteEtTSFJzWmxVNU1XUklRakZrUTBFNVNVTlNOMlJIYUhCamVUVnVXbGMxYkdOdFJqQmFWVGt4WkVoQ01XUkdValZqUjFaVlZYbG9NRXh1U214ak0wSjJZbTVPYkV0WU1EZFlSbmgxV1VONGVVdDZNV2RZUm5oMVdsaG9kMkl6U2pCSlNGSTFZMGRWWjFWdE9URmtSMVZyWlRKV09VbEVNR2RsTVhoalltbEJaMGxEUW5WWlZ6RnNUMmxDWTBscFVqZGFXREZqU1dwMFkxaEhOR2RKUTBGbllsZFdNR0ZIT1d0UGFVSk9XbGhTYjJJeVVYVktTSFF3VEcweGJHUkhhSFphU0RBM1dFWjRkVWxEUVdkSlNFSm9aRWRuTmtsR2QybEtTSFF3VEc1Q2FHUkhhRGxZUTBrM1dFWjRkVWxEUVdkSlNFcHNZMWhXY0dOdFZrSmtXRkp2VDJsQmEyVXpVWFZaV0ZZd1lVZ3dOMWhHZUhWSlEwRm5TVU5TTjJSRE5YbGFXRVl4WVZoS2JGcEVPSFZaYlRsclpWUTVaMXBIUmpCWlZHOW5Wa1pLZG1SWVVteEtTSFJzWmxWc2RXTklWakJaUkhCbldrZEdNRmxVT0RaSlJsSlRZak5XTUZwVFVqZGFXREZLWW01Q01XUkhRamxZUm5oMVNVTkJaMGxJU214amVtOW5Wa1pLZG1SWVVteEtTSFJzWmxVNU1XUklRakZrUkhSaldFYzFPVTh4ZUdOaWJWWTBZMGM1ZVdSRFFtcGlNalY2WkVOQ2JscFlVbE5hV0VZeFdsaE9NRXBJZEd4bVUwRTVTVU5uYTJVelVYVmpiVlo0WkZkc2VWcFhVUzlNYlVwMldraHJMMWxIVW1oa1IwVTJTVVpLZG1SWVVteEtTSFJzWmxaMFkwbHRVbWhrUjBaalNXd3haMDlzZDJsWVEwbzVTMVJ2WjFReU1YQmtSSGhUWWpOV01GcFRVamRhV0RCelNVWjNhV050Vm5wWVEwa3JTVVF3SzBsRGFEZFlSbmgxU1VOQlowbEhOV2hpVjFVMlNVWjNhVXBJZEd4bVZuZHBURVo0WTJKcFFXZEpRMEowV2xoU2IySXlVVFpKUlRGc1pFZG9kbHBETkd0bE0xRjFZbGRXTUdGSE9XdG1VM2hqV0VjMFowbERRV2RqUjBZd1lVUnZaMWhEU1d0bE0xRjFZMGRHTUdGSU1XTkphWGhqV0VjMFowbERRV2RqYlZaNFpGZHNlVnBWUmpGa1IyYzJTVU5TTjJSRE5XaGtXRkp2WmxONFkxaEhOR2RKUTBGblNraDBNRXh1U214aldGWndZMjFXYTFCNU5XbGlNbEkxVURGM2FWcEhSakJaVTNoalNXcHdZMGxzZDJsbVZuaGpZbTR3Y0U4eGVHTmliSGhqWW0xQmMyTnVNVzVhV0ZKRldWaFNhRlpJYkhkYVZsSlVTMGRWY0dVelNteGtTRlo1WW1sQ2JGQXhkMmxaYlRsMllrZFdhR0pzZDJsUVZERXdaVmhDYkdJeVdXZGFWRGxqU1cxR2RXVldkMmxQYmxKdllWaE5kVm95Vm5WYVdFcG9aRWRXU21KdVFqRmtSbEkxWTBkV1ZWVjVhR3hMVkc5dVZXMDVNV1JIVm1KWVEwcHJXVmhTYUZoRFNtUktNekZ1V2xjMWJHTnRSakJhVld4MVkwaFdNRlpJYkhkYVZsSlVTMGRWY0dVeWVHeGtRMEl3VUZaM2FXVXhkMmxQTTBwc1pFaFdlV0pwUWxCWmJYQnNXVE5SZFZwWE5UQmpiV3hzWTNsb2JFdFROVzFpTTBwR1dWZE9iMHREWjI5WE1sVnpZMnd3Y0ZCVU5UZGhWMWx2V0VOS1psZ3pTbXhqV0Zad1kyMVdhMWd4T1dOSmFVVTVVRmRWY0dNelpIQmtSMDV2UzBObmQweEhSWFZhTWxZd1ZVaEtkbU5IVm5sa1NHeFZaVmhDYkV0VGFIbExVMnczV1RKR2VscFRRbnBNYkVKNVlqTkNiR051VWpWV1NHeDNXbE0xUTFGV1RrWlBibEZ5VUZkQ1kxaEhOV05ZU0ZKaldFaFJhMlV5VmpsS1NIUjVUR3c1Wm1OdFZuaGtWMng1V2xkU1psaDZPV05KYW5CalNXcHdZMGxxT0RaWVEwbzVTa2gwZVV4c09XWmlibFp6WWtkR2FXSkhWbVpZZWpsalNXbENkV1JYZUhOSlNIaGpTV3B3WTBsc2QybG1VMEZyWlROSmRWZ3hPVEJsV0VKc1dERTVPVTh5UVRkWmJrcHNXVmR6TjFreVJucGFVMEo2VEd4Q2VXSXpRbXhqYmxJMVZraHNkMXBUTlVKVmJFcENWMVJ3TUV0Nk1XZFlSbmgxV0VaNE1GaEdlREJLU0hSc1psTlNOMGxVUldoUVZERjVUR3c1Wm1OdFZuaGtWMng1V2xkU1psaDZPV05KYW5CalNXcHdZMGxxT0RaWVEwbzVTVU5TTjJSSGFIQmplVFZ1V2xjMWJHTnRSakJhVld4MVkwaFdNRlpJYkhkYVZsSlVTMGhKZFZneE9XaGpia3BvWlZZNVprdFlNV0pZVkhSblR6SktlVnBYUm5KUE1rNW9ZekpWWjJONU5WRmpiVGwzV2xoS01HVldValZqUjFWMVZEQktTMUpWVGxWUGJsRnlVRmRDWTFoSE5XTllTRkpqV0VoUmEyVXlWamxLU0hOb1RWTkZPVkJZU1hWWU1UbDVXbGhHTVdGWVNteGFSamxtVURGM2FVOXNkMmxQYkhkcFVIcHdZMGx1TUd0bE0wbDFXREU1ZFdSWGVITlpWMHB6V2xZNVpsQXhkMmxKUnpVeFlrZDNaMlpHZDJsUGJIZHBXRU5LT1VsRFVqZGtSMmh3WTNrMWJscFhOV3hqYlVZd1dsVnNkV05JVmpCV1NHeDNXbFpTVkV0SVNYQm1WSFJuWmxnd2NFdFRlREJMZWpGalNXeDRZMkpzZUdOa1NERmpTV2w0TUdaWFpHeGliVlo1V1ZoU2JGUXpWakJqU0ZZd1ZraHNkMXBXVWxSTFIxVndaVEpzYlV0RFJteExXRXBzWkVoV2VXSnNkMmxaVnpVMVdFTkpOMkpIVmpCSlNGRTVXRU5LTjFoRFNUZGpiVll3WkZoS2RVbEZPV2xoYlZacVpFTTFiR0p1VW5saFYxWjZTMGRWY0V4dFduWmphMVpvV1RKbmIwdERhR0phVTNoNVdGTnJPVkJ1ZEhCYWFXaGpTV3c1Wm1OdFZuaGtWMng1V2xkU1psZ3hkMmxKVkRBNVdsTnNlbVF5YkRCWk1tZHZTMFJCYzFsVE5XNWFXRkpSWTIwNWQxcFlTakJsVmxJMVkwZFZjRXRJU1hCTFdIUnFXVmhPYkVsSVRYVlZTRXAyWTBkV2VXUkliRlZsV0VKc1RHdEtRbFV3VlRaa1EzTTVXVVo0WTJKc2VHTmtSbmhqWkVOU04xcFlNR3RsTTBsMVdERTVlVnBZUmpGaFdFcHNXa1k1WmxBeGQybFBiSGRwVDJ4M2FWQjZjR05KYmpCclpUTkpkVmd4T1hWa1YzaHpXVmRLYzFwV09XWlFNWGRwU1VjMU1XSkhkMmRtUm5kcFQyeDNhVmhEU2psSlExSTNZMmsxWmxnelVqVmpSMVptV0RNd04xbEVkR2xqYlZab1lYcDBhbGxZVG14SlNFMTFWVWhLZG1OSFZubGtTR3hWWlZoQ2JFeHJSbE5WYTBaYVQyNVJjbEJYUW1OWVJ6VmpXRWhTWTFoSVVXdGxNbFk1U2toemFFMVRSVGxRV0VsMVdERTVlVnBZUmpGaFdFcHNXa1k1WmxBeGQybFBiSGRwVDJ4M2FWQjZjR05KYmpCblNraDBNR0ZIYkhwTWJXUnNZbTFXZVZsWVVteFVNMVl3WTBoV01GWkliSGRhVmxKVVMwaEpkVmd4T1doamJrcG9aVlk1Wmt0WU1XSllWSFJuVHpKS2VWcFhSbkpQTWs1b1l6SlZaMk41TlZGamJUbDNXbGhLTUdWV1VqVmpSMVYxVkRCS1MxSlZUbFZQYmxGeVVGZENZMWhITldOWVNGSmpXRWhSYTJVeVZqbEtTSE5vVFZORk9WQllTWFZZTVRsNVdsaEdNV0ZZU214YVJqbG1VREYzYVU5c2QybFBiSGRwVUhwd1kwbHVNR3RsTTBsMVdERTVkV1JYZUhOWlYwcHpXbFk1WmxBeGQybEpSelV4WWtkM1oyWkdkMmxQYkhkcFdFTktPVWxEVWpka1IyaHdZM2sxYmxwWE5XeGpiVVl3V2xVNU1XUklRakZrUmxJMVkwZFdWVlY1YUhsTFdEQTNXVWd4T1V0VGEzTmtRM001V0VOS1kxaEhOV05ZU0ZJNVdFTkpjMlJJTVROamJXd3dXbFZHZDJGV1NteGFNbXg2WkVkV2VWWkhPVWRoVjNoc1MwZFZjR1V5T0hWYVIxWnRXVmhXYzJSRE5UTmpiV3d3V2xWYWNHSkhWVzlqU0VwMldUSldlbU41Tld4aWJsbDFVVlpTU0ZKVk5XWldSbXhSVWxaT1psSnJPVTFTUlZaVFZVVkdWVk5EZEdOSmFUbG9ZMGRyZFZwRE5UQmpNWGRwVEVkVmNHWllNVEJNYTBaM1lWVmtiR0p0Vm5sWldGSjJZMm94TVdaVGQzaE9lbXMyUzBkVmMyUkRhemxRYm5SUVdXMXdiRmt6VVhWYVIxWnRZVmMxYkZWSVNuWmpSMVo1WkVocmIyUkRlR05KYkRsbVdsaE9UbUl5VWpGaVIxWmpTV2w0TjJSdFJuTmtWMVUyU1ZSQ09VdFRlREJNYkZJMVkwZFdlbFZ0Vm01aFdFNHdXbGhKT1dSdE9YQmFRMEYzVHpKT2MxbFlUbnBKU0VvM1l6TlNhR1JIYkdwSlIyeDFZek5TYUdKdFRteFFWelZzWkhsQ2VVOHlWblZrVnpGNlR6Sk9kbUp1VGpCamJsWnFaRWM1ZVV0RGJEZGtSMmh3WTNrMWJHSnVWblJqZWpGMVdsaGpaMVJYUm5kbVdFNHdXVmhTY0ZsNVFtNWFXRkpLWW01T01GbFhOV3BhVTJkd1pUTktiR1JJVm5saWFVSjVURzFzZFdNelVtaGliVTVzWmxoS2JGb3liSHBrUjFaNVVsYzFNV0pUYUd4TVNGRndaVE5TYjJGWVRYVmFWelV4WWxoTmRXTXlWakJMUjFWelpFTnNPV1pZVVhWV1NHeDNXbGhPVTFwWFpIQmpNMUpzWTJveGVXWlRkekJQUkZVMlMwZFZjMlJEYXpsUWJuUlFXVzF3YkZrelVYVmFSMVp0WVZjMWJGVklTblpqUjFaNVpFaHJiMlJEZUdOSmJEbG1XbGhPVG1JeVVqRmlSMVpqU1dsNE4yUnRSbk5rVjFVMlNWUkNPVXRUZURCTWEyeDFaRzFHYzJGWFVsTmFXRVl4V2xoT01GSllTbmxpTTBrNVpHMDVjRnBEUVhkUE1rNXpXVmhPZWtsSVNXZGFXR2d3V2xjMWEyTjVRa1pqYmtwMlkyNTBhbUl5VW14UVZGRjNUVVIwZVZwWGVHaGtSMVpyVWtkR01GbFVkSFJhV0U1NldWZGtiRTh5VG5aaWJrNHdZMjVXYW1SSE9YbExSMVZ6WkVOc04yTXpWbmRhV0VsdldsTnJjMlJIYUhCamVUVjFXVmN4YkZCV2QybFRWelV5V1ZkNGNGcEdXbWhpU0Zac1dFTkpjMlJIYUhCamVUVnRZak5LZEZsWVVrNWFXRTU2V1Zka2JFdEhWWE5rUTJ0elpFZG9jR041TlhsYVYzaG9aRWRXYTFKSFJqQlpWREV3WmxkYWRtTnRNV2hrUlRGc1l6Tk9hRm95Vlc5YVUzZ3dTMWgwTUdGSGJIcE1iVEZzWXpOT2FGb3lWVGxaUlVwb1drTkNVMXBZUmpGYVdFNHdTVVJ2WjBwSWRHeG1WbmhqWW14NFkyUkdRbmxpTTFwd1drZFdhMGxGVm5samJUbDVTVVZTYUdSSFJXZFBiSGhqWW14NFkyUkdlR05rUTFJM1UyeE9VRlJwTlhwa1NFcHdZbTFrY0ZwdWEyOWtRM2d5WWpKc2EwbEVRWE5OYVd3NVdFWjRkVmxJTVRsa1F6VktZbTVhYUdKSGJHdFZiVlo0WkZkV2VtUkZWbmxqYlRsNVVGaEtPVXhFV1RGTlJHOXZXbE40TUV4SVNYQlFWRFUzVkRKS2NWcFhUakJNYlZKc1dtMXNkVnBXUW5saU0wSnNZMjVTTlV0SVVYTllRMHBtV0RKV2VsUlhPV3RrVjNoc1dFTkpjMlV6V21oaVNGWnNUMmxGZDJaVGEzTmtRelZ1V2xoU1VXTnRPWGRhV0Vvd1pWWlNOV05IVlRsa1F6VjVZak5XTUZwVU1USmlNbXhyU1VSQk4xa3lPWFZqTTFGblltb3hlVXRFVVRWTmFXdHpZbm94ZVV0RVVUQk5hV3R6WTNveGVVdEVVVFJPVTJ0eldWUXhlVXRFVlhkT2VXczNXbTVXZFZrelVuQmlNalJuWVZOb2JFeElVWEJsTWxwMlkybG9jMXBZVW1KamFYaDJXRmM1YlVsRk9XbGhiVlpxWkVNMWJHSnVVbmxoVjFaNlMwZFZjRXRZVGpOaFdGSnFZVU5vTVV0SE9IQkxXSFJxV1ZoT2JFbEhOSFZWU0VwMlkwZFdlV1JJYkZWbFdFSnNUR3RLUWxVd1ZUWmhWMWx2U1ZoU1ltTnNNRzFLYVVaMlRHdzVabU50Vm5oa1YyeDVXbGRTWmxoNWJHbGpiVlpvWVhwMGNGcHBhREJsV0VKc1lqSlpaMlJHZEhsWVUwVTVVRmM0ZFZneE9UQmxXRUpzV0RFNGNHTnRWakJrV0VwMVNWUkZOMWx1U214WlYzTTNXVEpHZWxwVFFuVk1iRUo1WWpOQ2JHTnVValZXU0d4M1dsTTFRbFZzU2tKWFZIQndXbWxuYUdSR2RIbFlVMWx0WW5rMVpsZ3pTbXhqV0Zad1kyMVdhMWd4T0hCamJWWXdaRmhLZFVsVVJUZGhWMWx2WkVaMGVWaFRiRzFpTTBsdllrZFdNRWxIVldkaU1sbG5aRVowZVZoVGJIQmFhV2RvWVZOb2RreHNPV1paV0VwNVdWaHNabGg1ZUd4TFUyeDVXbGhTTVdOdE5HaE5WSFJwWTIxV2FHRjZkR3BaV0U1c1NVYzBkVlZJU25aalIxWjVaRWhzVldWWVFteE1hemxEVTJ0V1JGWkVjSEJhYVdkb1pFWjBlVmhUV1cxSlZ6aDFXREU1ZVZwWVJqRmhXRXBzV2tZNVprdFhTbmxhVjBaeVR6SnNiVXREUmpCWE0wcGtaa2gzYUdGVGFIWk1TRkppWTJ3d2NFdFlTbXhrU0ZaNVltbEZlR1pZU214a1NGWjVZbWxGZDJaWFdqRmliVTR3WVZjNWRVbElWVzlhVTJ3M1dUSTVkV016VVdka1JERlFXVzF3YkZrelVYVmhNbFkxWTNsb2JFdFVkSGxhV0ZJeFkyMDBaMlJETlhOYVZ6VnVaRWRuSzFCVVJXMUtibEYxWWtkV2RWb3pVbTlRUkRCNlNtbGFNRXh0YkhWWk1uZ3hXa2RXZWt0R2QybFlNVGt3WlZoQ2JGZ3hPV05KYVd0dFNtNVJkVnBZV214amJtdHZTMGRWT1ZCc2RHTkpiRGxtWkVoc2QxcFdPV1pZUTBseldFTktabGd6U214aldGWndZMjFXYTFneE9XTkphWGhqU1d3NVptSnVWbk5pUjBacFlrZFdabGd4ZDJsWVV6VndZbTFPYzJSWFVteGplV2hzUzFOcmNGQXlOSFZWU0VwMlkwZFdlV1JJYkZWbFdFSnNUR3RLUWxVd1ZUWmtRelZ6V2xjMWJtUkhaeXRRVkVWdFNtNVJkV0pIVm5WYU0xSnZVRVF3ZWtwcFdqQk1iV3gxV1RKNE1WcEhWbnBMUm5kcFdERTVhR051U21obFZqbG1XRU5KY0VwcFdqQk1iVll5V2xoS05VdERhR3hRVkRWaVdFTktabGd5Um5samJVWTFXREU1WTBscGVHTkpiRGxtWTIxV2VHUlhiSGxhVjFKbVdERjNhVXhHZDJsWU1UbDFaRmQ0YzFsWFNuTmFWamxtV0VOS1pFeHRiSFZaTW5neFdrZFdla3RIVlhCTFUyc3ZZbWsxVVdOdE9YZGFXRW93WlZaU05XTkhWWFZSVmtwVFVWWnJObUpwTlZGamJUbDNXbGhLTUdWV1VqVmpSMVYxVkRCS1MxSlZUbFZtV0ZGMVkyMDVNV1JIVlRsYWJsWjFXVE5TY0dJeU5HOWxNalZvWWxkVk5scFRlSFJhV0ZKdllqSlJObVJEZUhkWldGSnZUMjVKYzFsWVZqQmhSSEIxVEVoS2JHTllWbkJqYlZaclQyNVZjMk50Vm5walJ6bDFZekpWTm1OSU1IQmxNMHBzWkVoV2VXSnBRbWhNYTFZMFkwaEtiR016VGxGamJUa3lZVmRTYkdOcE5YTmlNbVJ1V2xoSmRXSkhPVzVMUjBKRVkyMVdhR1JIVldkS1NIUXdabFJ2YTJVelNqbEpTRXAyWkZoU2JFbElaSEJrUjJkbldWaFdNR0ZFYjJ0bE1qVTVXVU5yYzJKNU5VSmpSMnhJV2xjMWJHTnRSakJpTTBsMVdqSldNRk5YTlhwa1IwWjFXVEpWYjB0VE5YbGFWMlJ3WXpOU2JHTnNTblprV0ZKc1MwZFdPR1pIV2pGaWJVNHdZVmM1ZFV0SFZYQmxNMHBzWkVoV2VXSnBhR05KYVRsalNXb3dPVkJYVm1KTlJqQXZXbE0xZW1SWFNucGtTRXB3WW0xamIwMVRlR3hNYlhoc1ltMWtNR0ZEYXpaYVUydDFZMjFXZDJKSFJtcGFVMmQyV0VaM2RrOXNkR2hNV0hCQ1RGWndaRXN4ZUdOTWVUaHpXRU5KZGxoRFNYQk1iazUzWWtkc01FdEdkMmxNTVhkcFMxTTFlVnBYVWpGWk1sVnZTME5vYkV4SVVYQlFWRFZzU3pOU1lrMUdNSFZrUnpsV1kwaENiR05yVG1oak1sVnZTMU4wTUV4dVRqRlpiazR3WTIxc2RWcDVaM2hNU0ZGMVlrZFdkVm96VW05TFUydHpXRU5LWTBscGJEbExTRWx3VEVoMGRGcFlVbTlpTWxFMlpFTjRkMWxZVW05UGJrbHpXVmhXTUdGRWNIVk1TRXBzWTFoV2NHTnRWbXRQYmxWelkyMVdlbU5IT1hWak1sVTJZMGd3Y0V4SFdqRmliVTR3WVZjNWRVdEhWWE5pZVhoM1MxaDBhbUl5Tlhwa1EwSnJVRmRHZW1WWE5XcExSMVZ6WkVOck9WQnVkREJqYm13M1lWZFpiMlJUYkRkaFYxbHZaRk0xYVdJeVVqVkthVnBqU1d0a1JsWkdkMmxRVkRBNVdsTTFkRnBZVW05aU1sRndaVEpPZG1KdVRqQkpTRkU1V2xNMWVHUlhWbmxsVXpWbVdrZEdNRmxVZEhCYWFXZG9aRU5zTUdGSVNuWmtlVUoxV2xoaloyTjVOVXBpYmxwb1lrZHNhMVZ0Vm5oa1YxWjZaRVZXZVdOdE9YbExSbmRwVkcwNFoxcEhSakJaVTBKdFlqTkpaMWx0T1d0bFUwSXpZVmhTYjBsRlpFWldRMEo1V2xoR01WcFlUakJNYkhkcFRFaDBhV0l5VWpWUGJWVjFZMWhXYkdOdWEzVllNbEpvWkVkR09VdFVkSEJhYVdoalNXNU9NR050YkhWYU1YZHBTVlF4TUdWWVFteGlNbGxuWkVOc01HRklTblprZVVKMVdsaGpaMk41TlVwaWJscG9Za2RzYTFWdFZuaGtWMVo2WkVWV2VXTnRPWGxMUm5kcFVrZEdNRmxUUWpCbFdFSnNTVWRzZWtsSGJIVmtiVVp6WVZkUmRWaERTWE5sTWtwMldraHJObHBUTlhoa1YxWjVaVk0xWmxwSFJqQlpXREJ3VHpKVmRWbHRPV3RsVkRGTFZUQTVUMHh1UW1oamJrNXNTMGhSY0daVFJtMWtWelZxWkVkc2RtSnBhR3hNU0ZGd1pUSnNiVXRIVlhWWmJUbHJaVk5aYlV0R2QybFpiVGwyWWtkV2FHSnNkMmxRVkRFd1pWaENiR0l5V1dkYVV6VnBZakpTTlVwcFdXaFVNa3B4V2xkT01FeHRkR3hsV0UxdlpFTTFhV0l5VWpWTFV6VnpXbGMxYm1SSGFEaG1SbmRwV1cwNWRtSkhWbWhpYkhkcFNWUXhNR1ZZUW14aU1sbG5XbE0xYVdJeVVqVkthVmxvWVZOb2JFeHRTblphU0d0elpFTTFhV0l5VWpWTFUydHdaRWRvZVdJelkyZGliVll6U1VoTmRWTlhOVEpaVjNod1drWktiR05ZVm14ak0xSkdZMjVLZG1OcGFHTkphelYyU1VkS2RscElhMmRpTTBsbldXMDVhMlZUUWpCamJsWnFaRWhXZVZwVFFuQmplVUp3WW01YWFHSkhiR3RNYkhkcFRFaDBhV0l5VWpWUGJsRjFXVzA1YTJWWU1IQm1VMmd4VEVkVmNHWlhUblppYms0d1NVaEpPVmxZWkdoaFdGRm5ZME0xTWxsWGVERmFVMmhzVEVoUmNFOHlSWFZTV0doM1kyMVdlbU14UW5saU0xcHdXa2RXZVV4dVRteGliVkpGV1ZoU2FFdElVWE5qYVd3NVdUSkdNRmt5WjI5YVUydzNXVk0xUm1WSVFubGFXRTU2VlVoS2RtUnRiR3RhV0VsMVl6SldkVnBGVm5samJUbDVTMGhSYzFwVGJEbG1VM2htVUZkRmRWSllhSGRqYlZaNll6RkNlV0l6V25CYVIxWjVURzFrYkdSRmJIVmpNMUpvWW0xT2JFdERhemRpYWpsbVRHMWtiR1JGUm5kalEyZHdWek5TWkV0SVNYTlllVFV6WVZoU2IxRllWakJoUTNoclMxUndhRXhyVmpSalNFcHNZek5PVVdOdE9USmhWMUpzWTJrMWJscFlVa3BpYms0d1dWYzFhbHBUWjNCTWJXUnNaRVZHZDJORFozQlhNMUprUzBoSmMxcERiRGxtVTNnd1RHMWtiR1JHUW5saU0wSnNZMjVTTlZaSWJIZGFWREV4WmxOM01VMUVZelpMUjFWelpFTnJPVkJ1ZEZCWmJYQnNXVE5SZFZwSFZtMWhWelZzVlVoS2RtTkhWbmxrU0d0dlpFTjRZMGxzT1daYVdFNU9ZakpTTVdKSFZtTkphWGczWkcxR2MyUlhWVFpKVkVJNVMxTjRNRXhyVmpSalNFcHNZek5PVVdOdE9USmhWMUpzWTJveE1tSXliR3RKUkVFM1dUSjRhR016VFdkamJuUjZaRWRHTUdGWFRXZGhWelY2WkVkR2RWa3lWVGxpYlZZelNVaEpOMk16VW1oa1IyeHFTVWQ0ZGxveVpHeGphblJvWTBoQk4xbFlWakJoUjFaMVpFZHNhbGxZVW14UE1rNTJZbTVPTUdOdVZtcGtSemw1UzBOc04yWllUakJaV0ZKd1dYbENlbHBZVWsxaU1tUnVXbGhKYjFwVGJEZGphVFZ6WWpKa2JscFlTVGxhV0RGNldsaFNRbU5JUVc5YVUydzNZMmsxYzJJeVpHNWFXRWwxWWtjNWJrdEdkMmxTV0doM1kyMVdlbU41UWxGamJUa3lZVmRTYkdOcFFrSmpTRUZuVlRKV01FbEROSFZNYkhkcFMxTjRNR0ZIYkhwTWJVWjNZMFF4YkdaWVRteGtSVVl4WkVkb1RtRlhVbXRpUjFZeldWaEtiRXRIVlhCbE0wbDFZa2M1YmxveVZubE1iWGgyV25sb1kwbHJWalJqU0Vwc1l6Tk5aMVZJU25aa2JXeHJXbGhKWjFGWVZqQmhRMEpVV2xoUloweHBOSFZZUTBsd1RFaFNiMkZZVFhWWldGWXdZVWRXZFdSSGJHcFpXRkpzVUZkV09Wb3lWakJKU0dSd1pFZG9RbVJZVW05TFEydzNZMjFXTUdSWVNuVkpTRkp2WVZoTmRWbFlWakJoUjFaMVpFZHNhbGxZVW14bVYyUnNaRVZHZDJORFozQmxNMHBzWkVoV2VXSnBRakJoUjJ4NlRHMUdkMk5JTVhwa1IwWXdZVmROWjFveVZqQlRWelY2WkVkR2RWa3lWVzlMV0hSNVdsaFNNV050TkdkamFUVndZbTVPTUZsWE5XcGFXREY2WkVkR01HRlhUV2RqTWxaMVdrVlNhR1JIUlc5YVUzZ3dTMWgwZVV4dGVIWmFNbVJzWTJrMWMySXlZMjlaUTFJM1dsTTFlVnBZUlhWalIwWXdZVWd3WjA5cFFXdGxNSEJVVkRBMGRXTXpVbmxoVnpWdVlWZGFOVXRJVVhCbVYwRndURWRWZFdNelVtaGtTRlo2UzBSSmQwMURhM1ZoYms1MlltbG9NRXRZTVhwa1IwWXdZVmROWjJNeVZuVmFSbEpzWlVoUmIxcFRlREJMV0hSc1RHNU9NRmxZVWpGamVXZDVUVVJCY0V4dVRteGliVkZ2WkVOc09XTXpVbWhrUjJ4cVNVaE9iR0p0VWtaamJrcDJZMmxvYkV4SVVYQmxNMGwxWWtjNWJsb3lWbmxNYlZaNVkyMDVlVlF5U25GYVYwNHdTMGhSY0V4SFZYVmpNMUpvWkVoV2VrdElVWFZaTWpscldsTnJkV0Z1VG5aaWFXZzNXbGhLZVdJelNUWmtTREJ3WmxneE1FeHJWalJqU0Vwc1l6Tk9VV050T1RKaFYxSnNZMm94ZVdaVGR6QlBWRWsyV201V2RWa3pVbkJpTWpSdldsTjRNRXhJU1hCbE0xcG9ZMmxDZFZCWVVtOWhXRTF0U201U2IyRllUWFZZTVRscVkyMVdhR1JIVmtOaFZ6VnJZVmMxYm1aSWQyOVVNa3B4V2xkT01FeHRUbmxhVjBZd1dsUTViV1JYTldwa1IyeDJZbWxvYkV4SVVYTmphWGgxUzFoME1tSXliR3RKUkVFNVVGUXhkVXBwV1c5aWFqRjVTMVIwTWxsWVNXZGllakZRV1cxd2JGa3pVWFZhTWxZd1ZETmtkVlZJU25aalIxWjVaRWhzUlZwWVRtcGpiV3gzWkVjNWVVdElVWE5qYVdzM1lubFpiVWxUYUdOSmJXUnNaRVozYVdGWE5HZGllamhvWkVNMVpsZ3lWbnBVVnpsclpGZDRiRTl0T0hWa00wcHdaRWRHYVdKSFZqaG1SemgxV1RJNWRWcHRiRzVrV0Vwb1dXMTRiRXRZZURoTFJ6ZzVaVEpXZFdSWE1XeGpiVVpwWWtkVk5rbFVRWE5hTWxZd1QyMWFNV0p0VGpCaFZ6bDFTME5zTjJOdFZqQmtXRXAxU1VoU1ltTnNNVGxtVTJ0elZESktjVnBYVGpCTWJWSnNXbTFzZFZwV1FubGlNMEpzWTI1U05VdEhWWE5pYVhoMlMxZ3dObHB1Vm5WWk0xSndZakkwYjFwVGVEQk1TRWx6WW1sc04yUnRPWEJhUTBGM1VGUXdPV0pwV1cxTFJ6UTVZMmxyYzFwV2RIVllWREV3VnpOS1pHWlRhM05pZWpFd1lVZHNla3BwV2pCaFIyeDZUR3c1WmxwWWFIZGlNMG93VlROU2FHTnVlRGhhYmxaMVdUTlNjR0l5Tkc5YVUzZ3dTMWgwYldJelNXOWtiVVo1U1VoSloyRlhOR2RhVTJ4alNXMVNiRnB0UmpGaVNGSmpTV293T1ZCWVNqaG1SVGxwWVcxV2FtUkROWGRqYlRrd1lqTlNOV05IVlhWaFIwWjZWRE5rZFZWSVNuWmpSMVo1WkVocmRWa3lSbk5pUTJnd1RFaEpjR1pJZUhWTFNGRnpXbE40ZVV0WU1EZFVNa3B4V2xkT01FeHRVbXhhYld4MVdsWkNlV0l6UW14amJsSTFTMGhSYzFoRFNtWllNbFo2VkZjNWEyUlhlR3hZUTBselpUTmFhR0pJVm14UGFVVjNabE5yYzJKNWFIbExSRkV3VFdscmMyUkRhM05pZVdoNVMwUkZNMDlUYTNOa1EydHpZbmxvZVV0RVVUUk9VMnR6WkVOcmMySjVhSGxMUkZWM1RubHJjMlJEYTNOaWVXaDVTMFJaTVUxRGEzTmtRMnc1VEVSSk5VMXFjR3hRVkRVM1dsTTFiR1ZJUW5aamJsSjZVRmhLYkdOWVZuQmpiVlZ2V0VOS2JXTjVPWGRqYlRsMFlWaE9iR014ZDJsTFdERTVURWhST1dVek1EZGpiVll3WkZoS2RVbEhXakZpYlU0d1lWYzVkVWxJU1c5aWFXdzNaRzFHZVVsSE9EbGtSblIxV0ZSMGNGcHBhREppTW14clNVUkJhRkJVTVhaTFdFcHNaRWhXZVdKcFFuWk1iVlkwWTBjNWVXUklUVGRrYlVaNVNVaE5PV1JHZEhWWVZERTNXbGhvZDJJelNqQmplbkEzWmxnd04yTnRWakJrV0VwMVNVZFdZbUpzTUhWWk1rWnpZa05vZWt4dFZqUmpSemw1WkVoTmMyTjVlSHBNYlZZMFkwYzVlV1JJVFhOamFXdHpZM2sxYkdWSVFuWmpibEo2WmxObk1FOVVTWEJtVTJ0dlMxTnJjRTh4ZUhWTWVUaHFTVWhPZG1SWVNtcGFWVEZvWTBoQ2NHSnRaRlpWYTNjNVdrZEdNRmxVY0doalNFSnpZVmRPYUdSSGJIWmlhVGx4WXpJNWRVOHlUbTlaV0VwNldsaFJPV1JZVW0xTVZHYzNXVzFHZWxwVVdUQk1SMVkxVTJwS1lWZEZjRFpaVm1NMVpGVnNjV0l6Y0UxUk1IQjBXVlprTkdKRmJIRmlNbXhvVm5wV2NsZHNhRzVrVjBaMVZGZHNUVkV3Y0RCWFZtaERaREpHV0U1WE5XcGxWV3N5VTFkMFQxRnNSbFpTV0U1V1RVVmFRMVJYZEU5UmEzaEdWbXRLVWxaVVJrVlVSVlpyVVd4R05sSnJUazFTTW5oRVZWWldSMWxXUmpWbFJsSlNWbFZXTTFWWWJEUmpSa1p5VW10S1dGSlZNWHBXUkVKSFVrZFdSbFJyU2sxU1ZHeERWVlpWTlZKVmVFZFNhMHBTVm14YVJsUkZWbk5SYkVWNFVsaE9hVlpWY0VOVlZscHZVMFY0UjFKclNsSlhSM2hFVlZaT05GVkdSbFpTYkVKU1pWaG9TMVZXVms1T1ZrVjNWVmhPVlUxRldrTldTR3cwVld4R1ZsSnNVazFTVjFKRFZWWldjMU5WZUVaYVJVcFNUVVJDZWxsV1ZrdFJiRVpYWTBWU1RWSnJXa05WVkVwVFVXdDRSMUpyU2xKV01WWjZWa1pXUjFGc1RsWlZXRTVVVmxWYVIxbHRkRXRTVlhoR1ZtdEtVbFp0ZEhwV1JsWkhVV3hPVmxSWVRsUldWVnBVV1d0V1NtTXhSWGRTYkZKVFRVaE9lbFpHVmtkUmJGSlVaVVZ3VFZOSGVFOVZWRVpUVmxWNFNHUkZUbEpXVlRWRFZFVmFUMUZzUlhkU1dFNVdUVVZhUlZWV1RqUldSa1pXVm10S1RWSlVSa05WVm1SSFVrVjRSbFpyU2xKTlJrcEZWRVZrYTFFeFJsWlNiVFZTWlZob1MxVldWa2RUYkVwRVpVVmFVbFpWTlROVlZFSldZekZSZDFKclVsSldWVEY2VjFSQ1IxRnJjM2RUV0U1VFZsVmFRMVZXVms1ak1XdDNVbXRLV2sxRk1YcFhWRUpIVW0xT2NsVllUbHBOUlZwRlZURlZNR014VFhkU2EwcFVUVWRPZWxaRVFrZFJiRlkxWlVWd1VsWlZXa3RWTVU0MFUyeEdWbHBFUWxKaE0yUjZXVEZXUzFGc1JYZGhNMDVWVFVWYVExWkVRbEpqTVVwV1VtdEtXbFpVYUhwV1ZFSkhVMGRXUmxOclVrMVNNRFZEVlZaa1QxSkZlRVpXYTBwU1ZqQTFSVlJGVm10UmJFVjZZVVZPV0ZFemFFMVZWbFpIVkVaS05XVkdRbEpXVlZwUlZsaHNORk5zUmxaU2EzQlRZVmhvUjFWV1ZrZFViRVkxWlVWb1VsWlhUalJWVjNSV1l6Sk5kMU5yU2xKTlIzUjZWVEZXUjFGc1RsWlVXRTVUVmxWYVExVXpiRFJOTVVWM1VtdFNWMUpWVm5wVmFrSkhVV3hTV0ZWWVRsUk5SVnBEVlhwS1ZtTXlUWGRUYTBwU1RWZG9SbFJGVm10UmJFWldUVmQwVFZKWVVrTlZWbFl3WW14R2NHVkVSbEpoTUZwRlZqQldXbU14U1hkU2EwcFZWakZHZWxWNlFrZFJiRTE1WWtWT1RWSkdTa1JWVmxaUFYxVjRSazFWU2xKV1ZFWkZWRVZXVjFGc1JsVmhSVkpOVWxVMVExVlVTbTlTVmtZMVpVVndVbFpWV2sxVVJWWnJVV3hGZDJWRlVrMVNXRkpEVlZaVmQyTXhUbFpTYTFwWFlWaG9TMVZXVmtkVVJYaEdZa1ZLVWxaWVVsaFVSVlpYVVd4R1ZrMVZVazFTV0ZKRFZWWmFWMWRWZUVaa1JVcFNWbGhTU1ZSRlZUVlJiRVpXVDFoS1VtRllhRmRWVmxaUFl6RkZlRkZZVGxOTlJWcERWa1prVW1NeFRYZFNhMHBVVFRBMVJGUkZaR3RSTVVaV1VtMDFVbUpIT1hwVmJGWkhVV3hTVmxSWVRsTk5SVnBGV1ZkMFQxVkZlRVpXYTBwU1ZtMTRVbFJGVmxkUmJFWldUVlp3VFZKcldrTlZWbHBIVWtWNFJtUkZTbEpXV0ZKeVZFVldhMUZzU2xoT1ZWSlVWVE5vU1ZWV1ZrZFViSEJFWlVWNFVsWlZXazFhVmxaS1l6SkpkMU5yU2xKV2VteEVWbFZPTkZOR1JsWlVXRnBTWWxob1JGUkZWakJSYkVaV1l6TmtVbUZZWjNoVlYzUkhVVzFTVmxOdFJrMVNWMUpEVldwT2IxRXhTbFJsUkVaU1lUQmFSVlV5YkRSVGJFWldVbXR3VTJGWWFFZFZWbFpIVkVWNFNXSkZUbEpXVjFKV1ZFVlZOVkZzU25KU2JXaE5VbFJzUTFWV1ZUVlNSWGhHVDFWS1VsWlVhSHBWYkZaSFVXeEdWbFJZVGxaV1ZWcERWbFpXVG1NeFZYZFNhMHBXVFZWR2VsVnFRa2RSYkdSWFZWaE9VMDFGV2tOV1JrNDBWVVpHVmxKc1FsWmxXR2hSVlZaV1QwNUdTa2RWV0U1VFRVVmFRMVpHVGpSV2JFWldWR3RTVWxVemFFZFZWbFpyVTFaS05XUjZRbEpoTUZwRlZUSnNORk5zUmxaU2EzQlVVVE5vUjFWV1ZrZFVSWGhHWkVWS1YwMVdSbnBXUkVKSFZqRkdXRlZZVGxSTlJWcERWWHBDY21NeGEzZFNhMHBhWld0d1JGUkZWWGhSYkVaV1RWVldUVkpyTlVOVlZscEdZekZGZDFKclNsSk5SbFo2Vld4V1IxRnNVbGxWYTA1TlVsaFNRMVZVVGtOU1JrNVVaVVZvVWxaVldrOVVSV1J6VVRGR1ZsSnVRbEpoTWpsNlZrWldSMUpIVW5KVGJrSlNZVmhvVVZWV1ZrZFZSbEp3WlVaS1VsWlZXbE5XYm13MFUwWkdWbEpyTlZOaFdHaFZWVlpXVDJOV1JuQmxSVnBTVmxWYVIxVnViRFJTYkVaV1VtdDRVbVZZYUUxVlZsWlBVakpPUmxOWVRsTk5SVnBEVmtaT05GVkdSbFpTYkVKcFZsVnNlbFpFUWtkU1JsSTFaVWhDVW1Fd1drTldiWFJPWXpGS1ZsSnJTbXBXVlhCRFZFVldWMUZzUmxkU1dFNVVWbFZhUTFVeFZrWmpNVnBXVW10b2FsSldTak5WVjJ3MFUwWkdWbEpyTlUxU2JWSkRWV3hXYjFGcmVFWldhMHBUVFVkb1JWUkZhRTlSTVVaV1ZHdDBUVkpVUmtOVlZsVTBZekpTVm1KRlNsTk5SMmhYVkVWak5WRXhSbFpTYmxwU1lrVkdlbFZxUWtkU1IxWkdVMWhPVkZaVldrTlZNV1J6VVRCNFJsWnJTbEpXYTFaNlZXcENSMVJzWkhCbFJrSlNWbGhvUTFaWGJEUlZSa1pXVW14Q1ZXRllhRk5WVmxaSFZXeE9SR1ZGYUZKV1ZWcHZWakZPTkZaR1JsWlNiRXBOVWxaYVExVldWbGRWVlhoR1ZtdEtVbFpyV2pOVlYydzBWR3hHVmxSWWFGSk5iVkpGVkVWV2ExRnNSbGRVV0U1b1RVVndRMVZXWkRCUk1XUndaVVZhVWxaVldsRlhWazR6VGtaR2NsSnJTbEJTVlhCNFZWaHNORkpzUmxaU2JFSm9UVVV4ZWxWNlFrZFNSMHB5VmxoT2FFMUZjRU5WYWtKVFVqQjRSbFpyU2xOTlIyaHdWRVZrYTFFeFJsWlNiVFZTWWtjNWVsVnNWa2RSYkd0M1ZGaE9VMDFGV2tWWmExWk9ZekZPVmxKclNsUldWMDU2Vld4V1IxRnNUalZsU0doU1lUQmFRMWt4Vmt0VE1IaEhZa1ZLVWxZeFdsaFVSVll3VVd4R1ZtUkljRkpsV0doeFZWWldUazVXUmpaVWEwNU5VbFphUTFWV1ZYZE5Sa1p3WlVaYVVsWlZXbGRWV0d3MFYwWkdWVk5yVG1wU1ZXeDZWa1JDUjA1c1JuSlNXR2hTWVZob1NWVldWa2RVYTNoSlVtdE9VbFpWV2pSVlYzUjJZekZzVmxKclNtRk5SWEJZVkVWV01GRnNSbFprUkZaU1pWaG9ORlZYZEVkU1JUVldWRlJXVW1GWWFFZFZWbFpIVkd0emQxTllUbUZXVlZwSFZtMXdWMUV3ZUVaYVJVcFNWbFJDZWxsNlFrdFJiRVYzWkVWMFRWTkZXa1JWVmxaUFZERkdWR1F6YkZKaE1GcEZWbFpXVG1NeFNsWlNhMHBWVm0xMGVscEdWa3RSYkVWNVZXMUdUVkpXV2tOVlZsVjRZbXhHTldSNlFsSmhNRnBGVlZaa2IxSkZlRVpXYTBwU1ZsUkdkMVZZYkRSaGJFWldWbTVHVW1KWVFrVlVSVlpYVVd4R1ZrMUVRbEpoV0doWFZWWldSMVpzUmpWbFJYaFNWbFUxV0ZSRlpGZFJiRVpZVmxSV1VtRllhRlZWVmxaUFlsVjRTRnBGVGxKV1ZWcDFWVmQwUm1Nd05VWlRhMHBUVmpCd1ExUkZhR3RTUmtaV1ZteEtVbFV6YUZOVlZsWlBZVlpHTldWRldsSldWVnBQVkd0V1NtTXhXbFpTYTBwWFZsVXhlbFY2UWtkUmJGSTFaVWR3VWxaVlduRlVNVlpLWXpGa1ZsSnJTbWhXVld4NldWUkNTMUZzUmpaU2ExSlNWVE5rZVZWWGRFZFNSbVJHVWxoT1RtRXdjRU5WVkVaSFVrVjRSbFpyU2xKV1ZFWmhWRVZvVjFFeFJsWlViWFJZWVZob1IxVldWa2RVYkc5M1ZGaE9UMUpWY0VOVlZFSkhZakZHTldWRldsSldWVnBQV1ZaV1RtTXhhM2RTYTFKcFlUQndlRlZZYkRSU2JFWldVbXMxVDFKVmJIcFdiRlpIVVd4YVZsUllUbFJOUlZwRFZraHNORlZzUmxaU2JGcE5VakExUTFWc2FHOVJNREZXVTFoT1UxWlZXa2xWTUdoclVUQjRTRlJyU2xKV01EVkhWRVZXYTFGc1JYbGxSVTVOVWxSc1ExVldWbk5SYTNoR1ZtdEtVazB4V2tSVVJXUXdVVEZHVmxKc1ZsSlZNMmhIVlZaV1QxVXdlRVpOVlVwU1RVVlpNRlZZYkRSVVJrWldVbXQ0VDJFd01YcFpha0pMVVd4R1dFOVZUbFZSTTJoSlZWWldWMDVHUm5CbFJ6VlNZVEJhUzFaVlZucGpNa2wzVTJ0S1VsWjZiRVJYVjJ3MFUwWkdWbFJxVWxKaFdHaExWVlpXUjFOdFNrWlRXRTVUVmxWYVExVXpiRFJUYkVaVlVXdE9WMUV6YUZGVlZtaDNVVEZHV0ZKWVRsVk5SVnBEVmtSQk1HTXhWbFpTYTBwV1ZtMU9lbFZxUWtkUmJGSldWMWhPVmsxRldrTldWazQwVW14R1ZsSnJXbUZOUld4NlZXeFdSMUZzV2xoVldFNVZWbFZhUlZreWRFNWpNVWwzVW10S2FGWlZiSHBaVmxaTFVXeEdXRk50Y0UxU1ZscERWVlJDUm1NeFZsWlNhMHBXVlROb1MxVldWa2RSYkVZMVpVaENVbUV3V2tOWGFrSkxZbFY0Um1KRlNsSk5NRXBFVkVWV01GRnNSbFpqTTA1VFZsVmFRMVZXWkd0Uk1IaElVbXRLVWxZd1drVlVSVll3VVd4RmVWVnVWbEpsV0doSlZWWldSMVJyZUVkVWEwcFNWbXMxZFZWWWJEUlRiRVpXVkd4c1lWRXphRWRWVmxaSFZFZEZkMU5ZVGxwV1ZWcERWMnhPTkZOc1JsWlNhelZOVWxSc1ExVlljRTlSTWtwR1UxaE9VMVpWV2tOVmVrbDRVVEI0U0ZKclNsSldNVlo2Vm14V1IxRnNaRlJsUlRWU1ZsVXhNbFZYTURGUk1IaEdWbXRLVWxaWVVqSlZWMncwVjJ4R1ZsWnNWazFTVkVaRFZWUkNkbU14VFhkU2EwcFVaVmhvUjFWV1ZrZFJiRTV3WlVkb1VsWlZXbTlWTTJ3MFZHeEdWbFJ0ZEd0aE1ERjZWV3BDUjFGc1VsUmxSbEpTVmxWYVZWZHFRazVqTVUxM1VtdFNWMlZZYUV0VlZsWkhUVVpHZEZWWVRsTldWVnBEVlhwS01GRXdlRWhTYTBwU1YwZDRSRlJGVm5OUmJFWldUVWhPVmxaVldrVlpNRlpQWXpGS1JHVkZlRkpXVlZwTlZHMTBUbU15U1hkVGEwcFNWbnBzUkZkWGJEUlNiRVpXVW10NGFrMUZiSHBYYWtKTFVXeEZlV1ZGVWsxU1ZFWkRWVlJDZG1NeFRYZFNhMHBVWlZob1IxVldWa2RSYkZKd1pVZG9VbFpWV205V1NHdzBWVVpHVmxSdGRHeGhNREY2VldwQ1IxRnNVbFJsUmxKU1ZsVmFWVmRxUWs1ak1VMTNVbXRTVjJWWWFFdFZWbFpIVFVaR2RGVllUbE5XVlZwRFZYcEtNRkV3ZUVoU2EwcFNWMGQ0UkZSRlZuTlJiRVpXVFVoT1ZVMUZXa2RaTUZaUFl6RkdjR1ZGV2xKV1ZWcE5XV3hXU21NeGJGWlNhMHBoVlROb1YxVldWa2RYYTNoR1RWVktVazF0YUVWWmJYUlNZekZOZDFKclNsUmxiSEJGVkVWak5WRXhSbFpTYmxwU1lsVnNlbFpzVmtkVGF6UjNWRzVPVW1GWWFFbFZWbFpIVkd0NFIxSnJTbEpOUlRWRFZFVldWMUZzU1hkYU0yeFNZVmhvTkZWWGRFZFJiVTVXVTJ4V1RWSlhVa05WVkU1M1VUQjRSbUpGU2xKV1dGSkRWRVZXVjFGc1JsWk5TRTVWVmxWYVExWkliRFJVYkVaV1ZHNU9VbUZZYUV0VlZsWkhVMjFLUmxOWVRsTldWVnBEVlROc05GTnNSbFZSYTA1WFVUTm9VVlZXYUhkUk1VWllVbGhPVlUxRldrTldSRUV3WXpGV1ZsSnJTbFpXYlU1NlZXcENSMUZzVWxaWFdFNVdUVVZhUTFaV1RqUlNiRVpXVW10YVlVMUZiSHBWYkZaSFVXeGFXRlZZVGxWV1ZWcEZXVEowVG1NeFNYZFNhMHBvVmxWc2VsbFdWa3RSYkVaWVUyMXdUVkpXV2tOVlZFSkdZekZXVmxKclNsWlZNMmhMVlZaV1IxRnNSalZsU0VKU1lUQmFRMWRxUWt0aVZYaEdZa1ZLVWswd1NrUlVSVll3VVd4R1ZtTXpUbE5XVlZwRFZWWmthMUV3ZUVoU2EwcFNWakJhUlZSRlZqQlJiRVY1Vlc1V1VtVllhRWxWVmxaSFZHdDRSMVJyU2xKV2F6VjFWVmhzTkZOc1JsWlViR3hoVVROb1IxVldWa2RVUjBWM1UxaE9XbFpWV2tOWGJFNDBVMnhHVmxKck5VMVNWR3hEVlZod1QxRXlTa1pUV0U1VFZsVmFRMVY2U1hoUk1IaElVbXRLVWxZeFZucFdiRlpIVVd4a1ZHVkZOVkpXVlRFeVZWY3dNVkV3ZUVaV2EwcFNWbGhTTWxWWGJEUlhiRVpXVm14V1RWSlVSa05WVkVKMll6Rk5kMUpyU2xSbFdHaEhWVlpXUjFGc1RuQmxSMmhTVmxWYWIxVXpiRFJVYkVaV1ZHMTBhMkV3TVhwVmFrSkhVV3hTVkdWR1VsSldWVnBWVjJwQ1RtTXhUWGRTYTFKWFpWaG9TMVZXVmtkTlJrWjBWVmhPVTFaVldrTlZla293VVRCNFNGSnJTbEpYUjNoRVZFVldjMUZzUmxaTlNFNVdWbFZhUlZrd1ZrOWpNVXBFWlVWNFVsWlZXazFhVmxaT1l6Sk9WbE5yU2xKWFJWcEVWbXRPTkZKc1JsWlNhM2hxVFVWc2VsZHFRa3RSYkVWNVRsVlNUVkpVUmtOVlZFSjJZekZOZDFKclNsUmxXR2hIVlZaV1IxRnNVbkJsUjJoU1ZsVmFiMVpJYkRSVlJrWldWRzEwYkdFd01YcFZha0pIVVd4U1ZHVkdVbEpXVlZwVlYycENUbU14VFhkU2ExSlhaVmhvUzFWV1ZrZE5Sa1owVlZoT1UxWlZXa05WZWtvd1VUQjRTRkpyU2xKWFIzaEVWRVZXYzFGc1JsWk5TRTVWVFVWYVIxa3dWazlqTVVad1pVVmFVbFpWV2sxWmJGWktZekZzVmxKclNtRlZNMmhYVlZaV1IxZHJlRVpOVlVwU1RXMW9SVmx0ZEZKak1VMTNVbXRLVkUweWVFVlVSV2hIVVRGR1ZsSnVhRkppUmtaNlZteFdSMU5yT1ZaVWJrNVNZVmhvU1ZWV1ZrZFVhM2hIVW10S1VrMUZOVU5VUlZaWFVXeEpkMkZHY0UxVFJscEVWVlpXUjAxV1JuTmlNMDVUVFVWYVJWUlVRa3BqTVZwV1VtdEtVMlZyU2tWVVJWcFhVV3hHVjFaclVrMVNhMXBEVlZaYVIxSkZlRVppUlVwU1ZsZDRSVlJGYUZkUk1VWldVbXBXVW1GWWFHRlZWbFpIWVVVMGQxUllUbFJXVlZVeFZYcE9ZVkpyZUVoa1JVNU5VbnBzU0ZWVVFtOVJhM2hHVFZWS1VsWXdXbFpVUlZaWFVXeEZkMVZyYkUxU01sSkVWVlpXUjJOR1JqVmxSWEJTVmxWYVMxVnViRFJTYkVaV1ZHNWtVbVZyU2tSVVJWVjRVV3hLVjFWWVRscE5SVnBGVlRGTk5WRXdlRVprUlVwU1ZsaE9lVlZYYkRSVWJFWldVbXhLVFZKWGVFTlZWbFp6VGtaR2NHVkZjRkpXVjFJMVZWZDBNMk15VGxaVGEwcFNUVWQwZWxaRVFrZFJiRkYzV1ROT1UxWlZXa05YVkVKcVl6RlZkMUpyYUd4aE1IQXlWV3RPTkdGR1JsWlNiV2hwVWxaR2VsVnNWa2RSYkd0NlZHdE9UVkpYVWtOVlZFNWhVVEpHUmxSWVRsUk5SVnBEVlROc01GRXdlRVpOVlVwU1ZsUkdNVlZYYkRSVGJFWldVbXR3VTJGWWFFZFZWbFpIVkcxTmQxTllUbFJXVlZwd1ZHcENTbU15U2xaVFdFNU9VbFp3UlZWV1ZrWmpNVkpXVW10S1dsWkdjRVJVUlZwWFVXeEdWVlZyVGxKbFdHaFBWVlpXVGsxV1JuSlVXRTVVVFVWYVExWkliRFJUYkVaV1ZHeEdVbVZZYUdGVlZsWlBWbFpHTldWR1NsSldWbHBEVlZoc05GZHNSbFpTYkhCVFVUTm9SMVZXVmtkamJFWnlWVmhPVTAxRldrVlVWbFpMVTBWNFJrMVZTbEpXVkVaSVZFVldhMUZzUlhkT1dFWlRWVE5vVFZWV1ZrZFVSbHBVWlVWNFVsWlZXbEZVUldSWFVXeEZlR05HWkUxU1dGSkRWVlpXTUdSc1NsUmxSM0JTVmxWYWNWVXdUalJTYkVaV1VteFNVMUV6YUVsVlZsWk9UVlpHZEdGRldrMVNXRkpEVlZaV01HSnNTbFJsUm5CU1ZsVmFjVlZXVGpSU2JFWldXa2N4VkZVemFIRlZWbFpIWVd4T1JHVkZXbEpXVlZwNVZWZDBVbU14U1hkU2ExSnFVbFUxZGxWc1RqUlVSa1pXVW10NGFGWldWbnBXVmxaSFVXeGFWR1ZJUWxKaE1GcERXVlpXUzFGcmVFaE5WVkpTVmxWWk1WVlVRbkpqTVUxM1VtdEtWRTFGTVhwV2JGWkhVa1V4Vmxack9VMVNWR3hEVlZSQ1IxVkZlRVpXYTBwU1RVVldlbFpXVmtkaU1VWnpZak5PYkZaVmJIcFhha0pyVWtaS1JsSllUbUZXVlZwUlZWWk9ORlpHUmxaVWEwcE5VbXMxUTFWVVFrWmpNVlYzVW01d1UxWlZWbnBXVkVKSFVXeFZkMVJZVGxOV1ZWcERWMnhXVG1NeFNsWlNhMHBPWVRCd1JWUkZWbXRSYkVZMVQxVlNUVkpYZUVOVlZsWjZZekZPVmxKclNsUmxiRnBFVkVWV1YxRnNSbGRXYlhSTlVsaFNRMVZXV2s5VVZYaEdUMVZLVWxaVWJGQlVSVnBIVVd4R1YxSnVXbE5STTJoSlZWWldUMDVHUmpWbFJrSlNWbFZhVTFSV1ZrcGpNVXBXVW10S1lVMUZjSFJVUlZaelVXeEZlbEZyVGsxU1dGSkRWVlpXZW1NeFNsWlNhMHBTVmpKU1JGUkZaRWRSYkVaWVVtdFNUVkpZVWtOVlZFcFNZekZPVmxKclNsUk5NbmhFVkVWV1YxRnNSbFpQUkVaU1lWaG9UVlZXVmtkaGJIQkVaVVZhVWxaVldrMVpWRUpLWXpGc1ZsSnJTbHBsV0doUFZWWldUazB4UmpWbFJscFNWbFZhV1ZwRVFrcGpNVXBXVW10S1ZXVnNXa1JVUlZZd1VXeEdXRlJ0ZEUxU1ZscERWVlpXTUdSc1JuQmxSbEpTVmxWYVYxUkZWVFZSYkVaV1QwaE9VMVpWV2tWYVJWWlNZekZTVmxKclVsUmhXR2hOVlZaV1IxUkZlRVpXYTBwU1ZsVmFURlJGWkVkUmJFWllVbXQ0VFZKVVJrTlZWRXBTWXpGT1ZsSnJTbFJOTUZwRVZFVldWMUZzUmxaUFJFWlNZVmhvUzFWV1ZrZGhSbkJFWlVWYVVsWlZXazFaVkVKS1l6RnNWbEpyU2xwbFdHaFJWVlpXUjFWRmVFWldhMHBTVFdwV1JsUkZWbXRSYkVaV1lrUk9VbUZZYUVkVlZsWkhWVVUxVmxOWVRsTk5SVnBGVmxWT05GTnNSbFpTYTNoTlVsZDRRMVZXVm5KTmJFWndaVVY0VWxaVldsTlZhMDQwVW14R1ZsSnNRazlXVld4NlZXcENSMUp0VGtaVFdFNVVWbFZhUmxZeFVrTlJNSGhHVm10S1VsWXhXVEJWV0d3MFVteEdWbEpyZUdwTlJXeDZWbXhXUjFGc1dYcFNhMDVOVWxkU1ExVlVTbmRTUlhoR1QxVktVbFpVYUhwVmJGWkhVbTFXY2xOWVRsVldWVnBGVlRKc05GUkdSbFpTYTNoTlVsWmFRMVZXVmtabGJFWndaVWRvVWxaVldtOVdTR3cwVlVaR1ZsUnRkRTFTVjNoRFZWWldNR1JHUm5CbFJWcFNWbFZhVVZSc1ZrcGpNVTEzVW10S1drMXNSbnBWYkZaSFVXeE5lV1JGVGsxU01GcERWVlprVG1NeFVsWlNhMUpQVFVVeGVsVXhWa2RTUmsxNldrVk9UVkpXV2tOVlZsVTBUVlpHY0dWRmVGSldWVFZTVkZWV1NtTXhTbFpTYTBwaFYwZG9SVlJGVmxkUmJFWldUVWhrVW1WWWFFZFZWbFpIVlVVMVZsTllUbFJXVlZwSFZHcENTbU14VVhkU2EwcFZaVmhvUjFWV1ZuTk5iRVp3WlVaQ1VsWlZXbEZVUlZaWFVXeEplRm96VGxaTlJWcERWMnBDUzFKRmVFWldhMHBTVmpKU1JGZHRiRFJUUmtaV1ZGUkdVbUZZYUU5VlZsWkhWR3MxUmxSWVRsTldWVnBEVmtSS2QxSlZlRVpQVlVwU1ZsUnNkMVZyVGpSVVJrWldVbXQ0VDFaVk1YcFZha0pIVW0xV2NsTllUbFZOUlZwRlZURlNVMUpGZUVaV2EwcFNWbGhTUlZSRldrZFJiRVpYVmxoT1UwMUZXa1ZYYlhSU1l6RktWbEpyU2xSTlJURjZWbFpXUjFGc1dsUmxSV2hTVmxVMWRGVnJUalJTYkVaV1VtdDRVMVV6YUZWVlZsWkhWa1Y0U0ZKclNsSk5iRXBJVkVWV1YxRnNSbFprUldoTlVsUnNRMVZXVlRST1ZrWTFaVVZvVWxaVk5WUlVSVlpQVVd4R1ZsUllUbGROUlZwRFZqRk9OR0pHUmxaU2JUVlNZVmhvZFZWWGRFZFJiRzkzVTFSS1VtVllhRlZWVmxaSFZrVTBkMVJZVGxSTlJWcEpXVzEwVW1NeFNsWlNhMHBTVmpGV2VsZFdWa2RSYkd4V1ZGaE9WRTFGV2tkWk1GWktaVlpHY0dWRldsSldWVnBOVlZoc05GVnNSbFpTYkZwTlVsZFNRMVZVU21GU1ZYaEdWbXRLVWxaWVVrVlVSVnBIVVd4R1YxWllUbE5OUlZwRlYyMTBVbU14U2xaU2EwcFVUVVpXZWxaVVFrZFJiRlkxWlVkd1VsWlZOWEpWYld3MFVteEdWbEpyZUZObFdHaFJWVlpXUjFWRk9WWlVXRTVUVFVWYVJWWlhiRFJTUmtaV1VtdFNUVkp0ZUVOVlZtUkdZekZ3VmxKclNtRk5SV3g2VjJwQ1MxRnNSbGhhUlU1UFlUQXhlbFpVUWtkUmJGWTJXa1ZTVFZKWVVrTlZhazVEVWxWNFJsWnJTbEpXVlZwelZFVmtSMUZzUmxoU2EzaE5VbFJHUTFWc1pFcGpNVXBXVW10S1VsWllaSHBYVmxaSFVXeHNWazlJVGxWTlJWbDNWVEJTVjFFd2VFaGtSVTVTVmxWV05WVlliRFJVUmtaV1ZHcEtVbVZ0VWtWVVJWWlhVV3hHVm1FelRsVk5SVnBGVlRJeFJtTXhTbFpTYTBwVlZUTm9UVlZXVms5VU1rbDNVMWhPVTFaVldrTlZNVTQwVkVaR1ZsUnJkRkpsV0doSFZWWldSMU5yZUVkVWEwcFNUVWhDVGxSRlZsZFJiRVpYVWxoT1ZrMUZXa1ZXVjNScVl6Rk9WbEpzVWxKVk0yaFJWVlphUTFGcmVFWldhMHBTVmxWYU5sVlliRFJpYkVaeVVtdEtZVTFGY0VWVVJWVTFVV3hHVms5VlVrMVNWM2hEVlZSSk1WRXdlRWRXYTBwU1ZteFdObFZyVGpSVVJrWldVbXhhYVUxRmJIcFpNVlpMVVd4R1dWcEZUbEpsV0doTlZWWldWMkl4U2tSbFJWcFNWbFZhUTFSVVFrNWpNV3hXVW10S1dsWllUbnBYVkVKSFVXeHJkMWt6VGxwTlJWcEZXa2QwUzFKRmVFWmFSVXBRVWxkU1ZGUkZXazlSYkVaVlYydE9hRlpWTVhwVmFrSkhVMjFXY2xOWVRsVk5SVnBLVkcxMFNtTXhVbFpTYTBwWVlUQldlbFZzVmtkUmJFNDFaVVZvVWxaVldtOVZWazQwVW14R1ZsSnJlR3ROUlRGNlZteFdSMUZzV2xSbFJWcFNWbFZhU1ZwVlZrNWpNVXBXVW10S1ZFMXVVa1ZVUlZwSFVXeEdWMVp1VGxKbFdHaEpWVlpXVDA1c1JYcGlSVkpOVW10YVExVldXa1pqTWtaV1UydEtVbFl6VWtSVVJWWXdVV3hHVm1SRlVrMVNWRVpEVlZaVmQyTXhUWGRTYTFwTlRVVTFSVlJGV2tkUmJFWldUMGhPVWsxRldrTlZXSEJYVW10NFJsWnJTbEpXVkVGNVZXeE9ORk5zUmxaV2JtUlNZVzFTUjFSRlZsZFJiRXBHVDBSS1UxVXphRWRWVmxaSFZFVjRSbHBGU2xKV1YxSXhWV3RPTkdGc1JsWlVhMHBwVmxaR2VsVnNWa2RSYkUxM1lqTk9WMVpWV2tOV2JFNDBVbXhHVmxKcmFGUlZNMmhIVlZaV1IxUkdXbkJsUmxKU1ZsVXdNVlZZYkRSVGJFWlpVMnRzVmsxWFRucFZWRUpIVVcxSmQxTlVUbEpsV0doSlZWWldUazFXUm5CbFJWSlNWbFZhUjFrd1ZrcGpNVlYzVW10S1ZsWjZiRVJVUlZVMVVXeEdWazFWVWsxU1ZHeERWVlpWZUZSVmVFZGFSVXBTVm14YVNWUkZaRWRSYkVwVldrVk9UVkpyTlVOVlZFSnVZMnhHTldWRldsSldWVFZEVlZoc05GSnNSbFpVYTBwU1pWaG9TVlZXVmxkUmEzaEdUVlZLVWxaVVJuaFZhMDQwVW14R1ZsSnNhR2hOUmtaNlZrWldSMUZzVVhkVVdFNVRWbFZhUTFkVVFrNWpNVTEzVW10U2FWSlZNWHBWTVZaSFVrWk9WR1ZGYUZKV1ZWcExXa2QwVW1NeFNsWlNhMHBYVlROb1JWVldWazlXTUhoR1drVktVbFpYZUVOVVJWWlhVV3hHVjFSclVrMVNWRVpEVlZab1YxRXdlRWRTYTBwU1ZqRndORlZyVGpSU2JFWldVbXR3YTFKV1ZucFdSRUpIVVcxRmQxTllUbEpOUlZwRldrZDBUbU14VWxaU2EwcFZWMGRTUjFSRlZsZFJiRVpXVDFWa1RWSldXa05WVmxaelUwVjRSazFWU2xKV1ZFWkZWRVZWZUZGc1JYcFhhMDVOVWxkNFExVldWakJTTUhoR1ZtdEtVazFHUm5wV1JsWkhVV3hTVkdWRmNGSldWVnBMVkVWV1YxRnNSbFpTYms1U1pWaG9NbFZYZEVkU1JsSndaVWhvVWsxRldrVlZWazQwVWtaR1ZsSnJXbXBoTUd4NlZYcENSMUZzVWxsU2ExWk5VbFphUTFWV1ZuTlRSWGhHVFZWS1VsWlVSa1ZVUlZwSFVXeEtWVkpyVGsxU1YxSkRWVlpvVDFFd2VFaGlSVTVTVmxWYVZsVnRiRFJTYkVaV1ZHeFdUVkpVUmtOVlZsVjNZekZPVmxKclNsUlZNMmhIVlZaV1IxRnRTa1pVV0U1cFRVVndRMVZVUVRCak1sRjNVMnRLVWsxRlZucFZWRUpIVVd4S1dWTnJUazFTV0ZKRFZWWlZlR1ZHU2tSbFJWcFNWbFZhUzFWdWJEUlViRVpXVW1zMVVtVllhRk5WVmxaV1pVWkdjbUl6VGxOV1ZWcERWVEZvUzFKVmVFWmtSVXBTVmxSbmVWVlhiRFJVUmtaV1VtdDRUMkV3YkhwV1JsWkhVV3hTVmxvelRsUldWVnAzVlZkd2MxSkZlRWRVYTBwU1ZrVndSRnBWVmxKak1VcFdVbXRLYTAxRmNEWlZhMDQwVTBaR1ZsUllXbEpsV0doSlZWWldSMU50VWtaVldFNVRWbFZhUTFaVVFrNWpNVkYzVW10YWFsWlZiSHBaVkVKTFVXeEdXR1ZGVGxOUk0yaEhWVlpXUjFaR1JqVmxSa0pTVmxVMWFGZFhiRFJWUmtaV1VteENhRlpXUm5wVmVrSkhVV3hOZVdKRlRrMVNWbHBEVlZaV2MyVldTa1JsUlRWU1ZsVmFUMWt4Vms1ak1WWldVbXRTVTFFemFIbFZWM1JIVVcxS1JsTnFRbEpsV0doSFZWWldSMVpHUmpWbFJrSlNWbFUxYUZkcVFrNWpNVXBXVW10S1lWWXpRa1ZVUlZaWFVXeEdWMVJyVWsxU1dGSkRWVlpWZUdWR1NrUmxSVnBTVmxWYVMxa3lkRkpqTVZGM1VtdGFhMkV3TVhwV1JsWkhVV3hTVkdWRmNGSldWVnBMVkVWV1YxRnNSbFpTYm1oU1lWaG9NbFZYZEVkU1JsSndaVVJHVWsxRldrVlZWazQwVWtaR1ZsSnJXbXBoTUd4NlZYcENSMUZzVWxsU2ExWk5VbFphUTFWV1ZuTmxWa3BFWlVaQ1VsZElRa1JXVjNCTFVsVjRSbFJyU2xKV00xSkVWR3hXVW1NeFNsWlNhMHBYVjBVMVJsUkZWbXRSYkVwWVlVVlNUVkpVUmtOVlZsVjRWVVY0UjFKclNsSldNbmhFVm10T05GSnNSbFpTYkdoc1lURkdlbFpHVmtkUmJGSlZVMnRXVFZKV1drTlZWbFl3VWtWNFJscEZTbEpsYlZKRlZFVldWMUZzUmxaU2JYUk5VakpTUkZWV1ZrZGliRVoxVW10T1RWSnJOVU5WVmxwUFZWVjRSbFpyU2xKV1dGSlBWRVZXYTFGc1JYbGhSVkpOVWxSR1ExVldWVFZTYTNoR1drVktVazFJWkhwVmJGWkhVV3hHV1ZWclRrMVNNbEpFVlZaV1IySnNSblZXYTA1TlVteGFRMVZXV2xkV1ZYaEdWbXRLVWxaWVVsTlVSVll3VVd4T1dHTkZVbE5WTTJoSFZWWldSMVpGZUVaV2EwcFNWbFZaTUZWWGJEUmliRVp5VW10S1lVMUZiRFJWYkU0MFlXeEdWbFJZY0ZKaWF6VkZWRVZXVjFGc1JsWk5SRUpUVVROb1IxVldWa2RWUmtZMVpVWlNVbFpWV2xWWmExWmFZekZKZDFKclNsWldlbXhFVkVWV1YxRnNSbFpOUkVwVFVUTm9SMVZXVmtkVlJrcFVaVVpTVWxaVldsZFpWVlpXWXpGSmQxSnJVbXBTVmtaNlZXeFdSMUZzUmxsVWExSk5VakpTUkZWV1ZrZGliRVp4VW10YVRWSXdOVU5WVm1SUFpFWktOV1ZHVWxKV1ZWcFZXV3RXV21NeFNYZFNhMHBXVm5wc1JGUkZWbGRSYkVaV1RWVldUVkpZVWtOWGFrSlRZekZLVkdWSWFGSmhXR2cyVlcxMFQwMXNTWGRTV0U1VlZsVmFRMWRXYUU5U1JYaEdWbXRLVWsxR1JURlZiRTQwWW14R2NsSnJTbWxXVlRGNlZURldSMUZzVGxWaFJWcE5VbFphUTFWWWF6VlNSVGxXVmxoT1drMUZXa1ZXVm1oelUwVjRSbUpGU2xKTlJWcEZWRVZrUjFGc1NsZFRXRTVoVmxWYVIxVldVa2RUUlhoSVlrVk9VbFpWV25kVlYyd3dVbXQ0UmxwRlNsSk5hM0JHVkVWV1YxRnNSbGhhUlU1U1pWaG9VVlZXVmtkV1JrWlVaVVZhVWxaWFRYcFZWM0JUVVRCNFJrOVZTbEpXVkd4SVZFVldhMUZzUlhkYU0zQlNZVmhvUjFWV1ZrZGliRVp5VkZoT1ZVMUZXa05XUkVKT1l6Rk9WbEpyU2xSVk0yaDFWVlJDUjFKRk1IZFRiazVUWVZob1RWVldWa2RVUlRGeVdUTk9WRlpWV2tOV1JsWkdZekZLVmxKcmFHRmhNazU2V1ZSQ1MxRnNSbGhrUlU1VFlWaG9TVlZXVms5aE1EVldVMWhPVTFaVldrTlhha0pMVWtWNFJrOVZTbEpXVkd4RlZFVldjMUZzUmxaaE0wNW9WbFUxUTFWWWNFOVJNa3BHVjFoT1ZFMUZXa05WTTNCVFUwVjRTRkpyU2xKV01WcERWRVZXVjFGc1NYcFJhMDVUWVZob2MxVldWazlSYTNoR1QxVktVbFpVYURSVmJtdzBWRVpHVmxKcmVFOVNWMDU2VjFaV1IxTkhSa1pUYTJ4TlVtczFRMVZVUW5Kak1WRjNVbXRLVlUwelFrbFVSVll3VVd4R1ZtTXpiRk5sV0doTFZWWldhMkl4Um5WalJXaE5VMFZhUkZWV1ZrOVRhM2hHVDFWS1VsWlVaekJWYkU0MFVteEdWbEp0TlZKaWJXaEhWRVZhVDFGc1NqWlVhMDVWWVZob2RWVlhkRWRSYkc5M1UxUkNVMkZZYUVkVlZsWkhZa1pHTldWRmFGSldWVEUyVlZjeFdtTXhTbFpTYTBwaFRVVndSVlJGVlRWUmJFWldUMVZTVFZKWGVFTlZWbFp5WXpGSmQxSnJTbE5OVjNSNlZXeFdSMUZzVGxaVldFNVVWbFZhUTFVeFpEUlNWWGhIVm10S1VsWnNWak5WVjJ3MFZFWkdWbEpyZUZKbFdHaFhWVlpXUjFadFZsWlRXRTVWVmxWYVJWUkVRbE5TVlhoR1ZtdEtVbFpYZUhkVlYydzBWVVpHVmxKc1FrMVNXRkpEVlZaV01GSkZlRVprUlVwU1ZsaFNlRlZYYkRSVFJrWldXa1JhVW1GdFVraFVSV1JyVVRGR1ZsSnROVkpoYkVwSVZFVldWMUZzUmxoV1ZFNVNZVmhvU1ZWV1ZrNWxiRVp4VjJ0T1RWSldXa05WVmxaelkwWkdjR1ZHUWxKV1ZWcFJWRVZXTUZGc1JsWmtSVnBOVWxoU1ExVldWakJpTVVwRVpVVm9VbFpYVVRKVlYyczFVbFY0U0dKRlRsSldWVnAzVlZkd1UxSXdlRVpXYTBwU1ZqRmFNbFZYYkRSVFJrWldWRlJHVW1KWWFFVlVSVlpYVVd4R1dGcEZUbEpsV0doUlZWWldSMVZIUlhkVVdFNVlWbFZhUTFZeFZsSmpNVWwzVW10U2FXRXdOVE5WVjJ3MFVteEdWbEpyY0doV1ZXeDZWa1JDUjFGc1VYZFpNMDVUVmxWYVExWkdZekZTVlhoR1RWVktVbFpVUm5kVmEwNDBWRVpHVmxKcmVFMVNWVFZEVlZaV1YxSnJlRWRhUlVwUFRVVTBkMVZZYkRSbFJrWndaVVJXWVdFd05VNVZWazQwVjJ4R1ZsUnJTazFTYlhoRFZWUkNSbU14WkZaU2ExSlNWVE5vWVZWV1ZrOVJhM2hJVWxoT1ZsWlZOVXhWVm1oTFUxVjRSbFpyU2xKV1ZHeEdWRVZhUjFGc1JsZFdhazVVVVROb1UxVldWa2RWYTNoSVlrVk9VazFGTlRWVlYzUk9ZekZLVmxKclNrNWhNR3g2Vlc1c05GVkdSbFpaTTFwU1lWaG9WVlZXVmtkV1JrWTFaVVZhVWxaVldqSlZWM1JPWXpGSmQxSnJXazlXVld4NlZURldSMUZzVGxaVVdFNVRWbFZhUTFkc1ZtNWpNVXBXVW10S2JGWlZjRWRVUlZaclVXeEdObFpyVWsxU2ExcERWVlpvUjFFeVJrWlZXRTVVVmxWYVExbFhkRXRqUmtwRVpVVmFVbFpWTlVwVVJWVTFVV3hHVms5VlNrMVNWbHBEVlZaa1JrMVdUa1JsUmtwU1ZsZFNOVlZYYkRSVGJFWldVbXR3VW1WWWFFZFZWbFpIVmtkUmQxb3pUbE5XVlZwRFdsWldTMUpyZUVaYVJVcFNWbTEwZWxWVVFrZFRSMFp5VlZod1ZGRXphRk5WVmxaSFZrVjRSbUpGU2xWTlZteDZWa1JDUjFOV1JsVlhhMnhOVWxaYVExVldZelZSTVVwd1pVVm9VbFpWV2xkVmJtdzBWRVpHVmxKcmVFOU5SMlI2Vld4V1IxRnNVWGRWV0U1V1ZsVmFRMVpVUWs1ak1VcFdVbXRLVmxaVlZucFZiRlpIVVd4UmQxVllUbFpXVlZwRFZsaHdRMU5WZUVaYVJVcFRUVEJLUjFwWGRHNWpNVXBXVW10S1ZVMUdSbnBXVmxaUFl6RkdjMWt6WkZSUk0yaEZWVlpXUjJSc1JuQmxSVFZLWVZoa2NGbDZTVFZOVjA1MFZHMTRhbVZWYXpKV00yeExUVEZ3V0ZOdVpGcFdNRFY1VkRKck5HUnNSbGRWYTJoaFZucFNNbHBFU2xkaFYwNUlVbTF3YUdWVWEzaFpiVEZ6VFd4d1dWTnVjRnBXTTJoUFdXcEtVMDFYU2toV2ExWmhWakZ3ZDFsdE1YTk5SMFpZVDFoV1NtRllaSEJhUkVwWFlWZE9TRkp0Y0dobGJUa3lWRVJDUjFaV1NYbFdibFpOWlZSU01sZFVTVFZsVm5CVVQxZG9hbEl5ZERGWGFrcFhaRlp3V1ZOdGFHdFNlbXcxVkVjMVUyVnJiSEJrTW14clRXeGFjRmt3WkVkaGJVWTJZak5hVFUxRldsWlZha3BYWkZWNE5VNUlXbHBOYW13MVYyeE5OVTFIVmxsUmJYaHFaVlJXTlZkc1pHdGpSMDE2VlcxNGFtRlVWWGRaTTJ4S1l6QnNkVnBIZUZwaWEwcHZWMVJLZWs1cmVEVlBWVXBYVWxkU2MxbHRhelJrVlhkNVZtNXNhbUpVYkRWWk0yczFZMGRLZFZkdGFHbFNNbmh5VkVab1MySkhUbGxXYlhocVRURkdNVmRzYUV0bFYwbDZVMWhXYTFORk1YQlVSVTVMVFRGd1dGTnVaRnBXTURWNVZESnJOR1JzUmxkVmEyaGhWbnBTTWxSSGF6VmlSMVpKVVc1c1lWZEZOVFpVUkVwVFlrWnJlVTlZYkZwWFJrb3lXVEkxVG1SdFRuUlBWRVpyVWpGV01WZHJaRmRoYlVsNlUyMW9hMUo2YkRWVVJ6VlRaV3RzY0dReWJHdE5iRnB3V1RCa1IyRnRSalppTTFwTlRVVmFWbFZxU2xka1ZYZzFUa2hhWVZkSGFETlpNakZYWlcxT05VOVhlR3hUUlVvMVYyeG9UMlZyZUhWUmJteHBUVEZ3ZDFkclpGZGxWWGgxVlc1d1NtRllaSEJhUkVwWFlWZE9TRkp0Y0dobGJUa3lWRVJDUjFaV1NYbFdibFpOWlZSU01sbFdZekZoTVhCWldqTldhMU5GTVhCVVJVNUxUVEZ3V0ZOdVpGcFdNRFY1VkRKck5HUnNSbGRWYTJoaFZucFNNbGRzYUc5TlJuQlpVMjVXV2xZelpHNVpiVEExWVRGd1ZFMVhjR2xOYWtZd1dXcEpNV05YVGpWUmJVNUtZbFp3TmxSRVRrTmxWMGw1VFZoQ2FrMXNXalpYUlU1S1lWVjRSRk5xVG1GV01IQXpWMVprVDJOck9YQlBTRnBTVm14S1NWZHNZekJrYlZGNVZtMXNhbEl3V25GWldHczFZVmRKZVU5VVFtcE5NVW8xVjFab1FtRlZlRVJUYWs1aFZqQndNMWRXWkU5amF6bHdUMGhhVWxac1NrbFhiR013WkcxUmVWWnRiR3BTTUZweFdWaHJOV1Z0VWtoU2JteHJVMFphTTFOWGQzZGpNR3gxVkc1YWExZEZjSEZYYkdoUFVrZEplVTVVUW1GV2VsVjNVMWR3ZDFscmJIQmhSekZyVm5wV2NWcEZaSE5rYlVwd1VXcE9ZVll3Y0ROWFZtUlBZMnhhV0U1WVFtdGlWbG8xV1hwS1IyTXhVbGhQVjNSclZqTm9jMVZyWkZkaVYwWllUbGhDYTFJeWVESlpiV3h2WlZkSmVVOVVRazFSTUVwMFYxWmtUMDFIU1hwVGFsWk1WVEJKTTFkRll6RlpNbEpJWWtjeFRGTkdTVEZaTUdSWFpHeHdjRkZ0ZUd4VFJVb3lXVEkxVTJWcmJFVk5SR3hSVlRCR2RWbHFTa3RqVm5CWVZHcENTMlZWUm5SVGJXeERUVWRXV1ZGdGVHbE5iR3h1V1d4ak5XRXlVbGhsUjNoS1VrUkJOVlZHVGtKaWJVbDVVMjVHWVZZd05IZFRibXh6V1RKS2MyVkVRbGxUUmtvd1dXcEtVMDFYU2toV1dGWmhWMGRvTTFscVRrdE5SMDQxVVZSc1NsSXhjRzlYVkU1VFpHMU9kV0V5T1V4V1NGSnFXVzE0TkUxR2NGaGxTSEJoVlRCS2QxZHRiRzlOUjFaWlVXMTRhVTFzYkc1WGEyUlhZbGRHV0U1WGVFcFNSRUUxVlVaT1FtSnNjSFZXYmxaYVRURktkMWxxU1RCaWEyeEVWMWN4U2xJeFNuTlhiVEZ6WkZad1ZFNVhhR2xXTVVaM1YwVmpNVmt5VWtkbFJFSmhVakZhZEZsV1l6RmlSWFJIWkRKc1VsWnNTa2xYYkdNeFdUQnNjR1F5WkZoTlZFSjZVMVZrWVdGR2EzcFZibHBxWW0xMGQxUjZSalJrVm1oSlZXMTRhVk5GTlhOVFZXUnpZbFYwU1ZWcVZtcFNNVm95VjIxc1EySkhWa2xSYmxwcVlteEtObE5WVVhkUFZrSlVVVmMxYVUxcmNIaFhiR1JQVFVWd05XSkhUbWxpU0dkM1YwVm9VMkpIVmtsUmJscHFZbXhLTmxaNlJqTmhWa1pYVld0b1lWWjZWbXBUVjNkM1dqRkNWRkZ0TVZwV01EUjNXV3BPUzA1VmRFUmhlbVJaVW5wV2FscEZaRmRqTWsxNVZtMU9hV0pJWjNkWFJXaFRaVmRKZVU5VVFsaE5XR1J3VlZaYVUxTkdjRmhPVjA1S1lrUkNibFZHVGtOaVZteFlWR3BDYVUwd2J6RlRNRTV5VGpGb1NFNVViRXhWTW1kM1dWVmtjMlZyZUVSUlZ6bE1WVEJGTlZWSGJFTk9NV2hJVGxoc1lWZEdTWGhaTWpBd1dqQnNjR1F5YkdoV2VrWXpXV3BPUzAxRmJFaFhibkJLVWpGd05WbHFTWGRhTVdoRVUyMHhhbVZVYkROWk1qQTFaRWRHV1ZSdGVHcE5XR1J3VkhwR05HVldhRWhPV0VKcFYwVktNbGt5TlZKYU1sWTFVV3MxWVZkR1NuWlpha3BTWXpCc1IxRnViR2xOTUVweldUSTFVMDVXV2tsaVNHUmhWVE5rYmxaWE1WZGxSMUpZVm01d2ExSlhlREZaTUdoWFRVVjRSRkZzVG1GWFJWbDRWMnhvVDAxR1VYcFdha0pxVTBaWmQxUkZUa05WTWtsNlZtcENZVlV3U1RWVFZXUmhaVmRKZVUxSFpGbFJNR3d4VkVkNE0yRlZPSGhsU0d4WlVucFdkMWxzYUVOa2JVNTFWVmRrYkdWVlNuVlhiR2hUVlZkT2RFOVlaR0ZYUlc5M1dsWmFVMDVYVGtoV1YyUnRWVEJLZEZreU1EVmtSV3hIWkRKc1RXRlVVakpYYkdodlpESk9kRlp1Y0dwbFZHeHlWMnhrVDJSdFRuUlNha0pwVFRCd05sUkVUa3RrYlZKWlZXMTRUV0pXU25OWFZFazFaVlpzV1ZWdVdtcGlTR1J3VkhwR05HVldhRWhPV0VKcFYwVktNbGt5TlZKYU1sWTFVV3hXYkZkRlNuTlpla1pMWWtadmVXSkljR3RTTVZvMVUxVm5kMW94Y0hWVGJscHBWVEJLYWxOWGF6QmtiVkpKWWtoa1lWZEZNVEZaTWpGWFltMUdXVlJxUW1GWFJYQnFVMWR3TUZreVRuTmxTRlpaVTBWd2FsbHRNVmRPUjA1SVQxaHNhMUV3U25GWmEyUkhaVzFPTlZGclNtcFNNbmhKVjJ4ak1XSkhUblJTYWtKcFRUQnNibHBVUmpSbFZtaElUa2RrU2xFd1JtNVpNR2hMWTBkU2RGSnFRbUZWTUVvMldrVmtSMDFIUmxoVVYyUm9WbnBXTmxwRlpFZGtWbXQ1VmxSYVNsSlZXak5aVmxacllrZEtkRlp1YkZwWFJrb3lXVEpzUWs5VmJFaE9WM2hyWlZWS1Exa3daSE5UUm5CWVRsZDRhbUpWV1hkWmFrNUtZakIwVldSSFRtcGlTR2d4VTFWT1Fsb3diRWxSYm14b1YwWndiMXBGWkZaYU1rNTBUMVJHYTFJeFdqWlVNbXhEVkd4c1dWRlVhR3BOTVVvMVdWWmpNV0pyZUVSUmJFNXBUVEZaZDFkc1VUQk9NV2hKVTIxT2FXRlZSbTVUVlU1RFpESk9kR0pFU2xwWFJrcHpVMVZvVTA1WFRraFdibkJXWWxaYWRWbFdhRTlOUm5CWlUxUmFTbEpzU1RGWk1HUlhaV3hXZEZadE5XaFhSVFIzVjJ4b1Nsb3hRbFJSYkZac1YwVktjMWw2Umt0aVJtOTVZa2h3YTFJeFdqVlVSekZyWWtkU1JtSklWbXBOTVVwdldXMHhUMkpGZEVSaGVtUlpVMFZ3YWxsdGVEUmxWbWhJVGtka1NsRXdSbTVaTUdoTFkwZFNkRkpxUW1GVk1FcHhXV3BKTVdWdFVrbFRha1phVFRGS01sa3liRzVqUld4SlpFZE9hbUpJYURGVFZVNUNXakJzUkZGWFpFcFJNRWwzV1ZWa2MyVnJlSFZUYmxwclYwWktjMWt6YkVKUFZXeElUbGQ0YTJWVlNrOVhWbWhDVDBkTmVsVnViR2hXZWxaMVZFVk9RMVV5U1hwV2FrSmhWa1JTZGxNeFVqQlpNazV6WlVoV1NsRXdSbTVUVldkNFdUSk9jMlZJVmxsVFJYQnFXVzFzUWxvd2JFUlJibkJyVWpCWmQxbFdaRTVhTVc5NVZtcENWRlo2VmpaYVJXUkhaRlpyZVZaWE9VeFZNRWt6VjBWb1Mxa3lTbkJSVjJSS1VUQkdibE5WVGtKYU1rNTBWbXBDYTFkRmNERlRWVlpIWkRKR1ZscEhlR2xpVmxvMVYxWm9VMlJ0VG5CT1dFSnBZbXMwZDFkV1l6RmhiSEJWWkVkT2FtSklhREZUVlU1Q1dqQnNTVTFYVG1waVNHZ3hWMFZvUzFreVNuQlJWMlJLVVRCS05WZHNaR3RqUjAxNlZXMTRhbUpGY0RKYVJtaFRZa1YwU0U1WGFHbFdNVlV5VTFWb1QwMUhUblJpU0ZaaFpWaGtibGt5TURWTlYxSklWbFJhU2xKcmNESmFSbWhUWWtWMFZGRnFaRmxUUlhCcVdXMXNRbG93YkVSUlYyUktVVEJHYmxwRlpHOWpSMDQxVGxoc2FVMHhXWGRYYkdoT1pGZE5lVlpxUWt4U2VsWnZXV3hrVm1Nd2JFbFRibHByVjBaS2MxTXhVakJaTWs1elpVaFdTbEV3Um01VFZXZDRXVEpPYzJWSVZsbFRSWEJxV1cxc1Fsb3diRVJSYlRWaFZucFdjMWt5TVVkTlJuQldVbTVrYUZacmNITlhha3B6WlcxU1NGWnViRXhSTW5SdVdsUkdOR1ZXYUVoT1IyUktVVEJHYmxOVlRrSmFNR3hJWlVkNGExRXdTWGRaTTJ4Q1QxVnNSMlF5YkUxbFZHaHVWV3BLVjJSV2NGbFRiV2hyVWpGYWNsTlZaRTlrYlVwMVZXMTRhV0pzUm5wVFZXUlRaRzFLY0ZwRVFrcFRSa295V2taa1QySXhhRWRsU0ZaWlVtNW9NVmRGVGtwT01XaEpVMjFPYVdGVlJtNVRWVTVDV2pCc1JGRlhaR3RUUlRGdVV6TnZkMW95VWtoaFNFSnFaVlJXZFZkc1l6RmlSMDUwVW1wQ1lWWnJjREphUm1oVFlrWmFTV0pJWkdGV2JFcFZVekJPY2s0eGFFbFRiVTVwWVZWR2JsTlZUa0phTUd4RVVWZGthMU5GTVc1VE0yOTNXakpTU0dGSVFtcGxWRloxVjJ4ak1XSkhUblJTYWtKaFZsUkdjMXBGWkc5a2JIQkdWbTVXYTFaNlJsWldXR3h1WTBVNGVHVkliRmxTZWxKdVUxVk9RbG93YkVSUlYyUktVMFpLTmxOVlRucFBWV3hKVlcwNWFGZEZNVEZYYWtwWFpGWndXVk50YUd0U01WcFVWMnhrYTJOSFRYcFZiWGhxWWxaYWNsWnJhSE5rTVhCWlZHeFdWbVZYWkhkVWVrWTBaVlpvU0U1SFpFcFJNRVp1VTFWT1Fsb3diRWhVYmxwcFltczBkMU5WYUV0a2JWSlpWVzE0YWsxV1NURlpNR1JYWldzNWNGRnFaRXBTYmxGM1dsWm9RMkpGYkVoaVNGWktVbFJHYzFwRlpHOWtiSEJIVFVSYVNsTkZOSGRaTWpGelpGWnZlR1JIVWtwVFJFSnVWVVpPUTA0eGFFbFRiVTVwWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZXUnJZa2RTUldJeVpGaE5WRUo2VjBWb1Mxa3lTbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xORlNqSlplazVTVG10c1IyUkhVazFTYm1nMVYwVmpNRm93YkVSUlYyUktVVEJHYmxOVlozZE9NV2hKVTIxT2FXRlZSbTVUVlU1Q1dqQnNSRkZYWkdGaVZHdzFVMVZPYjJNeGNGbFZWMlJZVFdwV2IxbHNaRlpqTUd4SlUyNWFhMWRHU25OWFJrNURaR3h3Y0ZGcVFtaFNNbmcyVkVjMVMyUnRVbGxWYlhocVpWUldjMWx0TlZObFYwWllWbTV3VEZFeWRIZFRWV2d3V1RKT2MyVklWa3BSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxwRmFFNWFNSFEyVFVka2ExSXlhSGRaTTJzeFlteHdXRTVYZUdwaVZWbDNWMnhhUzJSdFVsbFZiWGhYVW1zeGRsbHRNVWRrUm5CVVpESmthbUpVYTNoYVJXUldZMFU0ZUdWSWJGbFNlbEp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtObFYwbDZWbXBDWVZkRk5WWmFWbWhEWWtkTmVHUkliR2xOTVZsM1YyeE5NV1JHY0ZsVmJUbHBUV3hLYTFSSE5VTk5WMDE1V2pJNWFXSlZXakJYYkU1eVRqRm9TVk50VG1saFZVWnVVMVZPUWxvd2JFUlJWMlJ0Vm01b05WZEZZekJhTUd4RVVWZGtTbEV3Um01VFZXaFRaV3RzUkdONmJFcFRSa3AyV1Zab1RtUldiM2xXYmxaaFYwVndiMXBGWkZkVk1rbDZWbXBDWVZkRk5WWmFWbWhEWWtkT05XRkliR2xOTVZsM1YyeG9UMVpYVmxsUmJYaHFaVmR6TTFkRmFFdFpNa3B3VVZka1NsRXdSbTVUVlU1Q1dqSlNTR0ZJUW1wbFZGVjZXVEl4YzAxR2NGWlNibVJvVm10d2MxZHFTbk5sYlZKSVZtNXNWMUo2YkVoWlZtUTBZa1YwU1ZWdWNFeFdTRkpxV1RKNE5HUlZiRVJSVjJSS1UwUkdhbGt5ZURSa1ZtaEpVMjFPYVdGVlJtNVRWVTVEWkRKT2RHSkVTbHBYUmtwelUxVmthMkpIU25SV2JteGFWMFpLYzFaR1pGZE5SMFpJVDFkMFUxWjZWWGhaYkZwVFZrVjBSR0V5Wkd4TldHZzFWMFZqTUZvd2JFUlJWMlJLVVRCR2JsTlZaRFJpUjFKRVVXcENhbVZWUlRWVFZXUkRXVEZvU0U1WGVHeFRSVW95V1RJMVVsb3hjRmhPVkVacFZUQktUMWRzYUZOaU1rbDVWVmRrYkUxclJUTlhSV2hMV1RKS2NGRlhaRXBSTUVadVUxVk9RbG94VVhsVGJrWmhWakEwZDFSSE5XRmhSMHBKVm0xNGFtVlhhRTlYYkdoVFlqSkplVlZZUWsxaVZuQXlXVEowVjJGR2EzbGFNamxNVW5wR2MxcEZaRzlrYkhCRVlUSmtVVlpFVW01VE1HaFRaV3RzUkdONmJFcFNNRXBxVjBWak1Wa3hhRWxWVjNSc1RXcEdjMXBGWkc5a2JIQkpUVWhPV2xFeWRIZFVla1kwWlZab1NFNUhaRXBSTUVadVUxVk9RbG93YkVsVmJuQktVVE5OTlZOVldqTmhWbWhIWlVoV2JWWnVhR3BaYlhnMFdUSktjMlF5YkZCTldHZzFWMFZqTUZvd2JFUlJWMlJLVVRCR2JsTlZhRXRpUjFKSlZtNXNhV0ZWU1hkWk0zQXdXVEpPYzJWSVZrcFJNRVp1VTFWbmVGa3lUbk5sU0ZaWlUwVndhbGx0YkVKYU1HeEVVVzVrYW1KWGQzbFhWbWhUWWtWc1NGcEhlR2xpVmxvMVYxWm9VMkpHVm5SV2JUVm9WMFUwZDFkc2FFdGlSbkJIVldwV2FsSXhXalpXYTFwT1lqQjBWRkZxWkZsVFJYQnFXVzFzUWxvd2JFUlJWMlJLVVRCR2JsbHJaRmROUld4SlZXNXdTbEpFUW01WFJVNUxXVEZvU0U1WFRrcGhibEpxV1RKNE5HUlZiRVJSVjJSS1VUQkdibE5WVGtOTlIwWklZa2h3VFdKc1NURlpNR1JYWld4V2RGWnROV2hYUlRSM1YyeG9TbVJXY0ZoT1ZFWnBWMFV4TVZkdE1EVmxWa3BZVW0xd2FGRXlaSFphUldoelpERndWR1F5WkdsaVZWb3dWMnhPY2xveFFsVk9SMlJzVFZob05WZEZZekJhTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGcVFtcGxWVVo1VlVaT1Exb3hhRWRsU0ZaaFYwZG9NMWxxVGt0TlJXeElWbTVXYTFaNlFtNVRhMmd3WkZac1dFMVhlRzFWTUVrelYxVlNNRmt5VG5ObFNGWktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVXUkVwTFkxWndXRlJxUWsxaVZsb3hXa1ZvUzJOR2NGbFVWemxyVTBkNE0xZHNUbkprVm5CMFQxaHNVMVl3V25GWlZVNXZXVEpPYzJWSVZrcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVZVWRLYUUxc1dURlVSVTVEVFd4c1dHVkVSbUZXYWtKM1UxVlJkMHN4YUVsVGJVNXBZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVekJvVTJWcmJFUmplbXhLVWpCS2FsZEZZekZaTVdoSlZWZDBiRTF1VW5OYVZtZDNXakZDVkZGWGRHeE5XR2cxVjBWak1Gb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVsM1dsWm9RMkpIU1hsWFYyUnJZbFZhZWxwR1pGWmFNVUpWVFVSc1NsSnVaSEJaYlRWWFpFWnNkRlp1YkZsUk1HeHVWVWhzUTAxc2JGaGxSRVpoVlRCRk1sTlZaRU5aTUd4d1ZXcGthMkpWV25wYVJtUlhUMVpvUkZOdFpGbFRSWEJxV1cxc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pKYVZHVkhaRXhXYm1nMVYwVmpNRm93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZoQ1VFMVlhRFZYUldNd1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJha0pxWlZWR2VWVkdUa05aTUd4elpVZE9hV0pxUm1wWFJXTXhXVEJzY1dSSFRtcGlTR2d4VTFWT1Fsb3diRVJSVjJSS1VUQkpOVk14VWpCWk1rNXpaVWhXU2xFd1JtNVRWVTVDV2pCc1JGRnViR0ZYUmtsNFdUSXdNRm95VWtsVVZHUlpVMFZ3YWxsdGJFSmFNR3hFVVdwc1dWTkZjR3BaYlhnMFpWWm9TRTVIWkVwUk1FWnVXVEJvUzJOSFVuUlNha0poVlRCS2RWZHNZekZpUjA1MFVtcENZVlpyY0RKYVJtaFRZa1phU1dKSVpHRldiRXBWVXpCT2Nsb3lWWGhsU0d4WlVucFNibE5WVGtKYU1HeEVVVmRrU2xORmNITmFSV2hYWlZkS2NGRnRaRmxTYm1neFdrVm9jMlF4Y0ZSUmJFNXBUVEZaZDFkc1RrSlBWV3hKWkVoV1dsWjZSbk5VTW14RFpXMVNTVk51UW1saVYwMHpVMVZqZUdKSFVraGhTRnBoVWtjNWJsWkdaRmROUjBaSVQxZDBVR1ZWU2pOWFZtaFRZakE1Y0ZGdWNHdFRSWEIzV1cweGFrNHdiRWxUYlhocVYwWmFkMWt5TVZkUmJWSlpWVzA1VVdWdE9XNVhWekExWkcxS1NGWnRhR2xoVlVrMFUxVm9WMlJXY0VoV2JURm9WbnBXYzFkclVucGFNWEJJVW1wQ1dsWkVaekpUVldSSFpGZFdWRkZxYUVwVFJsb3hWMnRrVjJKWFJsaE9WM2hoVWtoT2Jsa3lNVmRsYXpsMFVtNVdiRmRFUVROWFJWbzBaRlpvUjJWSVZscFNTRkpxV1RKNE5HUlZiRVJSVjJSS1UwUkdhbGt5ZURSa1ZtaEpVMjFPYVdGVlJtNVRWVTVEWkRKT2RHSkVTbHBYUmtwelUxVmthMkpIU25SV2JteGFWMFpLYzFaWE1EVk5WMUpJVm01d1YxTkhlRE5YYkdoT1lqSk9kRTlVUm10U01WbzJWbXRvYzJReGNGbFVWRnBLVTBoT2JsWjZUbE5PVjA1SVZsZGthRlo2VW01V1JtUlhUVWRHU0U5WGRGbFdSemx1V1hwT1UyVlhSbGhPVnpWWVRWUkNibHBzVG5KYU1sVjRaVWhzV1ZKNlVtNVRWVTVDV2pCc1JGRlhaRXBTTTJoeldrVk9RMDFIVmxsUmJYaHFaVlZGTlZOVldqTmhWbWhFVTFSa1dWTkZjR3BaYld4Q1dqQnNSRkZYWkVwUk1FWnVWa1JLUzJOV2NGaFVha0pOWWxaYU1WcEZhRXRqUm5CWlZGYzVhbUpVYTNoYVJXUlhaV3hhU1dKSVpHRlhSVEYzVkVjeFlXUnRUbkpXYldoYVRXMWtkbE13V2pCa1JuQlpWVzA1YVUxc1JucFRWV2hMWkcxU1dWVnRlR3BOVkVKM1UxVlJkMHN3YkVsa1IwNXFZa2hvTVZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqSlNTV0pJWkdGWFJURnVVek52ZDFveGJFZGxSMDVwWWxaWk1Ga3dZelZsVjFKRVVXcENiRmRGU25OVFZWcFNZVEpWZVUxWGVHdFNNbWd5VjJ0Tk1VMUhTWGhXYm1ScVVqRmFOVlZVU2tkbGJIQlVXak5DYlZacmNESmFSbWhUWWtkT05WRlViRXBTYTNBeVdrWm9VMkpGY0Vsa1NHeHBUVEZaZDFkc2FFNWtWMFowVDFoQ2FXRlhhR3BaTW5nMFpGVnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZXak5oVld4SlpESmtWbUpVYTNoYVJXUlhXVEJzYzJWSWJGbFNlbEp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKalIxcFZaRWRrVUUxWWFEVlhSV013V2pCc1JGRlhaRXBSTUVadVUxVm5kMk5GT0hobFNHeFpVbnBTYmxOVlRrSmFNR3hFVVZka1NsTkZjSE5hUldoWFpWZEtjRkZxUW14WFJVcHpXVE53TUZreVRuTmxTRlpLVVRCR2JsTlZaM2haTWs1elpVaFdXVk5GY0dwWmJXeENXakJzUkZGdVpHcGlWM2Q1VjFab1UySkZiRWhhUjNocFlsWmFOVmRXYUZOaVJsWjBUMVJHYTFJeFdsWldXR3h2WkZac1dFMVhlRkJoVlVvMldrVm9TMk5IU25SWk0wNUtVMFZ3TWxwR2FGTmlSVGx3VVd4T2FVMHhXWGRYYkU1eVdqSlZlR1ZJYkZsU2VsSnVVMVZPUWxvd2JFUlJWMlJLVWpOb2MxcEZUa05OUjA0MVVWUnNTbEl3U25OYVZXaERaRzFPZFZWWFpHdFRSM2d6VjJ4T1ExWldWblJQVkVaclVqRldjbHBVU1RGaFIwcFlWbXBzVkZaNlZqTmFSbWhTV2pGQ1ZGRlhkR3hOTVVwMldWWm9UbVJXYjNsV2FrSlRVakJaZDFkV1dsTk9WMDVJVm14V1ZtVlhhR3BaTW5nMFpGVnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJxWWxScmVGcEZaRlprVjA1MFZtNW9hMVl5ZURWWGJHUlNUREI0ZEZOdVdtRlRSM2hxV1RKNE5HUlZiRVJSVjJSS1VUQkdibE5WVGtKalIxcFZaRWRPV1ZKNlZtNVVla1kwWlZab1NFNUhaRXBSTUVadVUxVk9RbG93YkVsVmJuQktVVE5OTlZOVlpFTmlSMVpKVVc1YWFtSnNSbTVhUldoelpERndWRkZzVmxaaVZHdDRXa1ZrVm1FeVZYbE9WMmhwVmpGWk5WWkVUbGROUjA1SlZtcENTbEpFUW01VGEyZ3dUVWRHU0dKSWNFMWlWMUp6V1cweFYyVldiRmxWYlhoVlRURlpkMWt3YUZkTlJscEpZa2hrWVZac1NsVlRNRm8wWlZab1NFNUhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJLTlZscVRsZE5SbkJVVGxoc1lWZEZOVE5aYWtreFpXeHdWMlZJYkZsU2VsSnVVMVZPUWxvd2JFUlJWMlJLVVRKM05WUjZSalJaTWtwMFVWUmtXVk5GY0dwWmJXeENXakJzUkZGWFpFcFJNRVp1V2tWb1Rsb3dkRFpOUjJSYVVtNW9OVmRGWXpGaVIxWkpVVzVhYW1Kc1JtNWFSV2h6WkRGd1ZGRnNUbWxOTVZsM1YyeE9VMDR5U25SU2JsSmhWMFJDYmxWR1RrTk9NV2hKVTIxT2FXRlZSbTVUVlU1RFpGWnNXRTFYZUZCaFZVcHFVMWRzVTA0eVNuUlNibEpoVjBSR2FsTlhjREJaTWs1elpVaFdTbEV3Um01VFZXTjRZa2RTU0dGSVdtRlNSemx1Vmtaa1YwMUhSa2hQVjNSTllWWkpNMWt5TURWTlYxSklWbGhXYVZZeFdYZFpWV00xWVRKYVZXUkhUbXBpU0dneFUxVk9RbG93YkVsUmJXaHJVakpqTWxOVldqTmhWWEJKWkVoc2FVMHhXWGRYYkUweFpERnNXVlZ0T1cxV2JtUndWSHBHTkdWV2FFaE9SMlJLVVRCR2Jsa3lNVmRsUjFKWVlraHNZVlpWV1hoYVJXUnVUbXRzUkZWcVpHcGlWR3Q0V2tWa1ZtUldiRmxXYWtKb1UwUkJNMWRGYUV0Wk1rcHdVVmRrU2xFd1JuSmFWRVkwWlZab1NFNUhaRXBSTUVadVUxVk9RbG93YkVsVGJscHJWMFpLYzFSSE5VdGlSMDVaVm01Q2FtSldXbkpWU0dzeFlWZEplVlZxVmxsVFJYQnFXVzFzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RlQwZGtXbEl4U205YVJXUkdUbXRzUjFWc1RtbE5NVmwzVjJ4T1UwNHlTblJTYmxKaFYwUkdTMWx0TlVOTlYxSklVVzFPYW1KSWFERlRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93T1hCUmJXUmhVakJaZDFkV1VUUk9hMnhIVld4T2FVMHhXWGRYYkU1VFRqSktkRkp1VW1GWFJFWkxXVzAxUTAxWFVraFJiVTVxWWtob01WTlZUa0phTUd4SlRWZE9hbUpJYURGVFZVNUNXakJzU1ZOdGVHcGxiVGx1Vm10YVMyUnRVbGxWYlhoTFUwaFNNVmRXWTNoaVIxcFdUMVJHYTFORlNYaGFSVkl3V1RKT2MyVklWbTFXU0ZKcVdUSjROR1JXY0ZsaFNHUnBUVEJ2ZDFOVlpFOWtiVXAxVkdwQ1NsSXlVbk5hUlZwTFlrZE9XVlp0ZUdwTk1VWnlXbFJKTVdGSFNsaFdhbXhLVWtSQ2JsTXdUbE5PTVdoSlUyMU9hV0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWb1MyUnRVbGxWYlhoTlltdHdjMWt4YUZkalIwNTBWbTEwVVdWVVZuQlpha3BUVGxWc1JVOUhaRnBTTVVwdldrVmtSazVyYkVkVGJscHJWMFpLYzFOcmFEQmtWbXhZVFZkNGJWWnVVbXBUVnpGVFlVZFNTRkp0VGtwaVJFWnVVMVZTZGxveGFFUlRiVTVLWWtob05WZEZZekJhTUd4RVVWZGtTbEV3Um01VFZXZDNZMFU1Y0ZGc1FtbFdNbmQzVlVWYVMyUnRVbGxWYlhoTFUwaFNNVmRXWTNoaVIxcFVaREprV1ZFd2NEVlhiR2hQV1RCc2NVNUhaRkZXUkZKdVV6Qm9NRmt5VG5ObFNGWktVVEJHYmxOVll6RmhSMHBZVmxSYVNsSnVaSEJUYTJnd1pGWnNXRTFYZUcxV2JtUndWRVZhTkdWV2FFaE9SMlJLVVRCR2JsbHNaRmROUjBaSVQxZDBVR0ZWU2s5WGJHaFRZakpKZVZWWVZrdFRTRkkxV1dwT1YwMUdjRlJPV0ZKaFYwWktkbGxxU2xOUFZYaEhaVWhzV1ZKNlVtNVRWVTVDV2pKT1NGSnFRbWhTUnpsdVYwVk9TbUV5VlhwVGJscHJWMFpLYzFSSE5VTmhSMUpJWVVSc1dWRXdiSHBYUldoTFdUSktjRkZYWkVwUk1FbzFWMnhvUjAxWFJsbFRiWGhTVjBaWmQxbFZVblphTUhCSlpFaHNhVTB4V1hkWGJFMHhZVWRTV1ZWdE9XMVZNMmhxV1RKNE5HUlZiRVJSVjJSS1VURkpNMWt5TURWTlYxSklWbGhXYW1KV1dqUmFSbVJ6WlZad1dGVlRPVTFpVlhBeVYydG9jbG94UWpWUmJVNUtZbFpLYjFwRlpFWmpNV2hFVTFka1VHRlZTbXBUVjNnellWZGFWMlZJYkZsU2VsVTFVekZTTUZreGFFaE9WMDVaVW5wV2JsUjZSalJsVm1oSVRrZGtTbEV3Um01VFZVNUNXakJzU1ZOdGVHdFRSbG8xV1cxc1EwMUhUalprUjA1cVlraG9NVk5WVGtKYU1HeEpUVmRPYW1KSWFERlhSV2hMV1RKS2NGRlhaRXBSTUVveldUSXhjMDFzYkZsVmJYaEtVakpTYzFwRlZsTmhSMUpJVW14V2JGZEZTbk5XYTFwT1lqRnNkRTlYZEd4V1JHY3lVMVZrUzJSdFNYbGxSM2hhVm5wU2JscHJUa05WTVhCWlVtcEdZVmRGTkhkVk1XTXhaREpTV1ZWVWFGcFdlbFV4VlVkc2Nsb3lWWGhsU0d4WlVucFNibE5WVGtKYU1HeEVVVmRrU2xJeWVIUlRWVTV2WVZkSmVWVnFWa3hWTUVrelYwVm9TMWt5U25CUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsTkZjSE5hUldoWFpWZEtjRkZxUW14WFJVcHpXV3BLV2xveGJIUlBWM1JzVlRCRk5WVkdVWGRhTVdoRVUyMXNhVTFxYkhwWGJHUkhaRlpvUkZOdFRtcGlTR2d4VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xKRWFHNVhSVTVMWVVkS2RXSkhUa3BpU0dnMVYwVmpNRm93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVVTW14RFRVZEdTR0pJY0UxaVYxSnpXVzB4VjJWV2JGbFZiWGhVVm5wV00xcEdhRk5XVjFaWlVXMTRWMUpyTVhaWFZ6QTFZVEpXVkdGNlpGbFRSWEJxV1cxc1Fsb3diRVJSVjJSS1VUQkdibHBzVGtOaVIwcEpWRzE0U2xOSVVtcFpNbmcwWkZWc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUnFZbFpaZDFwR2FFdGtWV3hFV2taT2FVMHhXWGRYYkZvd1dUQnNkRlZ0YUd0U01GcHFVMWQzZDJKck9IaGxTR3haVW5wU2JsTlZUa0phTUd4RVVWZGtTbE5FUm1wWk1uZzBaRlZzUkZGWFpFcFRSRVpxV1RKNE5HUldhRWxUYlU1cFlWVkdibE5WVGtOa01rNTBZa1JLV2xkR1NuTlRWV1JyWWtkS2RGWnViRnBYUmtwelZURmpNV1F5VWxsVmJGWnNWMFZLYzFacldrNWlNbEpKWWtoa1lWWkhPVzVXVnpGWFpVZFNXRlp1Y0d0U1YzZ3hXVEJvVjAxR1FraFNibFpzVmtSU2QxTlZhREJaTWs1elpVaFdTbEV3Um01VFZVNUNXakJzUkZGdVRtRlhSa1p1V2tWb1Rsb3hRbFJSYlU1S1ltNVNhbE5YY0RCWk1rNXpaVWhXU2xFd1JtNVRWVTVDV2pCc1JGRnNRbHBpV0VKelYxUk9VbVJXY0ZoT1ZFSnFZbGQ0YzFremJHOU5SMVpaVVcxNFRGVjZWblJaYWs1TFVteHNXRlJ0T1V4Uk1taHBXVEJvUzJSdFRraFdibXhyVTBkMGVsTlZhRk5PVjA1SVZtMVNURlV3UlRWVlIyeERUakZvU1ZOdFRtbGhWVVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WWkhOaVZXeEVZVWhrYW1KVWJETlhiR2hMVFVkV1ZGRlhhRkZXUkVKdVYwVk9TMXBzWjNwVGJYaHFWMFphZDFreU1WZGhNV2Q0VDFkT1NtRlhlR3BaTW5nMFpGVnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZhRTlOTWtaWlZXMXdhRkV3Um5aWGFrcFhUVVpXU1ZOdVdtcFNNVm8xV2tWb2MxWlhWbGxSYlhoTVUwWkpNVmt3WkZaalJYUlVVV3BrV1ZORmNHcFpiV3hDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNV3Q1VW01d1lWVXdTbEpaTWpBMVpERndXVk5xUW14V2JFa3hXVEJrVm1SV1JuSlNiRkpUVmtoQ2Fsa3llRFJrVld4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibHBGYUU1YU1IUTJUVWRrV2xKdWFHcFpiWGcwV1RKU1IyVkhUbXRSTVVreldUQm9TMlJ0VGtoV2JteHJVMGQzTlZOcmFEQlpNazV6WlVoV1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbE5HU1RGWk1HUldaRlpuZUU5WWJHRlhSVmw0V1Zab1MySkdjRWRQVjFwS1VrUm9ibGRGVGtwT2JHaEVVMWRrVUdGVlNtcFRWMjgwVG14b1JGTnRUbXBpU0dneFUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkcxVk1Va3pXa1ZvYzJReGNGUk9WMXBaVFdwVmVGbHJaRFJoUm14MFpVZDRXVTFVYUc1VlNHeERXVEJzY0ZGdVZtdFdNMmg2VTFWb05Ga3diSEJSVkZwS1VtNWtjRmRGVGt0UFZXeEVWV3BrV1ZORmNHcFpiV3hDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1RFRVZFdXVkZ0ZUUxaVJHeHRXa1ZvYzJReGNGZFBWMXBaVTBWd2FsbHRiRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1UwUkJNMWRWVWpCWk1rNXpaVWhXU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNV3gxVTIxNFdsWXpUVE5YUldoTFdUSktjRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtXazFyV2paWGJFNURWVmRPZEU5WVpHRlhSVzkzV2xaYVUwNVhUa2hXV0ZaU1ZtdHdWRlZXV25KT2JHaEpVMjFPYVdGVlJtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hKVlc1d1NsRXpUVFZUVldSRFdURm9TRTVYVGxsVFJrcHFWMFZvVW1FeVZYcFJibXhwVFRCS2Mxa3lOVk5PVjFwVVZXcGtXVk5GY0dwWmJXeENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVEVFVkV1dWRnRlRTFpUkd4dFdUSXhWMlZIVWxoaVNHeGhWakZLYlZkSWJFSmhSa0pWVFVka1lXSlZXbnBaZWtwV1dqRkNOVkZ0VGtwaGJrSnFVMWRzUWs1cmJFZGtNbXhSWlc1Q2FsTlhlRFJsVm1oSVRrZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtOUFZXeEVWV3BrYTFJeWFIZFpNMnN4WW14d1dFNVhlR3BpVlZsM1YyeFdjMlJYVGtsV2FrSlhVMGQ0TTFkc1dsTldSWFJKVldwV2FsSXhWakZYUkVVMVlVZE9kVk50YUd4V2FteHRVekZuZUZsc2FGVmtSMlJRVFZob05WZEZZekJhTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQktjRmt5TVZkaFIwWTJaRWRPYW1KSWFERlRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrTmhiR3haVkcxNFNsSnJTalZaYWs1RFlrZE9kVlZxVmxkVFIzZ3pWMnhOTVZWR1JuSmpSVnBTVFZaRk1sZEZhRXRaTWtwd1VWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WYUZObGEyeEVZM3BzU2xJd1NtcFhSV014V1RGb1NWVnRUbGxUUmtaeVdsUk9RMlZYU1hwUmJYaHFZbXhKTVZwc1RsTk9NV2hKVTIxT2FXRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3U1hkYVZtaERZa1Y0YzA5WFdtcGlWbG8wV2taa2MyVldjRmhWYlZwWlpWVkdiMVZHVVhkYU1YQjBVbTVPYWsxc1ZtNVZTR3hEV1RCc2NXTkhUa3BoVlVVeVUxVmFNMkZXUWpaalIwNUtZa2hvTlZkRll6QmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCSk5WTnJhREJaTWs1elpVaFdTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xOR1NURlpNR1JXWkZabmVFOVlWbXRXTTJoNlYxWmtTMk14Y0ZkUFYxcEtVa1JvYmxkRlRrcGFNa3AxVm01T2FWRXdTVFJYUlU1S1dqQTVjRkZ0VGtwaVNHUndWMFZvUzFreVNuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWbmQxb3djRWxrUkVKb1VqSjRObFJITVd0aVIwcDBWbTVzV2xkR1NuTlZNV014WkRKU1dWVnNWbXhYUlVwelZtdGFUbUl5VWtsaVNHUmhWVEozTlZSNlNrSk9NV2hKVTIxT2FXRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SVUyNXNZVll3V25sVWVrWTBaVlpvU0U1SFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1scFhaVWhzV1ZKNlVtNVRWVTVDV2pCc1JGRlhaRXBUUkVKM1ZIcEdOR1ZXYUVoT1IyUktVVEJHYmxOVlRrSmFNR3hKVlc1d1NsRXpUVFZUVlZvellWWm9SMlZJVmxsU2JtZDNXbXhhTTJGVk9IaGxTR3haVW5wU2JsTlZUa0phTUd4RVVWZGtTbE5GY0hOYVJXaFhaVmRLY0ZGcVFtcGxibEpxV1RKNE5HUlZiRVJSVjJSS1UwUkdhbGt5ZURSa1ZtaEpVMjFPYVdGVlJtNVRWVTVEWkRKT2RHSkVTbHBYUmtwelUxVmthMkpIU25SV2JteGFWMFpLYzFaRVRsZE5SMDVKVm1wQ1YxTkhlRE5YYkZwVFZrVjBTVlZxVm1wU01WVjJWREpzUTFVeGNGbFNha1poVjBVMGQxWkVUbGROUjA1SlZtcENVVkl3V2pGYVZsRXdZMFZzU1dSSFRtcGlTR2d4VTFWT1Fsb3diRVJSVjJSS1VUQktkMWR0YkVKaU1HeFpWV3BXYWxJeFZuZFRWV2hMWWtkU1NWWnViR2xoVlVwcVUxY3hSMlJYVmxka01teFFUVmhvTlZkRll6QmFNR3hFVVZka1NsRXdSbTVUVldRMFlrZFNSRkZxUW1wbFZVVTFVMVZhTTJGWFZYaGtNbXhRVFZob05WZEZZekJhTUd4RVVWZGtTbEV3Um01VFZWVTFZVmRHZEZadGNHdFJlbFp6V1cwMVUyVlhSbGhXYm5CTVUwWkpNVmt3WkZaalJYaDBWMjVhYW1FeFdtOVhWRXB1WWpCMFIyUklaR3BpVkd3elYyeG9TMDFIVmxSa01tUnJVMGQ0TTFkc1dYZGpSV3hGVFVOMFNsTklVbXBaTW5nMFpGVnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJvVmpGc2JsTXdhRU5sVjBsNlVXMTRhbUpzU1RGVFZVNUdUMVpDVkZGdFRrcGlSR3h0V1RJeFYyVkhVbGhpU0d4aFZqRktiVmRFUmpOaFZYUlhaVWhzV1ZKNlVtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUnFUVEpTZDFwRlpFOWlNR3hFWVVjMVlWZEdTbEpaTWpBMVpERndXVk5xUW14V2JFa3hXVEJrVm1JeVVrbGlTR1JoVlRKMGQxTlZhREJaTWs1elpVaFdTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQktjVmRXYUU5aVJXeEhVVzVzYVUwd1NuTlpNalZUVGxaYVNXSklaR0ZWZWxaRVZWWmFUMUpyT1hObFNHeFpVbnBTYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJha0pxWlZWR2VWVkdUa05hTVdoSFpVaFdXVkp1WjNkWFJWbzBUVVZ3U1dSSVpHcGlWR3d6VjJ4b1MwMUhWbGxOUjNSc1RWaG9OVmRGWXpCYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNbEpKWWtoa1lWVjZWbTFYUkU1TFlrZE9XVlp1UW1waVZscHlWMFJGTkZveFFqVlJiVTVLWVc1Q2FsTlhiRUpPYTJ4SFpESnNVV1Z1UW1wVFYzZzBaVlpvU0U1SFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVEVDFWd1NXUkVRbXhYUlVwelZFZDNOVnB0U25WV2JrNXBVakJhY0ZsclpGZGFiR2cxVVZNNVNsSnVaSEJUVldNeFRWZEtTR1F5WkcxU2JtUndVMVZTZGxveGFFUlRiVTVLWW1wQ2JsTnJhREJaTWs1elpVaFdTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xOR1NURlpNR1JXWkZabmVFOVVRbXhYUlVwelYwUkZOVmt5VG5ObFNGWktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxveVdsVmtSMlJRVFZob05WZEZZekJhTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQktjRmt5TVZkaFIwWTJaRWRPYW1KSWFERlRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrTmhiR3haVkcxNFNsSnJTalZaYWs1RFlrZE9kVlZxVmxkVFIzZ3pWMnhOTVZGc1ZuTlRhMHBZVmtoQ2Fsa3llRFJrVld4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibHBGYUU1YU1IUTJUVWRrV2xKdWFHcFpiWGcwV1RKU1IyVkhUbXRSTVVreldUQm9TMlJ0VGtoV2JteHJVMGQzTlZOcmFEQlpNazV6WlVoV1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbE5HU1RGWk1HUldaRlpuZUU5WWJHRlhSVmw0V1Zab1MySkdjRWRQVjFwS1VUQlZOVlZHVGtOaVZteFlaVWh3WVZVd1JYWlRWVm96WVZVNWMyUXliRXBTUnpsdVYwVk9Ta3d3T1hOa01teFpVMFZ3YWxsdGJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVTBSQ2JsTnJhREJOUjBaSVlraHdUV0pYVW5OWmJURlhaVlpzV1ZWdGVGVk5NVmwzV1RCb1YwMUdXa2xpU0dSaFZteEtWVk13YUZOT1YwNUlWbGhXV1UxVWJHOVpNalZMWVVkV1YwOVhXa3hYUkVacFYwWlNNRm93T0hobFNHeFpVbnBTYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJiV3hxWWxaYWIxbFljREJaTWs1elpVaFdTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQktjVmRXYUU5aVJXeEhVVzVzYVUwd1NuTlpNalZUVGxaYVNXSklaR0ZWZWxaUlZWZDBkMUpzUlhoVlZGcFpVMFZ3YWxsdGJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVTBaS05sTlZUbnBQVld4SVVXMU9XVko2Vm1wWFJXaFRXVEZvU1ZWWGRHeE5NRW8xV1dwT1EySkhUblZWYWxadFZURkpNMWRGYUV0Wk1rcHdVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVdwQ2JGZEZTbk5VUjNjMVdtMU9kRlp1YUd0V01uZzFWMnhrVTFwc2FEVlJWMmhSVmtSQ2JsZHRNVWRqTWsxNVZsZGtVV1ZWU21wVFYzQjNXVEJzY0ZGVVdrcFNibVJ3VlVod2Qxa3diSE5sU0d4WlVucFNibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUmFteExVMGhTYWxreWVEUmtWV3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SlZXcFdhbEl4VmpGWFJFVTFaRmRTV0dWSVRscFdNSEI2VjJ4Wk5WcHJiRVZQUjJSWlVUQnNibGx0TlZkak1rcEVVV3BvV1ZFd2JHNVVNbXhEV1RCc2MyUXliRmxUUlhCcVdXMXNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwVFJFSnVVMnRvTUUxSFJraGlTSEJOWWxkU2MxbHRNVmRsVm14WlZXMTRWVTB4V1hkWk1HaFhUVVphU1dKSVpHRldiRXBWVXpCb1UwNVhUa2hXV0VKdFZraFNibFI2UmpSbFZtaElUa2RrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrTmhWMDUwVm0xb2FHVnVVbXBaTW5nMFpGVnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZaM2haTWs1elpVaFdTbEV3Um01VFZVNUNXakJzUkZGcWJFeFdTRkpxV1RKNE5HUlZiRVJSVjJSS1VUQkdibE5WVGtOTlIwNDFVVmhLVVZVd1NtcFRWM2cwV1RKS2MyVkhUbXRUUkVacVUxZHdNRmt5VG5ObFNGWktVVEJHYmxOVlRrSmFNR3hFVVc1c1lWZEdTWGhaTWpBd1dqSlNTVlJVWkZsVFJYQnFXVzFzUWxvd2JFUlJhbXhaVTBWd2FsbHRlRFJsVm1oSVRrZGtTbEV3Um01Wk1HaExZMGRTZEZKcVFtRlZNRWw2V1RJeGMwMUdjRlpTYm1Sb1ZtdHdjMWRxU25ObGJWSklWbTVzVjFKNmJFaFpWbVEwWWtWMFNWVnVjRkJoVlVvMldrVm9TMk5IU25SWk0wSktVMGhTYWxreWVEUmtWV3hFVVZka1NsRXdSbTVUVlU1RFlsZE9OVTVVVG1waVYzZDNWMnhXWVdOSFNraFdWemxxVTBWd01sZFVTbGRsYlU0MVRsZDRhV0pzYkRGVlZscFRVMFpLVms1WFdsZFNiWGhTVld4YVQxcHNTbkpQVlRGVFVsWmFWRlpWVmtkV1ZrNUVVVmhLU2xKdVpIQlVSRXBIWkRKR1ZFNVhkRTFpYkVvMlYwVk9TbU13YkVsVmJuQk1Wa2hTYWxreWVEUmtWV3hFVVZka1NsTkVSbXBaTW5nMFpGZGFWMlZJYkZsU2VsSndWRVZPUzJOSFNsbFJibHBxWW14R2JscFliRU5WTWtsNlZtcENZVlV3U1RWVFZXUmhaVmRKZVUxSFpGbFJNR3d4VkVkNE0yRlZPSGhsU0d4WlVucFdhbGt5ZURSa1ZuQlpZVWhrYVUwd2IzZFRWV1JQWXpGc1dWUnVjRXBTYkVreFdUQmtWMlZzVm5SV2JUVm9WMFUwZDFkc2FFcGFNbFY0WlVoc1dWSjZVbTVUVlU1Q1dqSk9TVk51UW10aVZWbDNWMnhPUTJWdFVraFNha0pvVmpBeGJsbFdZekZsYlZKSVVtNVdXazFzVlRKVFZWcFRUbGRPU0ZadWNGWmlWbHAxV1Zab1QwMUdjRmxUVjJSUlZUQktNVmRzYUdwYU1WcEpZa2hrWVZkRk5WUlhiR1JyWTBkTmVsVnRlR3BoVjJSM1ZIcEdOR1ZXYUVoT1IyUktVVEJHYmxreU1WZGhSbkJJVDFoV2FWTkhkRzVYYkdNeFRWZEtXVlJVV2twU1ZFWnZXVEJTTkdWdFVrbFRia0pwWWxkT2VsTlZaRWRrVjFaVlRrUmtXVk5GY0dwWmJYZzBaVlpvU0U1SFpFcFJNRVp1V1RCb1MyTkhVblJTYWtKaFZUQktjVmxxU1RGbGJWSkpVMnBHV2sweFNqSlpNbXh1WTBWc1NXUkhUbXBpU0dneFUxVk9RbG93YkVSUlYyUktVVEJKZDFsVlpITmxhM2gwVm01V2ExWjZSalpUVlZGM1dqSktkRlpxVGtwU1ZFWnZXVEJTTkdWdFVrbFRia0pwWWxkT2VsTlZXa3RrYlZKWlZXMTRVV0ZYWkhkVWVrWTBaVlpvU0U1SFpFcFJNRVp1V214YU5HVldhRWhPVjA1cVlraG9NVk5WVGtKYU1HeEpWR3BDV2xkR1NuZFhXR3hEWW14d1dWVnJjR2xpYXpSM1YxWmpNV0ZzY0ZSYU0wSktVMGhTYWxreWVEUmtWV3hFVVZka1NsRXdSbTVUVlU1RFpWWndXVlZxUm1waVZGSnVWbXRvYzJReGNGbFViRTVoVmpKU2QxbDZUbE5pUjA1d1RsaENhV0pyTkhkWFZtTXhZV3h3VldSSFRtcGlTR2d4VTFWT1Fsb3diRWxOVjA1cVlraG9NVmRGYUV0Wk1rcHdVVmRrU2xFd1NqVlhiR1JyWTBkTmVsVnRlR3BoTVZveFdrWmpkMkl5U25SU2JsSmhWa2M1YmxsNlRsTmxWMFpZVGxjMVRWRXdTWGRhVm1oRFlrVTVjRkZ0YUdsaWJYUjNVMVZvTUZreVRuTmxTRlpLVVRCR2JsTlZUa0phTUd4RVVXcENhRkl5ZURaVVJ6RlhaRmRTV0UxWWNFMWlhelZ6V2tWT2IyUldiRmhOVjNoTlVUQkpkMXBXYUVOaVJYUlZaRWRPYW1KSWFERlRWVTVDV2pCc1NVMVhUbXBpU0dneFdteGFOR1ZXYUVoT1IyeE5VVEJ3ZDFsc2FFTmtiVTUxVlZka2JHVlZTa2RaTWpWTFpHMU9jRkZ0YUdwbFZVcE1Wa2QwVjJWWFRuUlBXR3hLVTBSQ2JsZHROVXRrYlVwVVVXMU9TbUZVVWpKWGJHaExaVmRKZWxOdWNGbFJNR3N6VjBWb1Mxa3lTbk5sU0d4WlVucFdjMXBWYUVOa2JVNTFWVmRrV2sxdWFHOVplazVPV2pGT1dFNVVTbHBXTTJoM1YydGFTMkpIVGxsV2JYaHFUVEZLUjFreU5VdGtiVTV3VVcxNGJGTkdTbk5aYlRGVFpXdHNSbFp1YkdwaVZHdzFVMVZrYzJSSFRraGxSM2hwVmpGYU1WcEZhRTVhTVU1eVRsVmFhbUpyY0RKWk1teERUakZvU1ZOdFRtbGhWVVp1VTFWT1EyVldjRmhTYlhScFRXcFdlbHBXVGtOaGJVbDVWVzE0U2xKRVFtNVVhMUpDWkRBNGVHVkliRmxTZWxKdVUxVk9RbG95VG5SV2JXaGhVbnBzTVZscmFISmFNazUwVm01T1dsZEdTbk5YYTFaVFlVZFNTRkpUT1ZCaFZVcHZXVzAxY2s0eGFFbFRiVTVwWVZWR2JsTlZUa05rUm5CWlZHNXdXbFl5VW5OVU1teERaVzFTU1ZOdVFtbGlWMDB6VjBWb1Mxa3lTbk5sU0d4WlVucFNibE5WVGtKYU1XdDVUMWhXYWsweFNqVmFSbVJQVFVkSmVsTlhPV2xXTVZvMldYcEtSMkpzY0ZWUFJGcEtVMFUwZDFreU1YTmtWbkExWkRKa2FtSldXbnBYVm1oVFlrWndSbFZ0YUd0U01GVjJWREpzUTJGSFNuVmhNMEpLVTBoU2Fsa3llRFJrVld4RVVWZGtTbEV3Um01VFZVNURaVzFTV1ZGdGVHcGhWMmd3VjJ4b1QyVnNiRmhhUjNoTVZraFNhbGt5ZURSa1ZXeEVVVmRrU2xFd1JtNVRWVTVEVFVkR1NHSkljRTFpVkZadldXeGtWbG94UWxSUmJVNUtZVEo0TVZwSE1VZGpNa1pZVld4a1dsWXpaM2hYYkZvellWVTRlR1ZJYkZsU2VsSnVVMVZPUWxvd2JFUlJWMlJLVTBaS2RsbFdhRTVrVm5CMFQxaHNhVll3V1hkV1JtUlhaVzFOZVZKdE5XRlZNbWd3VjJ4b1QyVnNiRmhhUjNoTlVUQktOVmRzWkRSaFIxSklWbTEwVTFJd1dYZFhWazV5VGpGb1NWTnRUbWxoVlVadVUxVk9RbG93YkVSUlYyUnJVakpvZDFremF6RmxWbkJZWlVkb2ExSXhXbkpWYTJSSFRVWnNWRkZVYkVwVFJYQnpXV3RrUjAxR2NGaFZhMVphVjBaS2IxUjZSalJsVm1oSVRrZGtTbEV3Um01YWJGbzBaVlpvU0U1WFRtcGlTR2d4VTFWT1Fsb3diRWxSYm14b1YwWndiMXBGWkZaYU1YQjBUMWhzYVZZd1dYZFdSbVJYWlcxTmVWSnROV0ZWTW1nd1YyeG9UMlZzYkZoYVIzaFJaVzA1YmxsNlRsTmxWMFpZVGxjMVRWRXdTalZYYkdRMFlVZFNTRlp0ZEZOU01GbDNWMVpSTkU1cmJFaFNibFpzVlRKMGJscFVSalJsVm1oSVRrZGtTbEV3Um01VFZVNUNXakJzU1ZWdE9XaFhSVEV4V1d4a1YyVnRUWGxTYlRWaFZUQkZOVk5WWkVOUk1XeFlWVmRrVm1KV1dqUmFSbVJYWlcxU1JGRlVXa3BSTVVreldXeGtWMlZ0VFhsU2JUVmhWMFJHYWxkRll6RlpNV2hKVld4R2FtSlVhM2xaVm1SVFlrWndSRkZyV21waWEzQXlXVEpzUTFKV2JGbFZiV2hLVWtoQ2FsZEZZekZaTVdoSlZXMU9XVk5HUm5KYVZFSjNWa1pSZDA1SVZtcE5NVW8xV1Zaak1XSnRSbGhYYWxaTVVtNW9OVmRGWXpCYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRnViR0ZXTTJodldrVmtWMkV4U2toU2FrSmFWVE5vYWxreWVEUmtWV3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkd0V2VsWnlWMnhrWVdOSFNuUldiWFJOVW01b05WZEZZekJhTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWWJGbFRSWEJxV1cxc1Fsb3diRVJSVjJSS1VUQkdibE14WjNoWk1XaElUbGRrVUUxWWFEVlhSV013V2pCc1JGRlhaRzFXYm1nMVYwVmpNVTlXYUVsVGJVNXBZVlZzZWxOWE1YTmtSMDVJVDFoc2ExRXdTVE5UVlZwTFlrZE9XVlp0ZUdwTk1VWjZVMVZhUzJKSFRYcFJibHBwWW1zMWMxTlZaM2RhTVhCMVUyNWFhVlV3U21wVFZ6RlhUa2RPU1ZOdGVHcE5NRFZxVTFkd01Ga3lUbk5sU0Zab1ZucEdNMWxxVGt0TlJXeEpaRWRPYW1KSWFERlRWVTVDV2pCc1JtSklWbXBUUmxsM1ZsVm9TMlJ0VGtoV2JteHJVMGQwZWxkRmFFdFpNa3B3VVZka1NsRXdTbEpaTWpBMVpERndXVk5xUW14V2JFa3hXVEJrVm1NeGFFbFRiVTVwWVZWR2JsTlZUa05WTVhCWlVtcEdZVmRGTkhkVk1XTXhaREpTV1ZWWVRsbFRSWEJxV1cxc1Fsb3diRVJSYkU1aFYwVlplRmxXYUV0aVIwcFlWbTVXYTFORk1YcFhSV2hMV1RKS2NGRlhaRXBSTUVwVVdXcE9WMDFHY0ZSbFIwNXFZa2hvTVZwc1RrTmlWMDUwVDFoU1NsSnVaSEJVUjJzd1pHdDRjRTVYVGtwaGJsSnFXVEo0TkdSWFJsaE5XR1JwVFRCdmQxTlZhSHBhTVVaWlVXNUNVMDFzV2pGWGJHaExZVWRTU0U5WWJFcFRSRUp1VjIwMVMyUnRTbFJSYlU1S1lWUlNNVlJJYXpCa1ZYZDVWRzVhYW1KV1ZqSlhWbWhEWTBWNGRGcEhlR2xpVmxvMVYxWm9VMlJ0VG5Oa01teFFUVmhvTlZkRll6RmpSMHBaVVc1YWFtSnNSbTVhV0d4RFUyMUtkVmR0YUdsU01uaHlWbGN4VjJWSFVsaFdibkJyVWxaYU5Wa3lNRFZsVld4SlRVZGtZV0pyY0RKWmJFNURXVEJzY0U1SVZrMWxWRkl4VkVSS1YyVlhUblJQV0d4cVpWUnNkMWx0TldGaFIwcElZa2QwVFZkRmNITlpNV2hYWWtkTmVsVllWbUZYUlhBMVdXcE9TMWt3YkhGa1IwNXFZa2hvTVZsV1kzaGtNa2w2VTJwQ1NsTklUbTVWYkdodlpESk9kRlp1Y0dwTlZVbzFXV3BPWVdOR2NFaFdibXhLVTBSQ2JsZHROVXRrYlVwVVVXMU9TbUZVVWpGVVJFcFhUa2RPU1ZOdGVHcE5NREV4V1RCb1MyUnRVblJpUjNSaFYwVndhbE5YY0RCWk1rNXpaVWhXV1ZORmNHcFpiVEZYVGtkT1NFOVliR3RSTUVwMFdrWmpNV0Z0VWtoaVNGcHBZVlZLTlZscVRsZE5SbkJWWlVWd2FXRlZSVFZUVldSSFpGZFdWR1F5WkZWTk1WbDNVMVZSZDFveGJGaE9WRlpSWVZkbk0xZEZhRXRaTWtwd1VWZGtTbEV3U2pGWFZtTjRZa1Y0UjJWSWJGbFNlbEp1VTFWT1Fsb3lTbGhXYWtKb1VucHNjbFJGV2pSbFZtaElUa2RrU2xFd1JtNVpNR1JIVFVkR1JHVkhUbXBpU0dneFUxVk9RbG93YkVoU2FrWnJVakprZWxkRmFFdFpNa3B3VVZka1NsRXdTalZYYkdoSFRWZEdXVk50ZUdGUk0yaHFXVEo0TkdSVmJFUlJWMlJLVTBWd2MxbDZUa05rYlVwMVZHMTRUVkp1YURWWFJXTXhUMVU1Y0ZGc1RtbE5NVmwzVjJ4U05GTnRTbkJrTW1SVlRURlpkMVZIYkVKaVZXeEpZekprYVdKVldqQlhiRkUwVG10c1NWUnFRbXBpVjNneFYyNXNRMDlWZEZWaU1tUlZWakZaZDFsVll6VmhNVXBJVm0xd2FVMHdjRzlhUldNMVpWVnNTV1JIVG1waVNHZ3hVMVZPUWxvd2JFWldhbEpxVTBWd2MxbDZUazlWVjA1MFQxUkthRll4U25OWk1tc3hZekpKZVZwSE5XRlhSV3d4V1d0ak5XSnJkRWRsU0d4WlVucFNibE5WVGtKYU1HeEVVVmRrU2xJd1NrVlpNakZYWVVkU1NGWlhaRXRUU0ZJd1YyeG9VMkl5U1hsVmFteFFZVlpKTTFrd1pFZE5SMFpKVFVka2FtSlVhM2hhUldSV1dqSlJlV0pFUW1oUk1FcHZXa1pvVTJJd09YQlZhbVJhVjBaWmQxbFZaM2hhTVdoSlUyMU9hV0ZWUm01VFZVNUNZMFU0ZUdWSWJGbFNlbEp1VTFWT1Fsb3hSbGxSYmtKVFRXeGFNVmRzYUV0aFIxSklUMWhzVFdKWFVuTmFSVlp6WkZkTmVsVnRhR2xpVlRWelV6Qk9jbVJYVG5SV2JUVm9WMFUwZDFkc2FFdFZNa2w2Vm1wQ1lWVXlhR3BaTW5nMFpGVnNSRkZYWkVwUk1FWnVVMVZPUTJSV2JGaE5WM2hLVTBobk5GTlZaR3RpUjBwMFZtNXNXbGRHU25OVmEyUlhZbFpzV1ZadVRtdFNWRlp2V1d4a1ZtSXlUa2hTYWtKb1VUSjBlbGRGYUV0Wk1rcHdVVmRrU2xFd1JtNVRWVTVDV2pKV05WRnVVbUZYUmtwMldXcEtVbU13YkVsUmJXaHJVakprZWxOVlpFZE5WMUpJV2pOT1NsTkZjSE5aTVdoWFkwZE9kRlp0ZEUxUk1FbzFWMnhvVDJReVNYbE9XSEJoVlRCSk5WZEZhRXRaTWtwd1VWZGtTbEV3Um5kVWVrWTBaVlpvU0U1SFpFcFJNRVp1V1RJeFYwMUhVbGxUYmxaS1VqRnZlRmx0TVU5TlIwWllUMWhXU2xFeWFHcFpNbmcwWkZWc1JGRlhaRXBSTUVadVUxVk9RMDFHYkZsVGJUVmhWMFpGTWxOVlZUVmhWMFowVm0xd2ExRXphR3BaTW5nMFpGVnNSRkZYWkVwUk1FWnVVMVZPUTJReVRuUlBXR1JoVjBWdmQxcFdWakJpUjFaVllqSmthazB4U2pWWlZtTXhZbXRzU1dReVpHcE5Nbmd3VjFjd05XTXdlRWRsU0d4WlVucFNibE5WVGtKYU1HeEVVVmRrU2xJeFNuTlpla3BQWlZkR1dWRnFRbWxOTUdzeVUxVmFRMlZYU1hwUmJYaHFZbXhKTVZWclpGZGxiR3Q2VTI1Q2FsTkdTakpaTW5nMFpWWm9TRTVIWkVwUk1FWnVVekZPUTA0eGFFbFRiVTVwWVZWR2JsTlZUa0phTUd4RVVWZGtXazFxYkRGWmVrNVNXakpPZEZadWNHcFNlbXd4V1hwS1Zsb3hRbFJSYldocVRUSjRNVmRZYkVKaU1rNTBWbTVvVUdGVlNsUlhiR2hIVFZad1dWUnFRazFSTUVvMVYyeG9UazVyYkVkVGJYaHFUVEJLTWxsdE5VOWlSWFJVVVZSc1VXRlZTVE5YUldoTFdUSktjRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVTBaS05WcFdUa05PTVdoSlUyMU9hV0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYmtKaFlWVkdkbGt5TVZkbFIxSllZa2hzWVZZeFJuZFRWV2d3V1RKT2MyVklWa3BSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdTbmRYYld4Q1lqSk9kRlp1YUd0V01uZzFWMnhrVW1SV2JIUlBWM1JzVlRCR2RGTnRiRU5sVm5CWlVsaFdhVll4V1hkWlZXTTFZVEJzUlUxRWJGRlZNRXBxVTFkMGExSnNXa2RrTW14TVZUQkpNMWRGYUV0Wk1rcHdVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlpFOWtiVXAxVkdwQ1NsSXhTbTlhUldSR1dqRkNWRkZ1YkdGWFJWWXhXVEZvVjJKSFRuVmhNMVpaVFd4S2IxcEZaRVpPTVdoSlUyMU9hV0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeElZa2N4U2xFeVpHOVhhMlJIVFVac1ZHSkhUbXBpU0dneFUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZvVTJJeVRuUlBWRTVLVW5wV2MxcEliRU5UYlVwMVYyMW9hVkl5ZUhKV1Z6RlhaVWRTV0ZadWNHdFNWbG8xV1RJd05XVlZkRWRsU0d4WlVucFNibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hIWkRKc1ZXSlVhRzVYYTJSSFRVWnNWRkZ0TVdsTk1HeHVWMWN3TldFeVZsUlJhazVvVjBaS2RsTlZWbXRTYkZwRVVXNXNZVmRGV1hoWGJHaFBUVVY0YzJReWJFMVNibWcxVjBWak1Gb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVMGhPYmxkWE1EVmhNbFpWWWpKa2FtSldXalJVUnpWSFRWWndXVk5xVmsxaVJHeHlWMVpvVTJGRmJFbE5WMDVxWWtob01WTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVG5KT01XaEpVMjFPYVdGVlJtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hJWWtjeFNsRXlaRzlUTUdoVFRsZE9TRlp1V21GaFZVcHlWMVpvVTJGRmJFVk5SR3hSVlRCS2FsTlhOVTlOUjA1MFlraFdZVTFZWkhCVE1VNXpXVEpPYzJWSVZrcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBUUmtwMldUSXdOVTB3YkVoT1YzaHJaVlZLUzFsdE5XRmhSMHBJWWtkMFZtSldXalJhUm1SWFpXMVNSbFp1YkdwaVZHdzFVekJhTkdWV2FFaE9SMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WV2pOaFZrcElVbXBDV2xVd1NYZGFWbWhEWWtWc1NHSkljRXBTTW5neFdrY3hSMk15UmxoVldGWlpVVEJzZWxkRmFFdFpNa3B3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01YVdHeERZVmRKZVZWcVZsQmhWVW8xVjJ4b1JtUlhUbGxXYlhocVltMTBNVmRFU2xOaFIxSklVbGRrYlZadWFEVlhSV013V2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQjBWV1JIVG1waVNHZ3hVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpHcGlWbG8wVkVjeFMyUnNjRWxoTW1SUlZUQktURlpVUVRWVU1IaDFVVzFvYW1Kck5YTlRNR1JUWVVkU1NGSllRbEJOV0dnMVYwVmpNRm93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNTVTFYVG1waVNHZ3hVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNURZVzFHU0ZadGNHaE5WWEJ6V1RGb1YyTkhUblJXYmxKaFZucFZkMWt6Ykc5bFZuQlpVbXBHYUZkRmNITlhhMDR6V2pKT2RGWnVhRXhXU0ZKcVdUSjROR1JWYkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVldkNFdUSk9jMlZJVmtwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SVZHNWFhV0pyTkhkVFZXTTFaVmRHV0ZwSVFtbGlWVnA2VTFWUmQxb3hiRmxhUjJob1YwWkdibGRyWkZkbGJHdDZVMjVDYWxOR1NqSlpNbXN4VFd4c1dHVkVSbUZWTW1nMVYyeG9SbU13YkVsVGJYaHFaVmR6TTFkRmFFdFpNa3B3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTFKdFZrbFJibXhoVjBVMU5sWlZhRXRrYlZKMFlrZDBZVmRGYkRGWmVrcFhaRlp3UmxWdGFHdFNNRloyV1RJeFYyVnJlRVJSYmxwcVlsZDRkVmxXWXpGaFIwcEVZWHBrV1ZORmNHcFpiV3hDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVsTlIyUmFUV3RaZDFkVVNtNWFNSFJJVm01c2FtRlhkRzVhVkVZMFpWWm9TRTVIWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTVVwWllVaGthbUpXV2paWmVrWkRaVmRKZWxkdVFtRlNNVm8xVkVjMVQySkhTblJWYTFwcVltdHdNbGt5Ykc5bFZuQlpWRmhPU2xJeFdqVlpNbXh5VGpGb1NWTnRUbWxoVlVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlozaFpNazV6WlVoV1NsRXdSbTVUVlU1Q1dqQnNSRkZxYkZCTldHZzFWMFZqTVZreVRuTmxTRlpLVVRCR2JsTlZUa0phTUd4RVVXMXdhVTFxVmpaYVJVNURaV3h3V1ZOcVNtRlhSV3h1VlVaT1ExSnRWa2xSYm14aFYwVTFObFpWYUV0a2JWSjBZa2QwWVZkRmJERlhha3BYVFVaT1dFNVljR3RTTUZveFYxUktWbUl3ZEZWa1IwNXFZa2hvTVZOVlRrSmFNR3hFVVZka1NsRXdTbmRYYld4Q1lqRnNXVlpxUW1oUk1uUnVXWHBLVjJWWFVuUldibXhOWWxkU2MxcEZWa2RrTWs1RVdqTkNXRTFxUm5OYVJXUnZaR3h3UjAxSE9XcFNNRmwzV1ZWT00xb3lUWGxXYm14cllsWmFOVlJITld0alIxSklZVVZLYTFkR1NuWlVSVTVEWlZad1dWUnVaR2xOYWxZMlYyeE9jazR4YUVsVGJVNXBZVlZHYmxOVlRrSmFNR3hFVVZka1lWWXphRFpYYkU1RFVtMVdTVkZ1YkdGWFJUVTJWbFZvUzJSdFVuUmlSM1JoVjBWc01WZHFTbGROUms1WVRsaHdhMUl3V2pGWFZFcFdZakIwVkU1WE5XRlhSa3BEV1RCb1FtSXdkRmRrU0ZKaFYwWktkbGxxU2xOYVJYUkpVVzFvYTFJeVpIcFRWV2hMWWtkTmVsRnVXbWxpYXpWelV6RlNNRmt5VG5ObFNGWktVVEJHYmxOVlozZE9NV2hKVTIxT2FXSnFSbXBaTW5nMFpGWm9TVk50VG1saVZtOTRXVzB4VDAxSFJsaFBXRlpLVWpBMWRsZHNaRTlqYkZaMFZtNW9hMVl5ZURWWGJHTjRZa2RLZFZWdWNFeFRSWEJ6V1RGb1YyTkhUblJXYlhSUVlWVktWRmRzYUVkTlYwWlpVMjE0YVZZeFdqRmFSV2hPWXpCc1NWTnRlR3BXUnpsdVZsY3hWMlZIVWxoV2JuQnJVVEowYmxwVVJqUmxWbWhJVGtka1NsRXdSbTVaVm1SYVdqQjBTVk50ZUdwWFJscDNXVEl4VjJFd2VIUlRibHBoVTBkMGQxTlZhREJaTWs1elpVaFdTbEV3Um01VFZVNUNXakJzUkZGdVFtRmhWVVoyVjBWb1Mxa3lTbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFeVozZGFWbWhEWWtkSmVWZFhaR3BpVmxvMFdrWmtjMlZXY0ZoVldGWmFZbFJzY2xwV1RrSlBWa0pWVFVka1dWRXdjSEJaYWtrMVl6RndXRkp1VmxsUk1HeHVVMjFzWVZreVRuTmxTRlpLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZKc1FscGlXRUp6VjFST1VtUlhSWGxXYWxacVpWZG9OVmRzYUVaa1ZteDBUMWQwYkZVeWRERlphMlJYWkZadmVsVnRPVXhWTUVrMFdtdGFOR1ZXYUVoT1IyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSblphUldoelpERndXRTlYTVVwVFJYQnpXVEZvVjJOSFRuUldiWFJOWWxWd01sZHJhSEphTUd4VlRVUnNTbEp1WkhCWFZ6QTFaRzFLU0ZadGFHbGlTR1J3VTFWT1dtSldhRWxUYlU1cFlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhhR3RpVlZwNldWWmtVMkZIVWtoV2JGSmFUVzFvYzFsc1pFWmlNazUwVm01b2ExWXllRFZYYkdSU1pGWnNkRTlYZEd4Vk0yUnVXVEl4VjJWRmVIUlRibHBoVTBkMGQxTXhXalJsVm1oSVRrZGtTbEV3Um01VFZVNUNXakJzUkdKSFRtcGlTR2d4VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1sSklZVWhzYVUweVRtNVpiVEZYVFRCc1JtSklWbXRpVlZwNldWWmtVMVV4Y0ZsU2FrWmhWMFUwZDFWc2FFdGxWMGw2VTFjNVdWTkZjR3BaYld4Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCS2FsTlhjekZrYTJ4SVUyNWFZVk5IZEc1WmFrNUtXakZzZEU5WGRHeFZNRWwzV1RJMVYyRnRVa2xXYm14aFZUQktkMWt6YkVOalIwcDFWMjFvYVZJeWVISlVSM2d6WVZWNFIyVkliRmxTZWxKdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka2JHVlZTbkJaYWtwVFRsVTVjRkZ1YkdGWFJWWXhWMWN3TldFeVZsUlJhbXhaVTBWd2FsbHRiRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkdGNlpGbFRSWEJxV1cxc1Fsb3diRVJSYW14WlUwVndhbGx0YkVKYU1HeEVVVzVzWVZkR1NYaFpNakF3V2pKU1NWTnFSbUZXU0ZKcVdUSjROR1JYV2xkbFNHeFpVbnBXYWxreWVEUmtWbkIxVm01V1drMHhTbmRaYWtrd1dqSlNkRkp1VG1oV01VcHZXa1ZrVjFaR2EzbGhSM2hwVmpCV2RsbDZTazlpTVhCWVRWZG9VR0ZWU2xSWGJHaEhUVlp3V1ZScVFsUldlbFl6V2tab1VrOUdiRmhPVkZaUllWaGtibGxxU2t0alZuQllWR3BDVUdGVlNtOVpiVFZ5WTBWc1NXUkhUbXBpU0dneFUxVk9RbG93YkVoWGJscHFZVlZHZGxsclpGZE5SV3hIWkVoa2FtSlViRE5YYkdoTFRVZFdWR1F5Wkd0VFIzZ3pWMnhaZDFveVNYbFhWMlJWVFd0d2VGZHNaRTlOUlhoMFZtNVdhMU5GY0hkWGJHaE9ZakpOZVZSdE9XRldla1p2VXpGT2Nsb3lWWGhsU0d4WlVucFNibE5WVGtKYU1HeEVVVmRrU2xORk5IcFpWbWhUWVcxR1JGRlhPV0ZOYkZsM1ZsVm9TMlJ0VGtoV2JteHJVMGQ0VmxwV2FFTmlSWFJKVldwV2FsSXhWbmRUTVU1RFRqRm9TVk50VG1saFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZaRTloUjAxNVZsZGtWbE5GY0RKWk1HUlhaVmRTU1dKR1ZteFhSVXB6VkVkMFMxRnNWWGRXVkZwWlUwVndhbGx0YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVwM1YyMXNRbUl3YkZoUFYyeG9ZbFphY1ZwRldqQmtNazUwVDFoa1lWZEZiM2RhVmxsM1dqQndjRmRYWkVwWFJra3hXVEJrVm1SV1ozaFBXR3hoVjBWWmVGbFdhRXRpUm5CSFQxZGFURlV3U25CWk1qRlhZVWRHTm1SSFRtcGlTR2d4VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xJeWVIUlRWVTV2VFVkV1dWRnRlR2xOYkd4dVdXcEtTMk5XY0ZoVWFrSllUVEJLTlZscVRrTmlSMDUxVldwV1dWVXdSbTlWUmxGM1dqSlNTV0pJWkdGVmVsWnRWMFJPVTA1WFRraFdiVnBaWlZkMGJsa3lNVmROUjFKWlUyNVdTbEl4Y0c5WmEyaFBZa1U0ZUdWSWJGbFNlbEp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrV21KcmNITlhWbVI2VGpGb1NWTnRUbWxoVlVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlpFOWhSMDE1Vmxka1ZsTkZjREpaTUdSWFpWZFNTV0pHVm14WFJVcHpWRWQwUjFVeFZuSlNiSEJRWWtob05WZEZZekJhTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1V1Zaa1dsb3dkRVJTYmxwYVlsaENjMWRVVGxOWmJVNUpVMjVhYWxJeFdqVmFSV2h6V2tWc1JGZFhNVXBUUmtreFdUQmtWbVJXWjNoUFdHeGhWMFZaZUZsV2FFdGlSbkJIVDFkYVRGVXdTalZYYkdoVFRWZE9kRTVIWkdGaVZWcDZXWHBLVms0eGFFbFRiVTVwWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGdVFtRmhWVVoyV1dwS1MyTldjRmhVYWtKWVRUQktOVmxxVGtOaVIwNTFWV3BXV1ZVeWVHcFpNbmcwWkZWc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVcweGFVMHdiRzVUTUdRMFlrZFNSRkZ0ZUdsU01Wb3dVMVZqTldKVmJFaFBWMnhvWWxaYWNWcEZXakJrTWs1MFQxaGtZVmRGYjNkYVZsbDNZMFZzU1dSSFRtcGlTR2d4VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRnBOYW13eFdYcE9VbG95VW5SU2JrNUtVa1JDYmxwSE1VZGpNa1pZVlcxb2ExSXhXbFZYVkVwdllrZEtXRkpYT1d0VFIzZ3pWMnhOTVZwc1ozbFNibXhxWWxWWk1WZEVSVFJqTUd4SVZtNU9ZVlo2UW5kVWVrWTBaVlpvU0U1SFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVEWTBad2NGRlhPVXBYUm5CdldXdE9jbG95VG5SV2FrSnJWMFZ3TVZOVlpHRmhSMHBKVkcxNFVFMVlhRFZYUldNd1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SlRWZE9hbUpJYURGVFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VqQndOVmRzWkVkamF6aDRaVWhzV1ZKNlVtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RMkZzYkZsVWJYaEtVbXRLTlZscVRrTmlSMDUxVldwV1YxTkhlRE5YYkUweFZVWkdjbU5GV2xKTlZrVXlWMFZvUzFreVNuQlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNURZMFp3Y0ZGWE9VcFdlbXh3V1ZjeFYyRnRVa2RrU0dScVlsUnNNMWRzYUV0TlIxWlhUVWRrUzJGV2JHNVRWbWhUVGxkT1NGWllWbGxOVkd3MVYyeG9SMDFYUmxsVGJYaGhVbXBzYlZNeFRrTmhWMDUwVm0xb2FHVnVVbXBaTW5nMFpGVnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZaSE5pVld4RVlVZE9hbUpJYURGVFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKaFIwbDVVMjVHWVZZd05IZFdlazVEWlZkSmVsRnRlR3BpYkVreFYwWk9RMDlIV2tkbFNHeFpVbnBTYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUjAxc2JGaGxTRUpoVWpCWmQxZHNXazloYlVaSVZtNVNXbFV5WjNkYVZtaERZa1Y0UkZGdVdscGlXRUp6VjFST1UxbHRUa2xUYmxwcVVqRmFOVnBGYUhOYVJYUlhaVWhzV1ZKNlVtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUk1WbTVvTlZkRll6QmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFbFRiWGhyVTBaYU5WbHRiRU5pVm14WVpVaHdZVlpJVW1wWk1uZzBaRlZzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WWkV0bFZuQllVbTVLVUUxWWFEVlhSV013V2pCc1JGRlhaRXBSTUVadVUxVm5lRmt5VG5ObFNGWktVVEJHYmxOVlozaFpNazV6WlVoV1NsRXdSbTVUVldoTFlrZFNTVlp1YkdsaFZVbDNXVEkxVjJKRk9IaGxTR3haVW5wVk5WZEZhRXRaTWtwelpVaHNXVko2Vm5OYVZXaERaRzFPZFZWWFpHRmliRm94VjFST1UyTkhTWGxPUjJSaFRXeFpkMVpWYUV0a2JVNUlWbTVzYTFOSGVGWmFWbWhEWWtWMFNWVnFWbXBTTVZVeVUxVldjMlJYVGtsV2FrSldVMFZ3TWxrd1pGZGxWMUpKWVhwb1dsWjZWVEZWUjJ4eVdqSlZlR1ZJYkZsU2VsSnVVMVZPUWxveGEzbFBXRlpxVFRGR2JsbFVTbGRPVjA0MVVWUnNTbEpVYkhCWlZ6RlhZVzFTUkU1WVNtRlhSM2cyVXpCb1UwNVhUa2hXV0VKUVRWaG9OVmRGWXpGWk1rNXpaVWhXU2xFd1JtNVRWV1J6WWxWc1JHRkhUbXBpU0dneFUxVk9RbG93YkVSUlYyUktVVEJLZVZkc2FITmxhM2gwWlVkNGFXSlhVWGRaVlU1Q1N6RkNWRkZZYUVwUk1XeDBWMFZvUzFreVNuQlJWMlJLVVRCR2JsTlZUa0phTWtWNVZtcFdhbVZVVm5wWGJHTXhZbTFTU0ZveVpGRlNSRUp1VkZoc1FtSlZjSE5sU0d4WlVucFNibE5WVGtKYU1HeEVVVmRrU2xJelVuTmFWbWhPWkZkR1dFNVhjR2xUUmxweVYyeG9UbUl4YUVSVGJWcFpUVEZKTVZrd1pGZGFiR2Q0WkRKc1RGVXdSblJUYlhnMFpWWm9TRTVIWkVwUk1FWnVVMVZPUWxvd2JFaGtSM2hzVjBVeE1WZHNhR0ZpUjA1MVlUSTVURkl6VW5OYVZrNXlXakZDVlU1WFRtcGlTR2d4VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1XTjRaREpzV1UxVWEzZGFWbWhEWWtabmVFOVhUa3BoV0dSdVYwVk9TMXBzWjNwVGJYaHFWMFphZDFreU1WZGhNV2Q0VDFkT1NtRllaRzVYUlU1TFdteG5lVTVVUm1sU00yaHZWMWN4TkdKR1ozaFBWMDVLWWtSQ01WbFdZekZoYlVwSlZtMTBZVmRGTVhaWlZFcFhUbFYwVjJWSWJGbFNlbEp1VTFWT1Fsb3diRVJSVjJSS1VUSjRhbGt5ZURSa1ZXeEVVVmRrU2xFeWRHNWFWRVkwWlZab1NFNUhaRXBSTUVadVUxVk9RbG93YkVsVGJYaHJVMFphTlZsdGJFTlZWMDUwVDFoa1lWZEZiM2RhVmxwVFRsZE9TRlpZVmxKaE1GcFZWV3hTTUZreVRuTmxTRlpLVVRCR2JsTlZaM2RhTVhCWVpVaHdZVlV3U25kWGJXeENZakZvU1ZOdFRtbGhWVVp1VTFWT1Fsb3diRVJSVjJSb1RXeFpNVmt6YXpGak1YQllUbGMxYTFJeVpHNVZSMjkzV2pBeFZGRlhNVXRpU0dnMVYwVmpNRm93YkVSUlYyUktVVEJHYmxOVlpEQmlSMVpaVkZoV2FWSXhXakZYYWs1VFlqQnNSV1I2YkVwU1JURnVVMjFzWVZreVRuTmxTRlpLVVRCR2JsTlZUa0phTUd4RVVXNUtZVmRIZURaVVJ6RnpaRlpyZVdWRVJtRlNNVm8yVXpCYU0yRldaM2hQVjJocVltdHdiMXBXV1RWYWJHaEVVMWhDU2xFeGJIUlhSV2hMV1RKS2NGRlhaRXBSTUVadVUxVk9RbG95UlhsV2FsWnFaVlJXYzFwSE1WZGxWMVpVV2pJNWFFMXNXVEZUTVU1Q1QxWkNjMlZJYkZsU2VsSnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa05aYkdoRVUyMWFXVTFyV2pWWk1qRkhUbFpuZUU5WFRrcGhXR1J1VjBWT1MxcHNaM3BUYlhocVYwWmFkMWt5TVZkaE1XZDRUMWRPU21GWVpHNVhSVTVMV214bmVVNVVSbWxTTTJodlYxY3hOR0pHWjNoUFYwNUtZa1JDTVZsV1l6RmhiVXBKVm0xMFlWZEZNWFpaVkVwWFRsVjBWMlZJYkZsU2VsSnVVMVZPUWxvd2JFUlJWMlJLVVRKNGFsa3llRFJrVld4RVVWZGtTbEV5ZEc1YVZFWTBaVlpvU0U1SFpFcFJNRVp1VTFWT1Fsb3diRWxUYlhoclUwWmFOVmx0YkVOVlYwNTBUMWhrWVZkRmIzZGFWbHBUVGxkT1NGWllWbEpXYTNCVVZWWmFjazR4YUVsVGJVNXBZVlZHYmxOVlRrTlBWV3hJVm01T2FrMXNWbTVhVkVZMFpWWm9TRTVIWkVwUk1FWnVVMVZPUWxvd2JFbFRiWGhyVTBaYU5WbHRiRU5WVjA1MFQxaGtZVmRGYjNkYVZscFRUbGRPU0ZaWVZsVk5SWEJNVld4V1QxWlZPSGhsU0d4WlVucFNibE5WVGtKYU1scFhaVWhzV1ZKNlZUVlhSV2hMV1RKS2MyVkliRmxTZWxaMFdrWmpNV0Z0VWtoaVNGcHBZVlZLZFZkc1l6RmlSMDUwVW1wQ1lWWldTbk5YYlRGSFRWZEtTVlZyT1ZwV2VrWnpVekJvUTJGSFVraGFlbHBLVTBVMGQxa3lNWE5rVm5BMVlUSmtiRTFZYURWWFJXTXdXakJzUkZGWFpGcE5hbXd4V1hwT1Vsb3lUa2xXYm14aFZtdEtiMXBGWkc1YU1VSlVVVzVrV2xkR1NuWldNM0JEV2tWc1JVMUViRkZWTUVwcVUxZHJOVmt3YkhCUlV6bEtVMFZLYjFwRlpHNWtWMDE2Vm0xc2FrMHhTalZaVm1NeFltdDBSVkpZVGtwVFJVcHZXa1ZrYm1SWFNraFdibFpoVFRGS2RsTXhUa0pPYTJ4SlVXMW9hMUl5WXpOWFJXaExXVEpLY0ZGWFpFcFJNRXB4V1dwSk1XVnRVa1JSYmxaYVZucEdjMVpWWkVkbFYxSkpWRmRrVVZVd1NqTmFSbWhMWWtaV1NGSnFRbWhSZWxZMVYyeG9RMk14YkZoVWJYaE1VWHBzYWxkRlRUUk9iR041VWxoU2JHRXdWakJXTW5kM1kyeG9SMlF6V2sxbFdHUnVWMFZPU21Sc2FFUlRXRUpOWW1zMU0xbHJaSE5OUlhSSFpESnNUVTFZWkhCVE1WSXdXVEpPYzJWSVZsbFRSWEJxV1cxc1Fsb3diRVJSYm14aFYwWkplRmt5TURCYU1rcDBVbTVTWVZaclNtOVpNalZUWld0NGRWTnRlR0ZUUmxweFYyeE9ibUl5U25SU2JsSmhWVE5rYmxrd1pFZGxWMUpFWVRKa1VWWkVVbTVhVkVZMFpWWm9TRTVIWkVwUk1FWnVVMVZPUWxvd2JFaFVibHBwWW1zMGQxTlZhRmRrTWs1SVZtNXNTbEpFUW01Wk1HUkhaVmRTUjJNelpGbFZlbFYzV1dwR1YyUXlUa2hXYm14U1RXdGFObGRzVG01alJUaDRaVWhzV1ZKNlVtNVRWVTVDV2pCc1JGRlhaRXBUUlhCeldrVm9WMlZYU25CUmJsWmFWbnBHYzFOVlRucGFNbEpaVVc1a1lWZEZiRzVUTTJ4RFpERnNXVk5xUWsxaWF6UjRWMWMxVDAxSFRuUmlTRlpoWlZka05GUkZUa05rTVd4WlUycENUV0pZYUhOWmJURnJUVWRHUkdGNlpGbFRSWEJxV1cxc1Fsb3diRVJSYW14TlVUQkthbE5YZUROaFZYUlZaRWRPYW1KSWFERmFiRm8wWlZab1NFNUhiRTFSTUhCM1dXeG9RMlJ0VG5WVlYyUnNaVlZLUjFwVmFFTmxWbkJaVkc1d1RWRXdTbFJYYkdoUFpESkplVTVZY0dGVk0yUnVWa2N4VjA1SFVrWlhha1pwWWxVMGQxbFdZelZrVlhoRVVXeE9ZVmRGV1hoWGJHaFBUVVpPU0ZKdVZtRlNNMmh6V1RKc1EwOVZiRWhYYm14cFRXcENibGRGVGt0aVIxWkpVVzVzWVZkRk5UWlhSVTVLVGpGb1NWTnRUbWxpVjNnd1dUQmpOV1ZYVWtSUmFtUktVbGQ0VkZscVRsZE5SbkJaVTJzMVdsZEdTbkZaVldSWFpWVnNTVTFIWkdGaWEzQXlXV3hPUTFrd2JIUldhbEpxVTBWd2MxbDZUazVrUjAxNVZtNXNhMkpXVmpCWmVrNVRZVWRTU0dKSGNFMVdNRFV5V1RJeFYxa3diSEZrUjA1cVlraG9NVmxXWTNoa01rbDZVMnBDU2xOSVRtNVZiR2hMWlZkSmVsTlhaRzFWTUVwMFdUSXdOV1JGYkVka01teE5ZVlJTTWxkc2FFdGxWMGw2VTI1d1RVMXNXalZaTWpBMVpWZE5lR1F5YkZCTldHZzFWMFZqTVdOSFNsbFJibHBxWW14R2JscFliRU5UYkZKSVQxYzFZVTFzV2pWVFZXZDNXakZ3ZFZOdVdtbFZNRXBxVTFkck1HUldhRVJUVkdSWlUwVndhbGx0ZURSbFZtaElUbGQ0YkZORlNqSlpNalZTV2pGcmVXVkhhR3BOTURGdVZXeG9iMlF5VG5SV2JuQnFUVlZLTlZscVRtRmpSbkJJVm01c1NsTklVbXBaTW5nMFpGVnNSRkZYWkVwVFJVbzFXVlpvWVdGSFVraFdWMlJxVFRGS2IxcEZaSE5oYTJ4SVlraFdhazB4U205WmJURlBZa1U1Y0ZGcldteFRSVW8xVjJ4b1QyVnNWa2xUYmxwcllsZDRjbGRzYUVwYU1VSlVVVzVXWVZkSFRtNVZiR2h2WkRKT2RGWnVjR3BOVlVvMVdXcE9ZV05HY0VoV2JteE1VVEp6TTFkRmFFdFpNa3B3VVZka1NsRXdTalphUldSSFRVZEdXRlJYWkdsU2VteDFWMnBLVjJWVk9YQlJhM0JWVW5wc2RWZHFTbGRsVlRoNFpVaHNXVko2VW01VFZVNUNXakpPU1ZOdVFtdGlWVmwzVjJ4T1EyRkhUa2xSVkZwS1VsWlpNRmt3YUV0aVIwMTZWRlJrV1ZORmNHcFpiV3hDV2pCc1JGRnVaR3BpVjNkNVYxWm9VMkpGYkVoU2FrWnJVakpvYzFsdE5WTmpSbXQ1VW1wQ1lWWkhPVzVXVnpGWFpVZFNXRlp1Y0d0U1YyaHZXVzB4VTJNeGNGbFRWR2hhVm5wVk1WUkZUa05oUjBwMVlUTk9TbEl3V2pGYVZrNHpXakZzV0U1VVZrMVJNRXBVVjJ4a1QyUnRUblJWVkdocVRURktOVmxXWXpGaWEzaEVVVzFvYVdKdGMzSlZSM0F3V1RKT2MyVklWbGxUUlhCcVdXMXNRbG93YkVSUmJtUnFZbGQzZVZkV2FGTmlSV3hJVkc1YWFXSnJOSGRaTWpWWFlXMVNTRTlZYkV4Uk1uUnVXbFJOZUZreVRuTmxTRlpaVTBWd2FsbHRiRUphTUd4RVVXNXdhMUl3V1hkWlZtUk9XakpOZVZacVFsVlNlbXgxVjJwS1YyVlZkRWhsU0ZwaFRXMVNjMWt5Y0haYU1VNVdaVWhhWVUxdFVuTlpNbXh5V2pKVmVHVkliRmxTZWxKdVUxVk9RbG93YkVSUlYyUktVbFpaTUZrd2FFdGlSMDE2Vkd4R2FtSlVhM2xaVm1SVFlrZE9jRTVZVG1sTmJWSjFWMnhvU2xveFFsUlJiazVwVFcxU2RWZHNhRXBPTVdoSlUyMU9hV0ZWUm01VFZVNURUMVpvU1ZOdFRtbGlTR2cxVjBWak1Gb3diRVJSVjJScVRXeFpkMVZXYUVOa01IUklVbTVrYWxKSE9XNVZiR2h2WkRKT2RGWnVjR3BsVjNSdVdsUkdOR1ZXYUVoT1IyUktVVEJHYmxOVlRrSmFNR3hHVm1wU2FsTkZjSE5aZWs1UFZWZE9kRTlVU21oV01VcHpXVEpyTVdNeVNYbGFSelZoVjBWc01WbHJZelZpYTNSSFpESnNVMWRIYUROWk1qRlhaVzFPTlZGc1JtcGlWR3Q1V1Zaa1UySkhUbkJSYTBwcVUwVkdibFpVU2xkTlJXeEVUa2hXVFdKSVpIQlRNVkl3V1RKT2MyVklWa3BSTUVadVUxVk9RbG93YkVSUmFrSm9Vako0TmxSSE1VZGtNazVFVVZSc1NsSXdXak5aTUZJd1dUSk9jMlZJVmtwUk1FWnVVMVZuZUZreVRuTmxTRlpaVTBWd2FsbHRiRUphTUd4RVVXNXdZVmRHU2tOYVJtaFRZakZTV0dKSGRHRlNNMmh6V2tSS1IyVldjRlJoUjJoclYwWktkbGRzWXpGTlIwWllWRzFvYTFJeFZUSlRWVnBMWWtkT1dWWnRlR3BOTVVwS1YxWmpNV0V5U2toV2JteFJVakJhTVZwV1RqTmFNV3hZVGxSV1RWRXdTbTlaYlRWeVl6QnNTRkp1Vm14Vk0yUnVWbGN4VjJGdFNYcFRiWFJSVTBVMGQxa3lNWE5rVm5BMVpESmtXbFo2VlRGVlIyOHdZMFZzU1dSSFRtcGlTR2d4VTFWT1Fsb3diRVJSVjJSS1VUQktSMXBWYUVObFZuQlpWRzV3VmxORmNESmFSekZ6WVRGd1dWTllWbWxTZW14MVYycEtWMlZWZUhSbFNGcGhaVmRvYWxOWGRGZE9SMDVKVTIxNGFrMHdNVzVXVldoTFpHMVNkR0pIZEdGWFJXeHVWVlpvVjAxSFJrUlJiRkpoVjBaR2JsUkhhekJrVm1oRVUxaENVRTFZYURWWFJXTXdXakJzUkZGWFpFcFJNRVp1VTFWb1UySXlSbGxVV0ZaYVYwWlpkMWxWWkZka1YxSklZa2R3V2xkR1NuTlRWVkYzV2pGc1dWWnFRbWhTTVZveFdrVmtjMkZzYkZsVmJYaFFUVmhvTlZkRll6QmFNR3hFVVZka2JWWnVhRFZYUldNeFdUSk9jMlZJVmtwUk1FWnVVMVZrYTJKSFVrUlJhazVvVjBaS2RsVldhRmROUjBaRVdqTkNTbE5JVW1wWk1uZzBaRlZzUkZGWFpFcFJNRVp1VTFWT1EyVldjRmxWYWtacVlsUlNibHBGWkc5alIwNDFUbGRvYTFkR1NuWlhiR014VFVkR1dGUnRhR3RTTVZVelYwVm9TMWt5U25CUlYyUktVVEJKTlZkRmFFdFpNa3B6WlVoc1dWSjZVbTVUVlU1Q1dqRnZlVlpxUWxKWFJVb3pVekJPY2s1cmJFWldhbEpxVTBWd2MxbDZUazVhTWxWNFpVaHNXVko2VW01VFZVNUNXakJzUkZGWFpFcFRSWEJ6V2tWb1YyVlhTbkJSYWtKb1VqSjRObFJITVVka01rNUZaRWRPYW1KSWFERlRWVTVDV2pCc1NVMVhUbXBpU0dneFYwVm9TMWt5U25CUlYyUktVVEJLTmxwRlpFZE5SMFpZVkZka1lVMXNXWGRWTVdNeFpXMVNTRkp1VmxwTmJGWjJVekZPUTA0eGFFbFRiVTVwWVZWR2JsTlZUa0phTUd4RVVWZGthbUpXV1hkYVJtaExaRlZzUmxacVVtcFRSWEJ6V1hwT1QxVlhUblJQVkVwb1ZqRktjMWt5YXpGalIwcDFWR3BDV2xaNlZuRlhiRkl3V1RKT2MyVklWa3BSTUVadVUxVm5lRmt5VG5ObFNGWlpVMFZ3YWxsdGJFSmFNR3hFVVc1d2ExSXdXWGRaVm1ST1dqSk5lVlp1Vm1GU1ZrcHZXa1ZrUm1JeVRuUldibkJRWVZWS1ZGZHNhRTlrTWtsNVRsaHdZVlV6Wkc1WGEyUkhUVVpzVldJeVpGcFdlbFV4VXpGT1EwNHhhRWxUYlU1cFlWVkdibE5WVGtKYU1HeEVVVmRrVTFkSGFETlpNakZYWlcxTmVGRnViR2xOTVhCM1YydGtWMlZWZUhSbFNGcGhUVzFTYzFreWF6RmpNa2w1V1RJNVdsRXhTVE5aTWpGWFpXdDRkVk50ZUdwVmVsWXpWMVpvVTJJeVdsUlJWRnBLVVRGSk0xVXllRTlWUmxKd1RsaHdhMU5GY0hkWmJURnJZMFp3ZFdFeU9XRlNNRmwzVjFaT2MwOVdiRVJoZW1SWlUwVndhbGx0YkVKYU1HeEVVVmRrU2xFd1JtNVpNakZYWld0NGRWUnFRbHBYUmtsNFdUTnNibVZWTVVWUldFSk5ZbGhDTmxscVNUQmlNWEJJVW1wQ1dsVXljek5YUldoTFdUSktjRkZYWkVwUk1FazFWMFZvUzFreVNuTmxTR3haVW5wU2JsTlZUa0phTWsxNlZXMW9hMUl5ZUhGVFZXaFBZa2RLZEZWc1ZtRlhSMmQzVXpCb1MySkhUalppTW1SV1lsWmFObGt3WXpWa1YwMTVWbGhPU2xKNlJuTlplazVQWVVadmVWWlVXa3BUUlRSM1dUSXhjMlJXY0RWaE1tUnNUVmhvTlZkRll6QmFNR3hFVVZka1NsRXdSbTVUVldoTFlrZE9OVTVZY0d0U01GbDNXa1pvVG1Jd01YRlJXR1JNVlhwV05sZHNZekZoTUhSSVRWZDRhazB3Tlc5WGFrcFdZMFU0ZUdWSWJGbFNlbEp1VTFWT1Fsb3lXbGRsU0d4WlVucFdhbGt5ZURSa1ZXeEVVVmRrU2xORk5IZFhWbWhUWTBac05WRnVjR0ZXZWxaeVZXeG9TMlZYU1hwVFZ6bHFZbFphTmxReWJFTlZNWEJaVkc1a2FVMXFWalpYYkU0eldqRndXVk51YkdsTk1Hc3lVMVZXVjJWWFRuUlBXR3hNVlRCSk0xZEZhRXRaTWtwd1VWZGtTbEV3Um01VFZVNUNXakZLV1dGSVpHcGlWbG8yV1hwR1EyVlhTWHBYYmtKaFVqRmFOVlJITVRSa2JHOTVXa2Q0YW1GVVZuTlpNalZMWkcxT2NrOVhiR2hpVmxweFdrVk9iMkpIVG5WVGJscHFZVmR6TTFkRmFFdFpNa3B3VVZka1NsRXdSbTVUVlU1Q1dqSk9kRlp1Y0UxaWF6UjNWMVpvVTAxWFRqVmhSM2hxWW10d01sa3lhekZoYlVsNVZXMTRURlY2Vm5oWmVrazFaRlYwU1dNeVpHRlhSWEExV1dwT1Nsb3lXbFJoZW1SWlUwVndhbGx0YkVKYU1HeEVVV3BzV1ZORmNHcFpiVFI0V1RKT2MyVklWa3BoV0dSd1YyeG9iMlF5U1hwVGFrSktVVEk1YmxkdE5VdGtiVXBVVVcxT1NtRlVVakpYVkVrMVpWWndWRTlYYUdwU01uUXhWMnBLVjJSV2NGbFRiV2hyVW5wc05WZEZUa3BPTVdoSlUyMU9hV0pXV1RCWk1HTTFaVmRTUkZGWVJrcFNNWEExV1dwSmQxb3hhRVJUV0ZaTlRXczFNbGt5TVZaa2JWSkpZa2hrWVZkRk1URlpNakZYWW0xR1dWUnFRbUZYUlhCcVUxZHdNRmt5VG5ObFNGWmhWMGRvTTFscVRrdE5SV3hFWWpKa1lXSnJjREpaYkU1RFdUQnNjRTVJV21GWFJYQTFXV3BPUzJWcmQzbGlTRlpyWWxWYWVsbFdaRkprUjA1MFZtNW9hMVl4V2paYVJVMHhZa2RPZFZOdVdtcGlTR1J3VkhwR05HVldhRWhPVjNoc1UwVktNbGt5TlZKYU1IUndVVzB4YW1KVWJEQlRWVm96WVZWNGNFOVhlR3hUUlVvMVYyeG9UMlZyZDNsV2FsSnFVMFZ3YzFsNlRrNWtWMDVKVTI1YWEySlhlSEpYYkdoTFdUQnNjV1JIVG1waVNHZ3hWMnhvYjJReVNYcFRha0pLVVRJNWJsZHROVXRrYlVwVVVXMU9TbUZVVWpKWGJHaHZaREpPZEZadWNHcGxWR3h5VjJ4a1QyUnRUblJTYWtKcFRUQndObFJFVGt0a2JWSlpWVzE0VFdKV1NuTlhWRWsxWlZac1dWVnVXbXBpU0dSd1ZIcEdOR1ZXYUVoT1dFSnBWMFZLTWxreU5WSmFNbFkxVVd4T1lWZEZXWGhYYkdoUFRVVnNTVTFIWkdGaWEzQXlXV3hPUTFrd2JIUldhbEpxVTBWd2MxbDZUazlaTUd4eFpFZE9hbUpJYURGWGJHaHZaREpKZWxOcVFrcFNNVXB6VjFSS05HRkhUblJXVjJScFlsVmFNRmRzYUU5a01XeFlWRzE0U2xKVldsWlZha3BYWkZWc1NXUkhUbXBpU0dneFUxVk9RbG93YkVsVmFsWnFVakZXYmxWWE1VZGxiSEJYVldwV2FsSXhXazVaVm1oUFRVVnNSVTFIWkZsUk1IQTJXa1ZvUzJOSFNuUmFSMDVLWVZWSk5GTlZXak5oVjBwMVZtNVNXbUpXV2pWWFJVNUtXakphUkZGdFRrcGlWWEF5V1dwS05HSkdiRmhPVjA1S1lWVkpORk5WV2pOaFYwbDVVMjVHWVZZd05IZFhSVTVLVGpGb1NWTnRUbWxoVlVadVUxVk9RMDFIVmxsUmJYaEtVbFZ3YjFsNlNsZFdWMVpaVVcxNFNsSkVRbTVaZWs1VFpWZEdXRTVYTlVwVFNHUnVXVzAxVjJSR2JIUldibXhLVTBoa2JsZFhNRFZrYlVwSVZtMW9hV0ZWU1RSVFZXTXhUVmRLU0dReVpHMVJNRWw0V1cweFUySkdjSFJpU0ZaaFZqRkZNMWRGYUV0Wk1rcHdVVmRrU2xFd1NYZGFWbWhEWWtWc1JsTnRhR3BOYkZwV1dsWm9RMkpHVWxoU2JtUlJVbXhHYmxkc2FHOU5SbkJZVGxkMGFtVlZTa1JYVm1oUFlrWmFTV0pJWkdGV1JGSnVWVVpPUTFaVmJFaFdhbEpyVWpGYU1WZHJhRTVhTWsxNlZXNXNhRlo2Vm5WVFZWRTBXakZvUkZOdWNHdFRSWEIzV1cweGExa3diSEJSVkZwS1VteEdibGRzYUc5TlJuQllUbGQwYW1WVlNqRmFSbU40WVZad1dWTlhaRkZsVlVwcVUxY3dNVTFYU2xoVGJYaHFZa2hrY0ZOVlVuWmFNVnBFVVcxNGJGTkdTbk5aYlRGVFpXdHNTRk51V21sTmJtaHpWMVpqTUZveFFqVlJiVTVLWWxWd01sbHFTalJpUm14WVRsZE9TbUZWUlRKVFZWcFNXakZ3V1dGRVFtRldlbFp5V1ROc1EyUlhVbGhsU0U1S1VrUm9ibGRGVGt0a1YxSllaVWhPV1ZFd2JHNVVNbXhEVmxWc1NGWnFVbXRTTVZveFYydG9UbG95VWxoT1YzUmhWakZ3ZDFsdE1WZGhNR3hGVDBka1dWRXdiM2haYlRGVFlrWndkR0pJVm1GV01VcHFVMWRzUWs1cmJFZGtNbXhwVFd0d2VGZHNaRTlOUm1oRVUxUmtXVk5GY0dwWmJXeENXakJzUkZGdGVHeFRSVW95V1RJMVVsb3lVa2xpU0dSaFZUQktTMWx0TlVOTlYxSkhVVzVzYVUwd1NuTlpNalZUVGxaQ1IxVlRkRXBTUkVKdVZtdE9RMkpIVmtsVmJYaHBZbFpLTmxOVlZrZGxWMDUwVW1wV1VWSXdXakZhVmxFd1dqRkNOVkZxWkZsVFJYQnFXVzFzUWxvd2JFUlJWMlJLVVRCR2JsZEVSVFZoUjA1MVUyMW9iRlpxYkcxVU1teERVMjFLZFZGcVJtdFNhMG8xV1dwT1EySkhUblZWYWxaUlVteEthVmx0TlZka1JteDBWbTVzV1ZaRVVUTlhSV2hMV1RKS2NGRlhaRXBSTUVrMVUxVlNkbG95VlhobFNHeFpVbnBTYmxOVlRrSmFNR3hFVVZka1NsSnVVak5aTWpBMVpERndXVk5xUW14Vk1FcDNXVzFzUTJOc2NGbGlTRnBoWVZWS1ZsZEdVblphTVZwSFpFaGthbUpVYkROWGJHaExUVWRXVjAxSFpHRlhSMmQzVjJ4ak1XRXlUalZSYTA1YVYwVTFjMVpyYUhOa01YQlVVVk01U2xOSVVtcFpNbmcwWkZWc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUlpUVlJyZDFwV2FFTmlSbWQ0VDBSYVNsSlZjRzlaZWtwWFZsZFdXVkZ0ZUZWV01Gb3pWVVZhVTFsdFRrbFRibHBxVWpGYU5WcEZhSE5hUmtKeFpFZE9hbUpJYURGVFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3haM2hQV0d4aFYwVlplRmxXYUV0aVJuQkhUMWRhVVdWdE9XNVhWekExWkcxS1NGWnRhR2xoYmxKcVdUSjROR1JWYkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1dVMVViREZhUm1RMFl6RnNXRk51VG1GV2FteHRWVWh3ZGxveGJIUlBXRnBwVWpGYWIxbHRjREJaTWs1elpVaFdTbEV3Um01VFZVNUNXakJzUkZGcWJFcFNSemx1VXpCV2MyUlhUa2xXYWtKV1UwVndNbGt3WkZkbFYxSkpZWHBvVjFKdVVqTlpNakExWkRGd1dWTnFRbXhXYWtGeVUxVk9XbG95VlhobFNHeFpVbnBTYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1RFdteG5lbE50ZUdwWFJscDNXVEl4VjJFeFozaFBRemxRWVZWS2NGbHFTVFZqTVhCWVVtNVdVRTFZYURWWFJXTXdXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYlZwWlRXcFZlRmxyWkRSaFJteDBaVWQ0V1UxVVozWlVNbXhEWVZkSmVVOVlUbUZXTUZveFZIcEdOR1ZXYUVoT1IyUktVVEJHYmxOVlRrSmFNR3hKVFVoQ1NsTklaRzVhVkVZMFpWWm9TRTVIWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCS2JWZEVUbE5PVjA1SVZtMWFXV1Z0T1c1VlZ6RkhaV3h3VjFWcVZtcFNNVnBPV1Zab1QwMUZPSGhsU0d4WlVucFNibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVEV214bmVsTnRlR3BYUmxwM1dUSXhWMkV4WjNoUFF6bFFZVlZLY0ZscVNUVmpNWEJZVW01V1VFMVlhRFZYUldNd1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJiVnBaVFdwVmVGbHJaRFJoUm14MFpVZDRXVTFVWjNaVU1teERZVmRKZVU5WVRtRldNRm94VkhwR05HVldhRWhPUjJSS1VUQkdibE5WVGtKYU1HeEpUVVJrV1ZORmNHcFpiV3hDV2pCc1JGRnFiRkJOV0dnMVYwVmpNRm93YkVSUlYyUmhWMGRvTTFscVRrdE5SV3hKVldwV2FsSXhWbTVXUkU1WFRVZE9TVlpxUWxaVFJYQXlXVEJrVjJWWFVrbGhlbWhYVWtSU2JsVkdUa05XVld4SVZtcFNhMUl4V2pGWGEyaE9XakZHV1ZOdWJGcFhSM00wVjFaak1VNVdRbkJSVXpsS1UwaFNhbGt5ZURSa1ZXeEVVVmRrU2xFd1JtNVRWVTVEV214bmVWSnViR3BpVlZreFYwUkZORTVyYkVaUFZFWnJVMFZKZUZwRldrTmxWMGw2VVcxNGFtSnNTVEZWUlZwVFdXMUtkVlp1VWxwaVZsbzFWMFpSTUU0eGFFbFRiVTVwWVZWR2JsTlZUa05QVld4RllqSmtiRTFZYURWWFJXTXdXakJzUkZGWFpFcFJNRVp1VTFWYU1HUXlUblJQV0dSaFYwVnZkMXBXVGtOalIwcHdVVzVLWVZkSGVESlhiV3hEVmxab1ZXSXlaRmRTYmxJeldUSXdOV1F4Y0ZsVGFrSnNWbXBDYmxkc2FHOU5SbkJZVGxkMGFtVlZTa1JYVm1oUFlrWmFTV0pJWkdGVk1FVjJVMVZvTUZreVRuTmxTRlpLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WFJFVTFUVWRXV1ZGdGVGbE5WR2N5VTFWV1MyRkhUWGxXYkZac1YwVktjMVpHWkVka01VSkhWVzFLYWxORmNESlpNR1JYWlZkU1NXSkhVbEZoYmxKcVdUSjROR1JWYkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1dVMVViRFZYYkdoSFRWZEdXVk50ZUdGU2FteHRWVWh3ZGxveGJIUlBXRnBwVWpGYWIxbHRjREJaTWs1elpVaFdTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VjBSRk5XUlhVbGhsU0U1YVZqQndlbGRzV1RWYWJFSTJZakprV21KVWJESlphMlJYWVVkS2NXUkhUbXBpU0dneFUxVk9RbG93YkVSUlYyUktVVEJKTlZOVlVuWmFNSFJHVDFSR2ExTkZTWGhhUlZwRFpWZEplbEZ0ZUdwaWJFa3hWVVZhVTFsdFRrbFRibHBxVWpGYU5WcEZhSE5hUmtKd1VWY3hTbE5JVW1wWk1uZzBaRlZzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSWlRWUnNOVmRzYUVkTlYwWlpVMjE0WVZKcWJHMVZTSEIyV2pGc2RFOVlXbWxTTVZwdldXMXdNRmt5VG5ObFNGWktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVYUkVVMVpGZFNXR1ZJVGxwV01IQjZWMnhaTlZwc1FqWmlNbVJhWWxSc01sbHJaRmRoUjBweFpFZE9hbUpJYURGVFZVNUNXakJzUkZGWFpFcFJNRWsxVXpGT1EwOUZiRWxrUjA1cVlraG9NVk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGbmVFOVVRbXhYUlVwelYwUkZORTVyYkVaVGJXaHFUV3hhVmxwV2FFTmlSbEpJWWtod2ExSklVbXBaTW5nMFpGVnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJaVFZSc05WZHNhRWROVjBaWlUyMTRZVkpxYkcxVlNIQjJXakZzZEU5WVdtbFNNVnB2V1cxd01Ga3lUbk5sU0ZaS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVhSRVUxWkZkU1dHVklUbHBXTUhCNlYyeFpOVnBzUWpaaU1tUmFZbFJzTWxsclpGZGhSMHB4WkVkT2FtSklhREZUVlU1Q1dqQnNSRkZYWkVwUk1FazFWSHBHTkdWV2FFaE9SMlJLVVRCR2JscHNVakJaTWs1elpVaFdTbEV3Um01VFZXUlhUa2RPU0U5WWJHdFJNRWwzV2xab1EySkZiRWRUYlhocVYwWmFjMWw2VGxOVGJVcDFVV3BHYTFKSWFGWlZSMnhDVDFWc1JtSklWbXBUUmxsM1ZsVm9TMlJ0VGtoV2JteHJVMGR6TkZaclVUQk9NV2hKVTIxT2FXRlZSbTVUVlU1RFlrZFdTVkZ1V21waWJFWnVXa1ZvYzJReGNGUlJiRTVoVjBWWmVGZHNhRTlOUmxGNlZtcENhbE5HV1hkVlJWcFNTekJzUlUxSFpGVk5NVmwzV1RCb1YwMUdWa2xUYmxwcVVqRmFOVnBGYUhKUFJscEZUa1JrV1ZORmNHcFpiV3hDV2pCc1JGRnRlR3hUUlVveVdUSTFVbG95UmxoT1ZFSmhWMFZ3ZEZkV1pFOWlSV3hIVTIxNGFsZEdXbk5aZWs1VFYwZEdXVlZ0T1ZKaVZHeHlXbFpTTkZaVmJFVk5SMlJhVm5wVk1WVkhiRU5pUjFaSlZXMTRhV0pXU2paVFZWcExZa2RPV1ZadGVHcE5NVVp1V2xSR05HVldhRWhPUjJSS1VUQkdibE5WVGtKYU1HeElVMjVhWVZOSGN6SlRWVnBTVGpGb1NWTnRUbWxoVlVadVUxVk9RMDlXYUVsVGJVNXBZVlZHYmxOVlRrTmlSMVpKVVc1YWFtSnNSbTVhUldoelpERndWRkZzVG1GWFJWbDRXVlpvUzJKSFNsaFdibFpyVTBVd05GWnJUa0pQVld4SVVtNVdiRlpFVW01VlJrNURUakZvU1ZOdFRtbGhWVVp1VTFWT1Fsb3diRVJSVjJSYVlsUnNjbHBXVVRST2EyeElVMjVhYVUxdWFITlhWbU13V2pKYVJGRnNUbUZYUlZsNFYyeG9UMDFHVGxoT1dHUnJWMFpGTkZaclVUQk9NV2hKVTIxT2FXRlZSbTVUVlU1RFQxVTRlR1ZJYkZsU2VsSnVVMVZPUWxveGNGbGhTR1JwVFRCdmQxTlZhRk5PVjA1SVZsZGtWbUpVYTNoYVJXUldUMFpPV0U1SFpGRlZNRXB2V1cwMWNtTXdiRVpQVkVaclVUQkZOVk5WWkVka1YxWlZUa2RrVVZVd1NUTlhSV2hMV1RKS2NGRlhaRXBSTUVadVUxVk9RbG95U2xoV2FrSm9VbnBzY2xReWJFTlViSEJaVlcwNWFVMXNSVE5YUldoTFdUSktjRkZYWkVwUk1FWnVVMVZPUWxveVRraFNha0pvVWtjNWJsbDZUbE5sVjBaWVRsYzFVRTFZYURWWFJXTXdXakJzUkZGWFpFcFJNRVp1VTFWa1IwMVhVa2hhZVRsUVlWVktjRmxxU1RWak1YQllVbTVXVUUxWWFEVlhSV013V2pCc1JGRlhaRXBSTUVadVUxVm9TMkpIVGxsV2JrSnFZbFphY2xWSWNIWmFNVlowVm01b2ExWXllRFZYYkdONFlrZEtkVlZ1Y0ZGU1YzZ3hWVWR3TUZreVRuTmxTRlpLVVRCR2JsTlZUa0phTUd4RVVXNXNZVmRGTlROWmFra3haV3h3VlU5RVdrcFNhM0J6V1RGb1YySkhUWHBWYkVKclYwWktNMXBHYUZKUFJsRjZWbXBDVVdGdVVtcFpNbmcwWkZWc1JGRlhaRXBUUkVFelYwVm9TMWt5U25CUlYyUktVVEJLYzFwVmFFTmtiVTUxVlZka2JFMTZRVE5YUldoTFdUSktkVTFYVG1waVNHZ3hWMnhvYjJReVNYcFRha0pLVWpKNE1WcEZaRmRsVm5CMFVtMXdZVlV3U2t0V1JXTTFZbXh2ZVZadWJFcFRTRkpxV1RKNE5HUlZiRVJSVjJSS1VqTm9NbGR1Ykc5a1JuQlpWRzV3V2xZeVVuTlZTSEIyV2pGc1dFNVVWazFSTUVZeFZFZHJNV1J0VGtsVmJrSnBUV3BXYjFscldrTmhSMDUwVW01U2FtVnRPVzVYVm1NeFRsWmplRTFJUWxCaFZVbDVXV3BLYzJFd09IaGxTR3haVW5wU2JsTlZUa0phTVhCWlUyNXNhVTB3Y0ZGWFZ6RjNZa1pyZWxWWE9XRlhSWEExV1dwT1NrNXJiRVpXYm14cVlsUnNOVlJGVGtKa1ZYaHdUbGhhYWxOR1NuZFpha2t4WVVkS1IxRnRhR3BpVlZvd1dUTndkbG94YkZoT1ZGWllUVlJDZDFReWJFTk5iVWw1WWtkMFVFMVlhRFZYUldNeFQxWm9TVk50VG1saVZsa3dXVEJqTldWWFVrUlJiWFJoVmpBMWVsZFdhRXRpUld4SVZtNVdhMVo2UW01V1ZXaExaRzFPU0ZadWJHdFRSM2hXV2xab1EySkZiRWxrUjA1cVlraG9NVk5WVGtKYU1HeEdVMnRLVmsxR1ZtNVZSazVDWkRCNFIyVkliRmxTZWxKdVUxVk9RbG94UmxkVGJFNVNWbTEwYmxWR1RrSmxSWGhIWlVoc1dWSjZVbTVUVlU1Q1dqRlJkMU5yZEZOV1ZUVldVMVZSZDFvd01YTmxTR3haVW5wVk5WZEZhRXRaTWtwMFZtcFNhbEo2YkRWYVJVNURZVEZ3V0ZSdVRscFhSWEJ6VTFWa1YyUlhVbGhOUjJSVlZqRlpkMWxWWXpWaE1HeEpaRWRPYW1KSWFERlRWVTVDV2pCc1JscEZXbGRSTUVVMVUxVmFNMkZXYjNsV2FrSlpVVEJzZWxkRmFFdFpNa3B3VVZka1NsRXdTbEpXUkVaUFZsVnNSVTFIWkZsUk1IQXpXV3BPVDAxR2FFUlRiVTVxWWtob01WcHNXalJsVm1oSVRsZDRiRk5GU2pKWk1qVlNXakZ3U0ZadGNHbFNNRm8xVjJ4T1EwMUhWbGxSYlhoS1VtdHdNbHBHYUZOaVJrSkdZa2hXU2xKRVFtNVhWbU14VGxWNFJGRnNRbXRYUmtadVZVWk9RMkZIU25WaGVYUktVa1JDYmxWV1dsTlRSbkJZVGtoV1ZtSlVhM2hhUldSV1QwWk9XRTVJVGtwU1ZHdDRXa1ZSTUU0eGFFbFRiVTVwWWxaWk1Ga3dZelZsVjFKRVVXMTBZVll3TlhwWFZtaExZa1ZzU1ZWcVZtcFNNVlp1VlRGak1XUXlVbGxWYkVacVlsUnNNMWRzYUV0TlIxWlZaVVpXVVdGVlJUVlRWVlpIVmxaSmVWWnVWazFoTW5neFdUQm9WMDFHVmtsVGJscHFVakZhTlZwRmFISlBSbHBGVGtSa1dWTkZjR3BaYlRGWFRrZE9TRTlZYkd0Uk1FcHlWMnhrVDJNeGJGbFRiWGhLVTBaSk1Wa3daRlphTVZGNlZtcENhbE5HV1hkV1ZXaExaRzFPU0ZadWJHdFRSM00wVm10Uk1Gb3hRbFJSYTBwWFVsZFNjMWx0YXpGVlIxSlpWVzVrYTFkR1NsSlpNakExWkRGd1dWTnFRbXhXU0doV1ZVZHdNRmt5VG5ObFNGWmhWMGRvTTFscVRrdE5SV3hJVlcxNFdrMXVhRzlaTWpGV1dqSlNTV0pJWkdGVk1FcFVWMnhvUjAxV2NGbFVha0pVVm5wV00xcEdhRkpQUmxwRlRrZGtVVlV3U2tOV2ExWnJZa2RLY0U1V1RtRlhSVmw0VjJ4b1QwMUdUbGhPV0dSclYwWkZORlpyVVRCT01XaEpVMjFPYVdKV1dUQlpNR00xWlZkU1JGRnRkR0ZXTURWNlYxWm9TMkpGYkVsVmFsWnFVakZXYmxaWE1WZGxSMUpZVm01d2ExSlVhM2hhUldoRFRWZFNSV1ZHVmxGaFZVVTFVMVZXUjFaV1NYbFdibFpOWWtWd2Mxa3hhRmRpUjAxNlZXeENhMWRHU2pOYVJtaFNUMFphUlU1RVpGbFRSWEJxV1cweFYwNUhUa2hQV0d4clVUQktjbGRzWkU5ak1XeFpVMjE0U2xOR1NURlpNR1JXV2pGV2RGWnVhR3RXTVZvMldrVmFhMk5IVWtoaFJVNXBUV3hKTVZWRldsSkxNR3hGVFVka1VsWnNTa2xYYkdNd1pGWldkRlp1YUd0V01WbzJXa1ZhYTJOSFVraGhSVTVwVFd4Sk1WVkZXbEpMTURoNFpVaHNXVko2Vm5OYVZXaERaRzFPZFZWWFpHRlNNVnB4V1d0a1IyVldjRlJSYWtKc1YwVktjMU5WV2t0aVIwNVpWbTVDYW1KV1dqQlhiR014VFVkT05tVkdWa3BTUkVKdVYxWmpNVTVXUW5CUlZHeEtVbFZhVmxWcVNsZGtWWGh6VTIxNGFsZEdXbmRaTWpGWFpFWndXRTVVUW1wbGJtaFdWVWR3TUZreVRuTmxTRlpoVjBkb00xbHFUa3ROUld4SVZXMTRZV0pWV1hoWmEyaFNXakZHVjFWcmFHRldlbEV6VjBWb1Mxa3lTbkJUV0U1S1lsUkdNbGRyYUZkak1YQlVUbGQ0YkZORlNqSlpNalZUWld0c1JVMUhaR3BpVmxvMFdrWmtjMlZXY0ZSaFIwNUtZbFp3TmxSRVRrTmxWMGw1VFZoQ2FrMXNXalpYUlU1S1kwVTVOVk5ZVGtwaFZHZ3lVMVZhVTJJeGNGUlJibEpwVFd4SmVGbHJaRlphTVd0NVVtMXdhRkl4V21wWmJUVmhZVWRPY0ZGdFdsbE5NbEp6VjFjMVEyRkdhM2xrUjFwcFZucHNjbHBHWkRSaVJtZDVWRzFvV2sxdGFITlhSRVUwV2pGQ1ZGRnFaRzFXU0ZKcVdXMTROR1JWZURWUFIyUlhVakpvYzFOVmFFdGlSMDVaVm01Q2FtSldWbTVYYlRWWFpGWnJlbFZ1UW1sTmFsWnFXVzB4WVUxWFNuUlVha0pvVm5wc01WTlZXVFZhYlZGNVZtMXNhbEl3V25GWlZFVTFaVlp3V1ZKcVJtaFhSWEJ6VjBSRk5HSXlTbGhQVjNSclZqTm9jMVV4WkZKalJXeEpaRWRPYVdKSVozZFVTR3MwV2pGRmVXRkhlRnBOYms1dVdWWmtXbG95U2xoUFYzUnJWak5vYzFOVlpITmxhMnhJWWtoV1NsSXdOVzlYVkVwdllrWm9TRTVYVG10VFJuQnZXVEpzUTJGc2JGaFViVGxoVmpGS1QxbHFTbE5OVjBwSVZsZGtVVlV3U20xWFJFNXJZa1pzZFZGdGFGcE5ibEp0V1d4ak5XRXlVbGhsUjNoWlRXczFiMWRVU205aVJtZDRUMWRLYVZaNmJISmFSbVEwWWtaT1dGVnRVbEJOV0dneFYwVm9VMk5HY0hCUlZ6bGFUV3RhY1ZsVlpGZGhNVkpZVDFkMGExWXphSE5UVlU1R1QxWkNWRkZxUm1saVZrcHpWMjB4YzJSV2NGaFZXRUpLVTBoU2FsbHRlRFJOUm1oSlZXNXNZVmRHU1hoWk1qQXdXakZyZVZKdGNHaFNNVnB5Vmtaak5XRXlVbGhsUjNoTllsWlpNRmt3WXpWbFYxSkpWRlJrV1ZKNlZtcGFSV2Q0V1RKS2MyVkVRazFsVkdodVZWUk9TMkpHYkZsVmJYaEtVakJXYmxsdE1WZE5NR3hJVFZoYVlWTkdXbnBYYkU1Q1lqRnNXRTVYZEVwVFJVbDRXa1ZPUTJOSFVrUlJia0pwWW14S01sTlZhRk5pTVhCVVVXMXdXbFl3TlhaWGJFNXpXVEpLYzJWRVFtdGlWVm8xVTFWamVHUnNjRWxXYms1aFZUQkZOVk5WV1RWYWJWRjVWbTFzYWxJd1duRlpWRVUxWkVkSmVWVnFSbWxTTVZwdFYxUktSMkZ0UmtoV2JWcFpUVmhTTUZscVNsTk5WMHBJVm10d1lWSnFRbTVWUms1RFRqRm9TRTVYVG10U2JtZDNWRWhyTkZveVNuUlBSMlJwVm5wc2NscEdaRFJpUlhoMFlrZDBTbEo2Vm5OWGJHUlRZa1p3UjJWSVZsbFRSa3BxV2tWTk5HUnJiRWhPV0ZwS1VucEdNbGRyYUZkak1YQlVUbGhPYVUxclduSlhiR1JTV2pKS2RGWnRlR0ZTTVZweVYwVmpNVmt5VWtkbFJFSmhWMGRvTTFscVRrdE5SMDQyWWpKa2JFMTZSbXBaYlhnMFRVZGFWV1JIVG1saVNHZ3hWMFZvVW1ScmVEVlJhMXBzVWpGYWNWcEdhRk5pUld4SlZXMDVZVlV3U2pCWmFrcFRUVmRLU0ZaWFpHRmliRm94VjFST1UyTkhTWGxPVjA1cFlraG5kMWRFUlRWTk1YQllVMjVrV2xZd05YbFhSRWw0Wkd4d1NWWnVUbUZYUlRWdFYwUkdNR1JIU1hsVmFrWnBVakZhUzFkcldYZGtWbXQ1VW01T2FWRXlhREJaYWtwVFRWZEtTRlpZVm1GWFIyZ3pXV3BPUzAxSFRqVmtNbVJwVm5wc2NscEdaRFJpUlhoRVVXNVNhVTFzU1hoWmEyUldaRlp3V1dGSVpHbE5NRzkzV1ROc00xb3haM2hQVkU1aFZqQndNMWRXWkU5amJHZDZVMjE0YWxkR1duZFpNakZYV214b05XRjZaRmxTZWxacVdXMTRORTFGZURWUFIyUldZbFpaZDFwR2FFdGtWV3hKVlcwNVlWVXdTbk5hVldoRFpHMU9kVlZ1Y0VwU2VteDBVMVZvVTJJeGNGUlJibEpwVFd4SmVGbHJaRmRaTWtwelpVUkNhbUpXV1hkYVJtaExaRlZzU0UxWVdtRlRSbHA2VjJ4Tk1XSkhWa2xSYmxwcVlteEtObFI2UmpSa1YxcFhaVWhXV1ZKNlVuQlVSVTVLWkd0NE5WRnVjR3RTTUZvMVdrVm9WMlF4YUVoT1NGcE5aVlZLVGxscVNrZGhNR3hJVm01V2ExTkZiekZUVldONFpHeHdTVlp1VG1GVk1FcHZXVzB4VWxveVRuUldha0pyVjBWd01WTlZaRmRPUjA1SVQxaHNhMU5GTldwWmJXczBaR3RzUjFWdE9XaFhSVEZ1VjJ4ak1VMUhUblZoTW1ScFZucHNjbHBHWkRSaVJXeElZa2h3U2xORmNITlhiVEZYWlZad1dFNVhjR0ZXTVVadVYxYzFjbG95U1hwVmJUbGhWMFZzYmxsc1l6VmhNbEpZWlVkNGFtVlZTalpaYm14RFkwZFNSRkZ0Y0ZwV2VsSjFXa1ZPUTJGV2NGUlJia0pwWWxob2QxbHRNVmRoTVdoSVRsUktXbGRGYkc1WFJFVTFUVEZ3V0ZOdVpGcFdNRFY1VjBSS1YwNUhUa2hQV0d4clUwVTFiVmRJYkVKUFZXeEhUMWRhYTAxc1duQlpNR1JIWVcxRmVFOVliR0ZYUlZsNFdWWm9TMkpHWjNoUFJ6bFBVa2QwTlZNeFVqQlpNa3B3VTIxU1RWRXdjREZYVm1ONFlrZE9OVk5VV2xobFZYQTFXV3BKTlUxRmJIQmtNbXhoWWxWYWNWcEZZelZsVjFaVVUxaE9TbUpXV1RCWk1HTTFaVmRTU1ZSWGJFMVJNSEF3V1dwS1UwMVhTa2hXVjJ4TlVUQndjbGRzWkdGalIwcDBWbGRzVFZFd2NHOVpiR1JTWVZWNFJGTnFRbWhTTW5nMlUxZHNNMkZXUmxsUmJrSlRUV3hhTVZkc2FFdGhSMUpJVDFoc1NtRllaSEJaZWs1VFlVZFNTR0pIY0VwaFdHUndXVEl3TlUxWFVraFdibkJLWVZoa2NGcEZhSE5rTVhCWlZHeE9ZVll5VW5kWmVrNVRZa2RPY0ZOWVRrcGlSa2t4V1RCa1YyVnNWblJXYlRWb1YwVTBkMWRzYUVwaFZYaEVVMjAxWVZkR1NrdFpiVFZQVFVac1dFNVhjR0ZWTUd4NlUxZHplR0ZIVGtSVFdFNUtZbGQ0TVZsNlRsTmhSMHAwVkcxNFNtRllaSEJaTWpGWFltMUdXVlJxUW1GWFJYQlVXV3BPVjAxR2NGUlRXRTVLWWxSV2IxbHNaRlpoVlhoRVUyNXNhVTB4V1hkWGJFNUtZekJzZFZSdGVHdFJNR3g2VTFjeGEySkhTblJXYm14YVYwWktjMVZXYUVOalJsWjBWbTAxYUZkRk5IZFhiR2hLWVZWNFJGTnFRbXBsVld4NlUxY3hhMkpIU25SV2JteGFWMFpLYzFaWE1EVk5WMUpJVm14V2JGZEZTbk5XYTFwT1lWVjRSRk50TldGV2VsWnpXVEl4UjAxR2NGWk5WM2hyVWpKb01sZHJWbGRrVjFKWVRWWldWbVZWYkhwVFZ6RnJZa2RLZEZadWJGcFhSa3B6VmxjeFYySnRSbGxVYWtKaFYwVndjMWRyV2xOT1YwNUlWbTV3VjFKck1YQlVSVTVMWlZkSmVsWnFRbUZYUlRWV1dsWm9RMkpIVGpWVFdFNUtZbGRTYzFwRlRrcGpNR3gxVVc1YWFrMHhSbkJVUlU1TFlrZEtkVlZ1YkdoV01WbzJVMWRzTTJGV2IzbFdibFpoVjBWd2IxcEZaRmRWTWtsNlZtcENZVlpzU2xWVFYyd3pZVmRLV0ZacVFtaFNlbXh5VTFkc00yRlhUa2xXYm5Cb1VUQnNlbE5YTVd0aVIwcDBWbTVzV2xkR1NuTldWekExVFZkU1NGWnVjRmRUUjNnelYyeG9UbUZWZUVSVGFrNXFZbGQzZDFkc1ZrZGtNa1pYVTIxNFlVMXRlRFphUldSWFpWWmFTRTlWWkdoV00yaHpVMWRzTTJGV1VYbFRia1poVmpBMGQxTlhiRE5oVjFKMFVtNU9hMVl4V2paVFYyd3pZVlpTV0ZacVFtaFNlbXh5VTFkc00yRldjSFJQV0d4VFZqQmFjVmxWVGtwak1HeDBWbTVXYTFaNlJqWlRWMnd6WVZkU1NXSklaR0ZWTUd4NlUxY3hNR0pIVmxSVFdFNUtZbXh3YjFscmFGZGlSV3h3WkRKc2ExTkhlRE5YYkdoT1lWVjRSRk5xUW1sTlZsb3pXVEJrVjJWV1JYbFNibkJoVlRCc2VsTlhNWGRrYlVaWVRrZHNUVkV3Y0hWWGJHaFRVbFpzV1ZWdGFGZFRSM2d6VjJ4YVUxWkZiSEJrTW14cVlsWmFORnBHWkhObFZuQllWVmRzVFZFd2NIQlpha3BUVGxWc2NHUXliR0ZOYkZveFYyeG9TMkZIVWtoV2JFSnJWMFpLTTFwR2FGTldWMVpaVVcxNFYxSnJNWEJVUlU1TFpWWndXVlJ1WkdsTmFsWTJWMnhPU21Nd2JIVlJiV2hyVWpKa2NGUkZUa3RoUjFKWlZXMDVTbUZZWkhCWGFrcFhaRlp3V1ZOdGFHdFNNVnBMV1cwMVEwMVhVa2RWYWxacVVqRmFWbFpZYkVwak1HeDFVVzVzYVUwd1NuTlpNalZUVGxWc2NHUXliR0ZOYkZsM1ZsVm9TMlJ0VGtoV2JteHJVMGQ0VmxwV2FFTmlSV3h3WkRKc1ZsTkZjREpaTUdSWFpWZFNTV0pHVm14WFJVcHpVMWRzTTJGV1JuSlNiRkpUVlRCc2VsTlhkelZhYlU1MFZtNW9hMVl5ZURWWGJHUlRXbXhvTlZOWVRrcGlSR3h0V1cwMVYyTXlTa2hTYld4cFVqRmFiVmRJYkVwak1HeHpUMWRhYTFOSGVETlhiRmsxV210c2NHUXliRkpXYTNCVVZWWmFjbUZWZUVSVGJWcFpUV3RhTlZreU1VZE9WbWQ0VDBkc1RWRXdjRkZWVjNSM1VteEZlRlZYYkUxUk1HOTZXVEl4YzAxR2NGWlhia0pwVWpGV2NGUkZUa3RrTWs1MFQxZHdZVmRGTlRaVFYyd3pZVlp3V0U1VVNrcGhXR1J3VlZaYVUxTkdTbFpPVjFwWFVtMTRVbFZzV2s5YWJFcHlUMVV4VTFKV1dsUldWVlpIVmxaT1JGTllUa3BpYTNCelYycEtjMlZ0VWtoV2JteFRWbnBWZUZsc1RrcGpNR3h5WWtoV2EySlZXbnBaVm1SVFZURndXVkpxUm1GWFJUUjNWV3hvUzJWWFNYcFRWMnhOVVRCd1Ixa3lOVXRrYlU1d1UxaE9TbUpWTlRKWGEyUldZVlY0UkZOdWJHRldNMmh2V2tWa1YyRXhTa2hTYWtKYVZUQnNlbE5YTUhoaVIwMTZWRzFvWVUxc1ZuQlVSVTVMWVcxSmVVNVljR3RUUlc5NFYxUk9VMlJ0VG5CVFdFNUtZbXMwZUZrd1pGZGxWV3h3WkRKc1lXSlViRFZaYkdSSFRVWlNXRlp1Y0dwTmExcDFWMnhPU21Nd2JISmpSbEpWVFVSU2NGUkZUa3RsYlZKSlUyNUNhV0pYVW5kWGJUVnlZVlY0UkZOcVJtbGlWa3B6VjIweGMyUldjRmhWVjJ4TlVUQnZlVmRXWkRSalJuQklVbXBDWVZack5YRlpWV1JYWkVac1ZGTllUa3BpYXpWeFdWVmtWMlJHYkZSVFdFNUtZbFJzY0ZsWE1WZGhiVkpFVTFoT1NtSldXbnBYYkdOM1lWVjRSRk51U21GWFIzZzJVMWRzTTJGWFNraFdibFpoVFRGS2RsTlhiRE5oVjBaWVRsZHdhVk5HV25KWGJHaE9ZVlY0UkZOdGVHdGlWbG8xV2xaT1NtTXdiSEpXYWxKcVUwVndjMWw2VGs5VlYwNTBUMVJLYUZZeFNuTlpNbXhLWXpCc2RHVklXbUZOYlZKeldUSnNTbU13YkhSbFNGcGhaVlZzZWxOWE5VOU5WbXgxVkdwQ2FtSlhlREZYYm14S1l6QnNkVk50ZUdwU00yaHZWMVJLVm1GVmVFUlRibkJxVWpOb2QxcEZUa3BqTUd4MVUyMTRZVk5HV25GWGJFNUtZekJzZFZGdGFHcGliRVp3VkVWT1MySnNjRmhPVjNocVlsVlpkMWRzVmxOaVJuQjBVbXBHYVZOR1NsQlhWbU40WWtWc2NHUXliR3RTTUZvMVYycEtWMDFGYkhCa01teHFVMFZ3TWxrd1pGZGxWMUpKWWtWNFlWZEhkSEJVUlU1TFlURndXVlJ0Y0dwaVYzZ3pXa1ZqTldWVmJIQmtNbXhhVjBVME1WbHRNVTVoVlhoRVUyNXNZVmRGVm5CVVJVNUxaVlp3V1ZSWGJFMVJNSEJ5VjFab1UyRkZiSEJrTW14cVYwWmFjMWt5TlhKaFZYaEVVMjFhWVZJd1dYZFhWazVLWXpCc2RWRnRhR3BpYXpWelUxZHNNMkZXYTNsaFIzaGFUVzVTVkZkc2FFZE5WMFpaVTIxNGFWWXhXakZhUldoT1lWVjRSRk51V21waVYzaDFXVlpqTVdGSFNrUlRXRTVLWW1zMWMxbHRNVk5TVm14WlZXMW9TbUZZWkhCWGJHaExaVlZzY0dReWJHcE5iRm94VjJ0V1YyVlhUblJQV0d4S1lWaGtjRmw2U2xkbFYxSjBWbTVzU21GWVpIQlhha3BYVFVaR1dWRnVaRXBoV0dSd1drUktjMDFIUmtaU2FrWnJVakprY0ZSRlRrdGhSMDVKVVZkc1RWRXdjRzlhUm1oVFlqRndXRTVVUW1oV01EVnZXa1ZrVm1GVmVFUlRibkJoVjBaS1Exa3dhRUpoVlhoRVUyNXdZVmRHU2tOYVJtaFRZakZTV0dKSGRHRlNNMmh6V2tSS1IyVldjRlJUV0U1S1ltczBkMWRXYUZOTlYwNDFVMWhPU21KWVFqWlpha2t3WVZWNFJGTnVjR0ZXZWxaeVUxZHNNMkZXY0ZsVGJteHBUVEJzY0ZSRlRrdGlSMDUxVTI1YWFtRjZiSEJaVnpGWFlXMVNSRk5ZVGtwaWEzQnpXVEZvVjJOSFRuUldWMnhOVVRCd2JWZEVUbXRpUm14MVVXMW9XazF1VW0xWmJHTTFZVEpTV0dWSGVGbE5helZ2VjFSS2IySkdaM2hQUjJ4TlVUQndiVmRFVG10aVJteDFVVzFvV2sxdVVtMVpNakZYWlVkU1dHSkliR0ZXYW14dFUxZHNNMkZYU2xoUFYzUnJWak5vYzFVeFpGSmhWWGhFVTIxd1dsWXdOWFpYYkdSVFZHMUplVlZxUm1sU01WWndWRVZPUzFwc1ozcGFSM2hhWW10S2IxZFVTakJhYlVwWVQxZDBhMVl6YUhOWmVrVTFXbXRzY0dReWJGcE5hMXA2V1d0T1MxcEZlRVJUYm5CcFRURmFOVmRVU2xkVk1rbDVUMVJDU21GdE9YQlRWelIzVUZOSmMwbHRiSFJqUnpsNVpFTkNOMGxGVm5samJUbDVTVWRHZWtsRmNFOVNXRXA1WWpOSloyWlRRbTFqYlRsMFNVWjNhVXhwT1d4amJrcDJZMjVPWTBscWRHTmpiSGgxV0VoS1kySnRWalJqUnpsNVpFTkNhbUpIUm5wamVVSktZbTVhYUdKSGJHdFZiVlo0WkZkV2VtUkZWbmxqYlRsNVNVZFdOR1JIVm5WYVNFMW5VbGhLZVdJelNXZGhWekYzWWtkV2RGcFhOVEJqZVVKTFZHdFdlV050T1hsSlNIUmpZMng0ZFVsRFFXZEpTRXBzV1ZkU2RtSnRlRFZKUjA1MldrZFZaMUJUUVRCTlJFRTNXRWhLWTJKcFFXZEpRMEo1V2xkR2EySXlOWE5sVTBKNVdsZDRhR1JIVm10U1IwWXdXVlE0TmtsSFJuVmxWSFJqWTJ4NGRVbERRV2RKUnpGc1l6Tk9hRm95VlRaSlNFNHdZMjFzZFZwNmRHTmpiSGgxV0VoS1kySnBRV2RKUTBKcVlqSTFlbVJJU2pGWk0xSjJZMmxvZEZwWVRucFpWMlJzVUhwdloyTXpVbmxoVnpWdVRFTkNlVnBYZUdoa1IxWnJVa2RHTUZsVU9EWkpSMFoxWlZOcloyVXhlSGxZUnpSblNVTkJaMGxEUVdkSlNFNHhZMGRXZVV0SE1XeGpNMDVvV2pKVmNFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlNGSnZZVmhOZFdKdFJuUmFVMEU1U1VaM2FWTlhOVEpaVjNod1drWmFhR0pJVm14WVEwazNXRWhLWTJKcFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWdFlqTktkRmxZVWs1YVdFNTZXVmRrYkV0SE1XeGpNMDVvV2pKVmMwbElTbXhpUjBZd1dsZFNSVmxZVW1oTFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYmtwc1lrZEdNRnBYVWtWWldGSm9TVVF3WjJOdFZuTlpXRkpzV2tWU2FHUkhSVGRZU0VwalltbEJaMGxEUWpsWVNFcGpZbXg0ZVZoSE5HZEpRMEZuWTBoS2NHUnRSakJhVTBKdFlqTktkRmxZVWs1YVdFNTZXVmRrYkV0SE1XeGpNMDVvV2pKVkwwOXBRbnBrU0Vwd1ltMWpjMGxJU214aVIwWXdXbGRTUlZsWVVtaFFlbTluV1ZjMU5VdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5aRWRvY0dONU5YUmFXRTU2V1Zka2JFbEVNR2RaUlVwb1drTkNVMXBZUmpGYVdFNHdTVVJ2WjBwSWRIUmFXRTU2V1Zka2JHWldlR05pYkhoalpFWkNlV0l6V25CYVIxWnJTVVZXZVdOdE9YbEpSVkpvWkVkRlowOXNlR05pYkhoalpFWjRZMlJEVWpkVGJFNVFWR2sxZW1SSVNuQmliV1J3V201cmIxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhLYkdKSFJqQmFWMUpGV1ZoU2FFeEdlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DTVdKdFVteGFiV3gxV2xkUmMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVVJLWTJOc2VIVkpRMEZuU1VOQlowbERRWEJtVm5oalltMUJOMWhJU21OaWFVRm5TVU5DT1ZoSVNtTmliakZqWTJ4NGRVbHBkMmxoVnpGM1lqTktNRWxJYzJkVmJWWjRaRmRXZW1SRGQyZFZiVlo2WTBjNWRXTXlWV2RtVTBKdFkyMDVkRWxHZDJsYVdHaDNZMjFXZW1NeGQybFBNWGg1V0VjMWNHSllRblpqYmxGblpURjRlVmhITkdkSlEwRm5VMWMxZDJSWVVsRmpiVGwzV2xoS01HVlRlR05qYkhoMVNVTkJaMGxHUW5saU0wSnNZMjVTTlZaSWJIZGFVM2hqWTJ4NGRVbERRV2RKUmtwc1kxaFdiR016VWtwaWJrSXhaRU40WTJOc2VIVkpRMEZuU1VaS2JHTllWbkJqYlZaMFdsYzFNR041ZUdOamJIaDFTVU5CWjBsR1NuWmtXRkpzVEVaNGVWaEhOVGxKUjFwNVlqSXdaMWhEU1hWTWFUaDFUR3gzYVU4eGVIbFlSelZ3WWxoQ2RtTnVVV2RsZVVKQ1kwZHNTRnBYTld4amJVWXdZak5KWjJaVFFtMWpiVGwwU1VaM2FVeHBOSFpNYVRSMldUSTVlVnBUT1doalIydDFXakpXZFZwWVNtaGtSemw1V0VOSk4xaElTbU5pYld4MFkwYzVlV1JEUWpkSlJXeDFaRzFHYzJGWFVsTmFXRVl4V2xoT01GSllTbmxpTTBsblpsTkNiV050T1hSSlJuZHBUR2swZGt4cE5IWmFXRXA1WWpOS2Vrd3liSFZrYlVaellWZFJkR050Vm5oa1YxWjZaRU0xYkdOdVNuWmpiSGRwVHpGNGVWaEhOWEJpV0VKMlkyNVJaMlY1UWtabFNFSjVXbGhPZWxWSVNuWmtiV3hyV2xoSloyWlRRbTFqYlRsMFNVWjNhVXhwTkhaYVdHaDNZMjFXZW1ONU5YZGpiVGt5WVZkU2JHTnNkMmxQTVhoNVdFYzFZMk5zZUhWYVdHaDNZak5LTUVsSFdqRmliVTR3WVZjNWRVbElTblprV0ZKc1VFVnNkVWxFTUdkWlZ6VTFURU5DVUdSWVVXZFFVMEpvWW01ckswdElkR05qYkhoMVNVTkJaMGxITldoaVYxVnpXRWhLWTJKcFFXZEpRMEowV2xoU2IySXlVWE5ZU0VwalltbEJaMGxEUW5kWldGSnZURVo0ZVZoSE5HZEpRMEZuV1ZoV01HRkRlR05qYkhoMVNVTkJaMGxJU214aldGWndZMjFXYTB4R2VIbFlSelJuU1VOQloyTnRWbnBqUnpsMVl6SlZjMWhJU21OaWJqQTJTVVpLZG1SWVVteFFSV3gxVEVOQ1VHUllVU3RKUTFsblpYbENkVmxYTVd4UWVtOW5Zek5TZVdGWE5XNUpTREJ3VDJsQ1RscFlVbTlpTWxKRldsZE9kbU50UmpCaU0wbG5aVEY0ZVZoSE5HZEpRMEZuVWxob2QyTnRWbnBqTVVKNVlqTmFjRnBIVm5sTWJYaDJXakprYkdOcE5YTmlNbU52V0VoS1kySnBRV2RKUTBGblNVTkJaMWxGVG5sYVYwWXdXbE5CYTJVeU1XeGtSMmgyV2tnd05rcElkSGRaV0ZKdlpsTkNlV0l6VmpCYVUwSXpZVmhTYjBsSFJqRmtSMmMyU2toMGFHUllVbTltVjBKalkyeDRkVWxEUVdkSlEyczNXRWhLWTJKcFFXZEpRMEpDWTBkc1NGcFhOV3hqYlVZd1lqTkpkVm95VmpCVFZ6VjZaRWRHZFZreVZXOUxVelY1V2xka2NHTXpVbXhqYkVwMlpGaFNiRXRHZUhsWVJ6Um5TVU5CWjBsRFFXZEpSelZvWWxkVloyWklkMmRhTWxaMVdsaEthR1JIVmtWYVYxcG9aRmQ0TUZSdFJuUmFVMmgzV1ZoU2IwdFRlR05qYkhoMVNVTkJaMGxEUVdkSlEwSTNTVWN4YkdSSGFIWmFRM2RuWTBkR01HRkRkMmRaV0ZZd1lVTjNaMk50Vm5oa1YyeDVXbGRSYzBsSVNteGpNMEoyWW01T2JFbElNV05qYkhoMVNVTkJaMGxEYXpkWVNFcGpZbWxCWjBsRFFubGFXRkl4WTIwMFoxcHVWblZaTTFKd1lqSTBaMHRHZUhsWVJ6Um5TVU5CWjBsRFFXZEpTRkpvWTIxa2JHUkViMmRVTWtweFdsZE9NRXhHZUhsWVJ6Um5TVU5CWjBsRFFXZEpTRUo1WWpOQ2JHTnVValZUTWxZMVQybENlbVJJU25CaWJXTm5aa05DZW1WWE1XbGlNbmR6V0VoS1kySnBRV2RKUTBGblNVTkJaMXBIVm5wWk0wcHdZMGhTZG1OcWIyZFZTRXAyWTBkV2VXUkliRVZhV0U1cVkyMXNkMlJIT1hsWVNFcGpZbWxCWjBsRFFYQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkNhbUl5Tlhwa1EwSjVXbGhPZDJJeU5YcGFVMEU1U1VkR2VtVlhOV3BKUTJoNVdsaEZOa2xHU214aldGWnNZek5SYzBsSVNteGplbTluVlcxV2VtTkhPWFZqTWxWd1NVUXdLMGxJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyUklTalZKU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1Vkc2JVbERhSGxhV0VZeFlWaEtiRnBEYTJkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIYkcxSlEyaDVXbGhHTVdGWVNteGFRelZwWWpKU05VbERXVzFKU0Vwc1kxTTFkRnBZVW05aU1sRm5VRlF3T1VsR2QybFNNRlpWV0VOSmNFbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RaTWpsMVl6TlJaMXBIUmpCWlUwRTVTVWhLYkdOVE5YaGtWMVo1WlZNMVpscEhSakJaVkhSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbllWZFpaMHREUm10WldGSm9TMVo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGtSMmg1WWpOaloySnRWak5KUld4MVpHMUdjMkZYVWxOYVdFWXhXbGhPTUZKWVNubGlNMGx2V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbldFTktUMko1UW10WldGSm9TVWRhZG1OcFFtbGlNbEkxU1Voa2NHUkhaMmRTTUZaVlNVaEtiR05ZVm14ak0xRjFXRU5KYzFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyVjVRbWxpTWxJMVQybENlVnBZUlhWaldGWnNZMjVyZFZneVVtaGtSMFZuWmxaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RMVkhSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbllWZFpaMHREUlc5a1NHeDNXbGM1YlVsSFVtaGtSMFZuVUZRd09VbEdkMmxqTTFKNVlWYzFibGhEU1hCTFZuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJSSGFIbGlNMk5uWW0xV00wbEZiSFZrYlVaellWZFNVMXBZUmpGYVdFNHdVbGhLZVdJelNXOVlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RZUTBwRldWaFNhRWxJVWpWalIxVm5ZVmhOWjJGWE5USlpWM2h3V2tNMVkwbHBlR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUWpkSlIwcDJXa2hyTmtsSVNteGpVelY0WkZkV2VXVlROV1phUjBZd1dWTkNPVmhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRndUekY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DZVZwWVJYVlpiVGxyWlZOQk9VbEZjRlJVTURSMVkwZEdlV015Vlc5YVIwWXdXVk5yTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5abFo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlIwNXZXbGRPY2xWdFZuaGtWMng1V2xjeGJHSnVVbnBMU0Vwc1kxaFdjR050Vm10TVEwSjVXbGhGY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkbVZuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbldUSTVkV016VVdkaU0wcHdXakpzZFZsWGQyZFFVMEpvWkRKR2NHUkRRbXRhV0U1cVkyMXNkMlJIT1hsTWJscG9Za2hXYkV0SVNteGpVM2RuWTIxV2VrdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSVlkwWTBoS2JHTXpUbEZqYlRreVlWZFNiR05wTlhwYVZ6VnJVa2RHTUZsVGFIbGFXRTF6U1VjNWVXRlhaSEJpYlVaelMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxOQ2FsbFlVbXBoUTBGdldsaEtlVXRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKR1pVaENlVnBZVG5wVlNFcDJaRzFzYTFwWVNYVmpNbFoxV2tWV2VXTnRPWGxMU0Vwc1kzbDNaMXBZU25sTFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RtVm5oNVdFYzBaMGxEUVdkSlEwRm5TVWd3TjFoSVNtTmliSGg1V0VjMFowbERRV2RKUTBGblNVZE9kbUp1VGpCSlNFNXNZMjVhYkdOcFFUbEpSVlkwWTBoS2JHTXpUbEZqYlRreVlWZFNiR05wTlc1YVdGSktZbTVPTUZsWE5XcGFVMmR3VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxIYkcxSlEyaG9aRmhTYjB0VFFucGFXRW95V2xoSmRWb3lWakJSV0VKM1MwTnNZbUpYVmpCaFJ6bHJXRk5vZDFsWVVtOU1RMEo2V2xoS01scFlTWFZrTW13d1lVVkdNV1JIWjNOSlNFcHNZek5DZG1KdVRteExWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkNiR0pJVG14SlJWWTBZMGhLYkdNelRsRmpiVGt5WVZkU2JHTnBOVzVhV0ZKS1ltNU9NRmxYTldwYVUyZHdURzFrYkdSRlJuZGpRMmR3VnpJeGJHUkhhSFphUmpCdlkwZEdNR0ZEZDJkamJWWjZZMGM1ZFdNeVZYQlBNWGg1V0VjMFowbERRV2RtVkhSalkyeDRkV1pXZUhsWVJ6VmpZMng0ZFZwdVZuVlpNMUp3WWpJMFoxa3lhR3haTW5SVFdsaEdNV0ZZU214aVYxWjFaRWhOYjJOdFZuaGtWMng1V2xkUk5rbEdTbXhqV0Zad1kyMVdkRnBYTlRCamVYZG5ZMjFXZUU5cFFsTmFXRVl4V2xoT01FdFRRamRZU0VwalltbEJaMGxEUW5CYWFVRnZZMjFXZUdSWGJIbGFWMUYxV1cwNWEyVlRhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWRzYlVsRGFHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMHRJVWpWalIxWjJXbWxDZVZwWVJqRmhXRXBzV2tNMWFXSXlValZKUkRBNVVGTkNZMGx0U25aaU1uaHNXVmMxWTBscFFXMUtiSGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVlU1YVdGdFZtcGtRelZ5V2xoc2VrdElTbXhqVXpWcFlqSlNOVXRUTlhOYVZ6VnVaRWRuY0VsSWVEaFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEYURCbFdFSnNZakpaWjJOdFZuaGtWMng1V2xkUmRWbHRPV3RsVTBGb1VGUXdaMWhEU21saU1qbHpXbGRHZFZoRFNXZEthVnBqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5HTWxsWGVIQmFSMFl3V2xaT2FtRkhWblJaVTJoNVdsaEdNV0ZZU214YVF6VnBZakpTTlV4RFFubGFXRVYxV1cwNWEyVlRhM0JZU0VwalltbEJaMGxEUVdkSlEwRm5TMVo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBJd1lVaEtkbVI1UW5WYVdHTm5VMWMxTWxsWGVIQmFSa3BzWTFoV2JHTXpVa1pqYmtwMlkybG9ZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEdkMmxVYlRobldXMDVhMlZUUW5aamFVSnBZakpTTlVsSVVubGtWMDR3WkZoS2JFbEhiSHBKUjJ4MVpHMUdjMkZYVVhWWVEwbHpXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNOMGxIU25aYVNHczJTVWhLYkdOVE5XbGlNbEkxU1VneFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TMVIwWTJOc2VIVkpRMEZuU1VneFkyTnNlSFZKUTBGblNVaEtiR1JJVm5saWFVSXdZMjVXYkU4eGVIbFlSelU1V0VoS1kySnNlSGxZUnpWdFpGYzFhbVJIYkhaaWFVSXlXVmQ0Y0ZwSFJqQmFWazVxWVVkV2RGbFRhSHBaTW1oc1lsZEZOa2xHU214aldGWnNZek5TU21KdVFqRmtSSGhvWW01cksweERRblpaYlhCc1dUTlJOa2xIUm5WbFUydG5aVEY0ZVZoSE5HZEpRMEZuV20wNWVVbERhSE5hV0ZGblZ6TkNlV0l6UW14amJsSTFURU5DTUdWWVFteFlVMEoyV21sQ1VGbHRjR3haTTFGMVdsYzFNR050Ykd4amVXaDZXVEpvYkdKWFJYQkxVMEkzV0VoS1kySnBRV2RKUTBGblNVTkJaMk16WkhCa1IwNXZTVU5vYmxwWVVsRmpiVGwzV2xoS01HVldValZqUjFWdlpFaHNkMXBUYTNCSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RaTWtaNldsTkNVV050T1hkYVdFb3daVlpTTldOSFZYVlJhMFpVVWxSd1kyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSGJHMUpRMmRvWWpKS2NWcFhUakJYTTBKNVlqTkNiR051VWpWWVUwRnRTbWxCYUdSSWJIZGFVelZtV0ROS2JHTllWbkJqYlZacldERTRjRWxIU25sYVYwWnlUekY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMkZYV1dkTFNGSTFZMGRXZGxwcFFuWlpiWEJzV1ROU1ltTklTblpqUjFaNVpFaHNaRWxEUlRsUVUwSXdaVmhDYkV4c09XWmtTR3gzV2xZNVprdFRRbmxhV0ZJeFkyMDBaMXB0Um5Oak1sVTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNhV050Vm1oaGVuUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RaTWtaNldsTkNVV050T1hkYVdFb3daVlpTTldOSFZYVlJWa3BUVVZack5saElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFuQmFhVUZ2U1ZjNWFXRnRWbXBrUm5SM1kyMDVkMXBZU2pCbFZqQm5TbWxaWjJSSWJIZGFVelZtV0ROS2JHTllWbkJqYlZacldERTRjRWxJU214a1NGWjVZbWxDYlZsWGVIcGFWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRzYlVsRGFIWlpiWEJzV1ROU1ltTklTblpqUjFaNVpFaHNaRXRXZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZGFkbU5wUVc5aVIxWXdTVWRXYzFwWE1HZGlNbGxuWWpKS2NWcFhUakJYTTBKNVlqTkNiR051VWpWWVUydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DYW1JeU5YcGtRMEl5V1ZkM1oxQlRRakpaVjNod1drZEdNRnBXVG1waFIxWjBXVk5vTUdWWVFteE1iRGxtV1ZoS2VWbFliR1pZZVhkbldsZDRiR0pUYXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlIyeHRTVU5uYUdSdFJuTkxVMEo1V2xoU01XTnROR2RhYlVaell6SlZOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblpsWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxbHVTbXhaVjNNM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMDVvWXpKVloxVklTblpqUjFaNVpFaHNWV1ZZUW14TWF6bERVMnRXUkZaRWNHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlIyeHRTVU5uYUdJeVNuRmFWMDR3VnpOQ2VXSXpRbXhqYmxJMVdGTkJiVXBwUVdoa1NHeDNXbE0xWmxnelNteGpXRlp3WTIxV2ExZ3hPSEJKUjBwNVdsZEdjazh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RoVjFsblMwWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBaMldXMXdiRmt6VW1KalNFcDJZMGRXZVdSSWJHUkpTSGc0V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpXRnBvWWtkc2ExbFlVbXhWTWs1dldsY3hhRXRJVWpWalIxVnpTVWM1YVdGdFZtcGtSblIzWTIwNWQxcFlTakJsVmpCd1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmNGaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTIxV01HUllTblZKUjFwb1lraE9iRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RaYmtwc1dWZHpOMWhJU21OaWFVRm5TVU5CWjBsRFFXZG1Wbmg1V0VjMFowbERRV2RtVm5oNVdFYzBaMGxEUVdkamJWWXdaRmhLZFVsSVVubGtWMVUzV0VoS1kySnVNV05qYkhoMVdFaEtZMkp0VmpSalJ6bDVaRU5DYldSWE5XcGtSMngyWW1sQ2JscFlVbEZqYlRsM1dsaEtNR1ZXVWpWalIxVnZaRWhzZDFwVWIyZFRWelYzWkZoU1VXTnRPWGRhV0Vvd1pWUjRhR0p1YXl0TFUwSTNXRWhLWTJKcFFXZEpRMEpxWWpJMWVtUkRRbkphV0d4NlNVUXdaMVF5U25GYVYwNHdURzEwYkdWWVRXOWtTR3gzV2xOck4xaElTbU5pYkhoNVdFYzBaMGxEUVdkaFYxbG5TMFo0ZVZoSE5HZEpRMEZuU1VOQlowbEhkR3hsV0UxMVlrZFdkVm96VW05SlJEUTVTVVJGWjBwcFdtTmpiSGgxU1VOQlowbERRV2RKUTBKeVdsaHNla3h0ZUd4aWJXUXdZVU5CT0ZCVFFYcEpRMWx0V0VoS1kySnBRV2RKUTBGblNVTkJaMkV5VmpWamVUVndZbTFPYzJSWFVteGplV2hqU1d3NVptUkliSGRhVmpsbVdFTkpjRWxEV1cxWVNFcGpZbWxCWjBsRFFXZEpRMEZuWVRKV05XTjVOV3hrYlZaNVpWTm5iMkV5VmpWTFUwRTVVR3g0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKaVdFTktabGd6VWpWalIxWm1XREYzYVV4RFFtTkpiRGxtWTIxV2VHUlhiSGxhVjFKbVdERjNhVXhEUW1OSmJEbG1ZbTVXYzJKSFJtbGlSMVptV0RGM2FWaFROWEJpYlU1elpGZFNiR041YUhKYVdHdHdXRWhLWTJKcFFXZEpRMEZuU1VOQlowdFdlSGxZUnpSblNVTkJaMHRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuWTIxV01HUllTblZKUmtKNVlqTkNiR051VWpWV1NHeDNXbE0xUTFGV1RrWlBNWGg1V0VjMFowbERRV2RtVTBKc1lraE9iRWxIYkcxSlEyaGpZMng0ZFVsRFFXZEpRMEZuU1VOQ2NscFliSHBNYlhoc1ltMWtNR0ZEUVN0UVUwRjRTVU5aYlZoSVNtTmlhVUZuU1VOQlowbERRV2RoTWxZMVkzazFjMXBYTlc1a1IyZG5VRVF3WjAxNVFXMUtiSGg1V0VjMFowbERRV2RKUTBGblNVZDBiR1ZZVFhWaFZ6VnFZa2hXYTFwWVRXOVlRMHBtV0RKR2VXTnRSalZZTVRsalNXbHJaMHBwV21OamJIaDFTVU5CWjBsRFFXZEpRMEp5V2xoc2VreHRWakphV0VvMVMwTm9jbHBZYTNCSlJEQXJXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUm5SalNXdzVabGxZU25sWldHeG1XREYzYVV4RFFtTkpiRGxtWTIxV2VHUlhiSGxhVjFKbVdERjNhVXhEUW1OSmJEbG1ZbTVXYzJKSFJtbGlSMVptV0RGM2FWaFROWEJpYlU1elpGZFNiR041YUhKYVdHdHdXRWhLWTJKcFFXZEpRMEZuU1VOQlowdFdlSGxZUnpSblNVTkJaMHRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuWTIxV01HUllTblZKUmtKNVlqTkNiR051VWpWV1NHeDNXbE0xUWxWc1NrSlhWSFJqWTJ4NGRVbERRV2RKU0RCbldsZDRlbHBUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuWTIxV01HUllTblZKUmtKNVlqTkNiR051VWpWV1NHeDNXbE0xVUZGcmNFWlJNVkUzV0VoS1kySnBRV2RKUTBJNVdFaEtZMkp1TVdOamJIaDFXRWhLWTJKdFdqRmliVTR3WVZjNWRVbEhaR3hpYlZaNVdWaFNiRkpIVm0xWldGWnpaRVUxYUdKWFZXOWpSMFl3WVVSdloyTXpVbmxoVnpWdVMxTkNOMWhJU21OaWFVRm5TVU5DYW1JeU5YcGtRMEozWkZoS2JGVkhSakJoUTBFNVNVaENhR1JIYUdKTlJqQm5VRlF3T1VsR2QybE1NWGRwU1VRNFoyTkhSakJoUXpWNlpGZEtlbVJJU25CaWJXTnZUVk4zWjJOSFJqQmhRelZ6V2xjMWJtUkhaM0JKUkc5blkwZEdNR0ZFZEdOamJIaDFTVU5CWjBsSFRuWmliazR3U1VjMWFHSlhWbEZaV0Vvd1kzbEJPVWxJUWpGamJWWlJXVmhTYjB4dVNteGpSM2hvV1RKVmIwd3hlR05NZW5CaVdWTXhObEZUTVdGWVUzUmpXRU00ZGt4RFFtTkphVGxqU1dscmRXTXpRbk5oV0ZGdldFTkpkbGhEU1hCUE1YaDVXRWMxWTJOc2VIVkpRMEZuU1VoS2JHUklWbmxpYVVKMVdWY3hiRlZIUm5sa1NFMTFZMjFXYTJSWFRteExRMmgxV1ZjeGJFeERRbmRaV0Vvd1MxTkJPVkJwUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuV1RJNWRXTXpVV2RrV0VKM1dsaEpaMUJUUW5kWldFb3dWM3BDWkV4dVVuWldXRUozV2xoS1JGbFlUbXhMUTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VjMWFHSlhWV2RMZVVJeFkwaENiR05wUVhKSlNFSm9ZMjVSZFdNelZtbGpNMUo1WVZjMWJrdEVSWE5KU0VKb1kyNVJkV0pIVm5WYU0xSnZTMVIwWTJOc2VIVkpRMEZuU1Vnd2MwbEdkMmxZUTBsd1R6RjRlVmhITlRsWVNFcGpZbWxKYzBsdGJIUmpSemw1WkVOQ04wbEZWalJqU0Vwc1l6Tk5jMGxHU214ak0wSjJZbTVPYkV4RFFrOWFXR2d3VW01V2RWa3pVbkJpTWpSelNVWktiR05ZVm14ak0xSkpXVmMxYTJKSFZubEpTREJuV201S2RtSlRRbU5KYlZZMFkwaEtiR016VG1OSmFuUmpZMng0ZFdGWE1YZGlNMG93U1VoeloxTldTblprV0ZKc1kyc3hhR1JIVG05YVdFbG5abE5DYldOdE9YUkpSbmRwV2xob2QyTnRWbnBqZVRGNldsaEtNbHBUTVhwa1IwWXdZVmROZEZreU9YbGFWbmRwVHpGNGVWaEhOWEJpV0VKMlkyNVJaMlY1UWtaamJrcDJZMmxDT1VsSFdubGlNakJuV0VOSmRVeHBPV3hqYmtwMlkyNU5kbHBZU25saU0wcDZXRU5KTjFoSVNtTmliV3gwWTBjNWVXUkRRamRKUld4TllqSmtibHBZU1dkbVUwSnRZMjA1ZEVsR2QybE1hVFZqU1dwMFkyTnNlSFZZU0VwalltMVdOR05IT1hsa1EwSnFZa2RHZW1ONVFrWmxTRUo1V2xoT2VsVklTblprYld4cldsaEpaMlV4ZUhsWVJ6Um5TVU5CWjJOSVNuQmtiVVl3V2xOQ2VtUkhSakJoVjAxbllWYzFlbVJIUm5WWk1sVTJTVVZXTkdOSVNteGpNMDVSWTIwNU1tRlhVbXhqYVVFNVNVYzFiR1I1UWtabFNFSjVXbGhPZWxWSVNuWmtiV3hyV2xoSmIwdFVkR05qYkhoMVNVTkJaMGxJVGpCWldGSndXWGxDYzJJeVpHNWFXRWsyU1VWc1RXSXlaRzVhV0VrM1dFaEtZMkpwUVdkSlEwSjNZMjFzTWxsWVVteEpSMFozWTBSdloxSllhSGRqYlZaNlkzcDBZMk5zZUhWSlEwRm5TVWhDZVdGWVdtaGtSMVZuV1ZoV01HRkhWblZrUjJ4cVdWaFNiRTlwUWxOYVdFWXhXbGhPTUZOSFJuVmFSM2hzWTJwNGFHSnVhM05KUjBaMVpWTjNaMWxYTlRWTVEwSm9ZbTVyYzBsR1NteFpNamw1V2tSNGVtUklTbkJpYldOelNVZEdkV1ZVTkN0UE1YaDVXRWMxWTJOc2VIVkpRMEZuU1VoQ2VXRllXbWhrUjFWbldUSTVkV016VW5sa1YwNHdZak5KYjB0VFFqZG1Wbmg1V0VjMVkyTnNlSFZKUTBGblNVaE9NRmxZVW5CWmVVSjZXbGhTVFdJeVpHNWFXRWx2WWtjNWJsb3lWbmxQYVVKS1ZFYzVibG95Vm5sTFUwSTNXRWhLWTJKcFFXZEpRMEZuU1VOQloxSllhSGRqYlZaNll6RkNlV0l6V25CYVIxWjVURzE0ZGxveVpHeGphVUU1U1VkNGRsb3laR3hqYW5SalkyeDRkVWxEUVdkSlNERmpZMng0ZFZoSVNtTmlhVUZuU1VOQ2VscFlVa0pqU0VGdldWaENkMDlwUWtabFNFSjVXbGhPZWt0VFFqZFlTRXBqWW1sQlowbERRV2RKUTBGblVsaG9kMk50Vm5wak1VSjVZak5hY0ZwSFZubE1iWGgyV2pKa2JHTnBOWE5pTW1OdldFTktSbVZJUW5sYVdFNTZTVVpDZVdJelduQmFSMVo1U1VWR2QyTkRRbFJhV0ZGblRHazBkVmhEU1hCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VoU2IyRllUWFZaV0VKM1NVUXdaMWxZUW5kUE1YaDVXRWMwWjBsRFFXZG1Wbmg1V0VjMVkyTnNlSFZKUTBGblNVaE9iR1JGUmpGa1IyaE9ZVmRTYTJKSFZqTlpXRXBzUzBkR01XUkhhR3hpYmxKd1dUSkdNRnBVYjJkVmJWWjRaRmRXZW1SRmFHaGliVkp6V2xoSk9GbFhOVFZNUTBKb1ltNXJjMGxIUm5WbFUzZG5XVmMxTlV4RFFsTmFWMDUyWTIxUk9HTXpVbmxoVnpWdVRFTkNhR0p1YXl0UWFXdG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbEZWalJqU0Vwc1l6Tk9VV050T1RKaFYxSnNZMmsxYzJJeVpHNWFXRWwxWWtjNWJrdEdkMmxTV0doM1kyMVdlbU41UWxGamJUa3lZVmRTYkdOcFFrSmtXRkp2U1VaT2JHUkRRWFZNYVRWalNXbHJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZGtSMmh3WTNrMWFHUllVbTlhVnpVd1lWZE9hR1JIVldkUVUwSm9aRmhTYjFwWE5UQmhWMDVvWkVkVk4xaElTbU5pYVVGblNVTkNPVmhJU21OaWJIaDVXRWMwWjBsRFFXZGFNbFl3U1Voa2NHUkhhRUprV0ZKdlMwTnJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpTRXBzWkVoV2VXSnBRakJoUjJ4NlRHMUdNV1JIYUd4aWJsSndXVEpHTUZwVWRHTmpiSGgxU1VOQlowbElNV05qYkhoMVdFaEtZMkpwUVdkSlEwSnVXbGhTUW1OSVFXOUxWRzluVWxob2QyTnRWbnBqZVVJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VoU2IyRllUWFZaV0VKM1R6RjRlVmhITkdkSlEwRm5abFo0ZVZoSE5XTmpiSGgxU1VOQlowbElUakJaV0ZKd1dYbENibHBZVWtwaWJrNHdXVmMxYWxwVFozQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkNlVnBZVWpGamJUUm5VbGhvZDJOdFZucGpNVUo1WWpOYWNGcEhWbmxNYld4MVl6TlNhR0p0VG14UE1YaDVXRWMwWjBsRFFXZG1Wbmg1V0VjMVkyTnNlSFZKUTBGblNVaE9NRmxZVW5CWmVVSjZXbGMxYTFKSFJqQlpVMmg1V2xoTk5rbEdTbXhqTTBKMlltNU9iRXhEUW10WldGSm9UMmxDYUdKdWEzQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkNSbVZJUW5sYVdFNTZWVWhLZG1SdGJHdGFXRWwxWWtjNWJsb3lWbmxNYlhoMldubG9aMHBJZEhsYVdFMTFZMjFXZUV4dVFtaGtSMmc1U1VSdlowcElkRXRWTURsUFRHNU9NR050YkhWYU1teHRaVk5vYTFsWVVtaExXREZuUzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUW5sYVdFMTFZek5TYUdSSVZucExSRWwzVFVOcmRXRnVUblppYVdocldWaFNhRXRVZEdOamJIaDFTVU5CWjBsSU1XTmpiSGgxV0VoS1kySnBRV2RKUTBKNlpFZEdNR0ZYVFdkak1sWjFXa1pTYkdWSVVXOWpiVlo2VDJsQ1UxcFlUbmRpTWpWNldsTjNaMkpYVm5wak1rWnVXbFJ2WjJNelVubGhWelZ1UzFOQ04xaElTbU5pYVVGblNVTkJaMGxEUVdkamJWWjZURzVPTUZsWVVqRmplV2Q1VFVSQmNFeHVUbXhpYlZGdllsZFdlbU15Um01YVUyczNXRWhLWTJKcFFXZEpRMEk1V0VoS1kySnNlSGxZUnpSblNVTkJaMk16VW1oa1IyeHFTVWhPYkdKdFVrWmpia3AyWTJsb2VWcFlUVFpKUmtwc1l6TkNkbUp1VG14TVEwSnNZMjVLZG1OcWIyZFNXRXA1WWpOSmNFbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwSkdaVWhDZVZwWVRucFZTRXAyWkcxc2ExcFlTWFZpUnpsdVdqSldlVXh0Vm5samJUbDVWREpLY1ZwWFRqQkxSMVo1WTIwNWVVdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwSjVXbGhOZFdNelVtaGtTRlo2UzBkV2VXTnRPWGxNYlU1MldrZFZjRXh0Y0hwaU1qUnZaWGxDYkdOdVNuWmphVUk1UzFSMFkyTnNlSFZKUTBGblNVZ3hZMk5zZUhWbVZuaDVXRWMwYVV4RFNteGxTRUoyWTI1UlowdHBRbTFqYlRsMFNVWjNhVXhwT1dwaU0wcHNUREpHZDJGVE5XNWFWelZzWTIxR01HSXpTbU5KYW5SalkyeDRkVnBZYUhkaU0wb3dTVU52WjFwdVNuWmlVMEpqU1drMGRsa3lPWGxhVXprd1pWaENiR041TlhsYVYyUndZek5TYkdOc2QybFBNWGg1V0VjMWJHVklRblpqYmxGblMybENiV050T1hSSlJuZHBUR2s1YkdOdVNuWmpiazEyWVZjMU1sbFhlSEJhUXpGNVdsaEdNVnBZVGpCTWJWWjVZMjA1ZVZoRFNUZFlTRXBqWW0xV05HTkhPWGxrUTBGeFNVZGFlV0l5TUdkWVEwbDFUREpXTkdOSVNteGpNMDEyV2xob2QyTnRWbnBqZVRWM1kyMDVNbUZYVW14amJIZHBUekY0ZVZoSE5XeGxTRUoyWTI1UlowdHBRbTFqYlRsMFNVWjNhVXhwT1d4bFNFSjVXbGhPZWt3eVVteFpNamw1V1ZoU2RtTnVUWFpqYlRreFpFZFZkVnBIVm1waU0wcG9aRWM1ZVZoRFNUZFlTRXBqWW0xV05HTkhPWGxrUTBGeFNVZGFlV0l5TUdkWVEwbDFURE5TTldOSFZucFlRMGszV0VoS1kySnBTWE5KYld4MFkwYzVlV1JEUWpkSlJrcHNZMWhXYkdNelVXZG1VMEp0WTIwNWRFbEdkMmxhV0doM1kyMVdlbU14ZDJsUE1YaDVXRWMxYkdWSVFuWmpibEZuWW0xR2RGcFlUbmRaVjA1c1NVVkdWVkl5Vm5WSlNIUmpZMng0ZFVsRFFXZEpTRkkxWTBkVloxRnRSbnBhVmxJMVkwZFdUV0ZZVGpCSlJEQm5XRU5LZW1SSVNuQmliV1JqU1dsQ09FbEdkMmxpYmxaMFdXMVdlVmhEU1dkbVEwSmpTVzFLZG1JeWVHeFpWelZqU1dsQ09FbEdkMmxpTWtweFdsZE9NRmhEU1RkWVNFcGpZbWxCWjBsRFFqQmxXRUpzU1VWS2FHTXlWbFZsV0VKc1NVUXdaMk16VW5saFZ6VnVTVWgzWjJKdVZuUlpiVlo1U1VoM1oxbHRPWFppUjFab1ltbENPRWxITlRGaVIzZG5aa05DTVdKdFVteGFiV3gxV2xkUk4xaElTbU5pYVVGblNVTkNNR1ZZUW14SlJVcG9ZekpXVldWWVFteFVWMFozVUVaUloxcFlhREJhVnpWclkzbENRMWxZVG14V1NHeDNXbFEwWjFCVFFsVkpSMVkwWkVkV2RWcElUV2RqTTFKNVlWYzFibGhJU21OaWFVRm5TVU5CWjBsRFFXZFFlVUpqU1c1T01HTnRiSFZhTVhkcFdFaEtZMkpwUVdkSlEwRm5TVU5CWjA5cFFsVkpSMVkwWkVkV2RWcElUV2RpYmxaMFdXMVdlVmhJU21OaWFVRm5TVU5CWjBsRFFXZFFlVUpqU1cwMU1XSlhTbXhqYkhkcFdFaEtZMkpwUVdkSlEwRm5TVU5CWjA5cFFsVkpSMVkwWkVkV2RWcElUV2RaYlRsMllrZFdhR0pzZUhsWVJ6Um5TVU5CWjBsRFFXZEpSRGhuV0VOS2FXSXlPWE5hVjBaMVdFTktZMk5zZUhWSlEwRm5TVU5CWjBsRFFUWkpSbEZuV2xob01GcFhOV3RqZVVKMVpGZDRjMWhJU21OaWFVRm5TVU5CWjBsRFFXZFFlVUpqU1cwMU1XSkhlR05KYkhoNVdFYzBaMGxEUVdkSlEwRm5TVVJ2WjFaRFFteGxTRkpzWW0xU2VrbElWblZhUjFadFlWYzFiRnBHZUhsWVJ6Um5TVU5CWjBsRFFXZEpSRGhuV0VOS01XSnRVbXhhYld4MVdsZFNZMGxzZUhsWVJ6Um5TVU5CWjBsRFFXZEpSRzluV0VOS2RsbHRjR3haTTFKalNXcDBZMk5zZUhWSlEwRm5TVWRXTkdOSE9YbGtRMEl3WlZoQ2JFbEZiSFZqU0ZZd1ZVaEtkbU5IVm5sa1NHczRWa1EwWjFCVFFsVkpSMVkwWkVkV2RWcElUV2RSV0VwNVdWaHJPRmxYTlRWUWJIaDVXRWMwWjBsRFFXZEpRMEZuU1VRNFoyVXhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsR09XWlpXRXA1V1Zoc1psaDZiMmRUVnpWM1pGaFNVV050T1hkYVdFb3daVlI0VlZjeU5URmlWMHBzWTJ3d0swOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5abFo0ZVZoSE5HZEpRMEZuU1VOQlowbEViMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSblIzWTIwNWQxcFlTakJsVTBKd1ltbENjbHBZYkhaYWFVSlZXRlJ2WjFaR2RIZGpiVGwzV2xoS01HVldNR2RhV0dnd1dsYzFhMk41UWtOWldFNXNWa2hzZDFwV2VIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRXZTVWgwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjFneE9UQmxXRUpzV0RFNE5rbEZTbWhqTWxaVlpWaENiRlJYUm5kUVJsSmlZMGhLZG1OSFZubGtTR3hrVUdwMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxZ3hPWGxhV0VZeFlWaEtiRnBHT1daUWVtOW5XVzA1ZG1KSFZtaGlhblJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuV0RFNWRXUlhlSE5aVjBweldsWTVabEI2YjJkWmJUbDJZa2RXYUdKcWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DT1ZoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlJIQmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5aa05CYjFOWE5YZGtXRkpSWTIwNWQxcFlTakJsVkhoVlZ6TkNlV0l6UW14amJsSTFXRlEwWjBwcFFqZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEdPV1pqYlZaNFpGZHNlVnBYVW1aWWVqZzJTVWRLZG1JeWVHeFpWelEzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUmpsbVltNVdjMkpIUm1saVIxWm1XSG80TmtsSFNuWmlNbmhzV1ZjME4xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RtVTJ4alkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblprTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVVk1Wm1SSWJIZGFWamxtVDJsQ1ExbFlUbXhXU0d4M1dsVjRjR016VVRkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsR09XWmpiVlo0WkZkc2VWcFhVbVpZZWpnMlNVZEtkbUl5ZUd4WlZ6UTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSamxtWW01V2MySkhSbWxpUjFabVdIbzROa2xIU25aaU1uaHNXVmMwTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZG1WSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxJTURkWVNFcGpZbWxCWjBsRFFteGxTRUoyWTI1UloyUkliSGRhVTBKUVpGaFNkMlJZVWxGamJUbDNXbGhLTUdWVWVGVlFhVUU1U1VaUloxcFlhREJhVnpWclkzbENRbU51U21obFZIaG9ZbTVySzFoSVNtTmlhVUZuU1VOQlowbERRV2RRZVVJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuV0RFNWFHTnVTbWhsVmpsbVQybENVR1JZVW5ka1dGSlJZMjA1ZDFwWVNqQmxWSGhWVnpJMU1XSlhTbXhqYkRBclR6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZG1Wbmg1V0VjMFowbERRV2RKUTBGblNVUnZaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEdkSGRqYlRsM1dsaEtNR1ZUUW5CaWFVSnlXbGhzZGxwcFFsVllWRzluVmtaMGQyTnRPWGRhV0Vvd1pWWXdaMXBZYURCYVZ6VnJZM2xDUTFsWVRteFdTR3gzV2xaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFTOUpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuV0RFNU1HVllRbXhZTVRnMlNVVkthR015VmxWbFdFSnNWRmRHZDFCR1VtSmpTRXAyWTBkV2VXUkliR1JRYW5SalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbldERTVlVnBZUmpGaFdFcHNXa1k1WmxCNmIyZFpiVGwyWWtkV2FHSnFkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RZTVRsMVpGZDRjMWxYU25OYVZqbG1VSHB2WjFsdE9YWmlSMVpvWW1wMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRWNHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZG1RMEZ2VkROV01HTklWakJWU0VwMlkwZFdlV1JJYXpoV1JuUjNZMjA1ZDFwWVNqQmxWakFyU1VOWloyVXhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNabGd6U214aldGWndZMjFXYTFneE9DOVBhVUpwWWpJNWMxcFhSblZQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW1aWU1qVXhZa2Q0YUZsdGVHeFlNVGd2VDJsQ2FXSXlPWE5hVjBaMVR6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTUhCWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNIZG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEptV0ROU05XTkhWbVpZZW05blVXMUdlbHBXVWpWalIxWk5ZVmhPTUU4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ1psZ3pTbXhqV0Zad1kyMVdhMWd4T0M5UGFVSnBZakk1YzFwWFJuVlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbVpZTWpVeFlrZDRhRmx0ZUd4WU1UZ3ZUMmxDYVdJeU9YTmFWMFoxVHpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElNRGRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5DT1U4eGVIbFlSelJuU1VOQloxcFlhSGRpTTBvd1NVaFNOV05IVldkVmJWWjRaRmRXZW1SRmJIVmpTRll3VUVaUkswbEVNR2RUVnpWM1pGaFNVV050T1hkYVdFb3daVlI0VlZCcWRHTmpiSGgxU1VOQlowbEhWalJqUnpsNVpFTkNNR1ZZUW14SlJrcHNZMWhXYkdNelVsQmtXRkozWkZoUk9GWkVOR2RRVTBKUVpGaFNkMlJZVWxGamJUbDNXbGhLTUdWVWVGVlFhblJqWTJ4NGRVbERRV2RKUjFZMFkwYzVlV1JEUW5CaWJsSnNZMjFhYUZreVZXZFZiVlo0WkZkV2VtUkdaSEJrUjJoRFlqSlNOVkJHVVdkUVUwSm9ZbTVySzBsSFZqUmtSMVoxV2toTloxVnRWbmhrVjFaNlpFTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZFpiVGxyWlZSdloxWkVkR05qYkhoMVNVTkJaMGxJTVdOamJIaDFTVU5CWjBsSFZqUmpSemw1WkVOQ01HVllRbXhKUmtwc1kxaFdjR050Vm5SYVZ6VXdZM3A0VlVsRU1HZFpWelUxVUdsQk9VbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwSnBZakpTTlZCNmIyZFpiVGwyWWtkV2FHSnBRamhKUmtwc1kxaFdiR016VWtwaWJrSXhaRVI0VlZCcWRHTmpiSGgxU1VOQlowbElNRGRZU0VwalltbEJaMGxEUW14bFNFSjJZMjVSWjJSSWJIZGFVMEpUWWpOV01GcFVlRXBpYVVFNVNVZEdkV1ZUZDJkVU0xWXdTVVF3WjFsWE5UVlFhVUU1U1VoMFkyTnNlSFZKUTBGblNVTkJaMGxEUW5SYVdGSnZZakpSTmtsRk1XeGtSMmgyV2tSMFkyTnNlSFZKUTBGblNVTkJaMGxEUW5kWldGSnZUMmxDZW1SSVNuQmliV00zV0VoS1kySnBRV2RKUTBGblNVTkJaMWxZVmpCaFJEZzJTVWRLZG1JeWVHeFpWelEzV0VoS1kySnBRV2RKUTBGblNVTkJaMk50Vm5oa1YyeDVXbGRSTDA5cFFsTmFXRVl4WVZoS2JHSlhWblZrU0UwNFUxYzBLMDh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpTRXBzWXpOQ2RtSnVUbXhRZW05blZXMVdlR1JYVm5wa1JUa3haRWhDTVdSRWVGQmtXRkVyVHpGNGVWaEhOR2RKUTBGblpsUjBZMk5zZUhWbVZuaDVXRWMxYkdWSVFuWmpibEZuWVZjMU1GcFlTbTFaVjA1c1NVVnNUV0l5Wkc1YVdFbG5aVEY0ZVZoSE5HZEpRMEZuWWtjNWJrdEhNV3hqTTA1b1dqSlZMMDlwUW1oaWJtdHpTVU0wZFV4dE9YZGtSMngyWW0xR2MxVkhSbmxaVnpGNlQybENhR0p1YkdKWVUyczJTVWhhZG1GWFVUZFlTRXBqWW1sQlowbERRbXhqYmtwMlkyczVhV0Z0Vm1wa1EyaHNZMjVLZG1OcWIyZFNXRXA1WWpOSmMwbEROSFZNYlRsM1pFZHNkbUp0Um5OVlIwWjVXVmN4ZWs5cFFtaGlibXhpV0ZOck5rbElXblpoVjFFM1dFaEtZMkp1TVdOamJIaDFXbGhvZDJJelNqQkpSMVoxWkZjd1oxVklTblpqUjFaNVpFaHNWV1ZZUW14SlNIUmpZMng0ZFVsRFFXZEpSVXBDVlRCVloxQlRRWGRNUm5oNVdFYzBaMGxEUVdkUlZrcFRVVlpyWjFCVFFYaE1Sbmg1V0VjMFowbERRV2RVTUVwTFVsVk9WVWxFTUdkTmFYaGpZMng0ZFdaV2VIbFlSelZzWlVoQ2RtTnVVV2RhVnpVeFlsTkNUbHBZVW05aU1sRm5aVEY0ZVZoSE5HZEpRMEZuVWpCV1ZVbEVNR2RZUTBwdVdsaFNZMGxwZUdOamJIaDFTVU5CWjBsR1FsQlZNVkZuVUZOQ1kwbHVRblpqTTFKalNXbDRZMk5zZUhWbVZuaDVXRWMxYkdWSVFuWmpibEZuWkVoc2QxcFRRbE5pTTFZd1dsUjRTbUpwUVRsSlIwWjFaVk4zWjFRelZqQkpSREJuV1ZjMU5WQnBRVGxKUlVaVlVqSldkVXhzU25aa1dGSnNVRVZzZFV4RFFsQmtXRkVyVHpGNGVWaEhOV3hsU0VKMlkyNVJaMlJJYkhkYVUwSktZbTVDTVdSR1FubGlNMEpzWTI1U05WQkdVU3RKUkRCblVWWlNTRnBYTkhWVFZ6VjNaRmhTVVdOdE9YZGFXRW93WlZSNFZWQnFkR05qYkhoMVdsaG9kMkl6U2pCSlNGSTFZMGRWWjFRelZqQmpTRll3VlVoS2RtTkhWbmxrU0dzNFZrUTBaMUJUUWtKV1JXUnNZbWsxVUdSWVVuZGtXRkpSWTIwNWQxcFlTakJsVkhoVlVHcDBZMk5zZUhWYVdHaDNZak5LTUVsSVVqVmpSMVZuVlcxV2VHUlhWbnBrUld4MVkwaFdNRkJHVVN0SlJEQm5VVlpTU0ZwWE5IVlZiVlo0WkZkV2VtUkZiSFZqU0ZZd1VFWlJLMDh4ZUhsWVJ6VnNaVWhDZG1OdVVXZGtTR3gzV2xOQ1UxcFlSakZhV0U0d1ZETldNR05JVmpCUVJsRXJTVVF3WjFGV1VraGFWelIxVlcxV2VHUlhWbnBrUlRreFpFaENNV1JFZUZWUWFuUmpZMng0ZFZwWWFIZGlNMG93U1VoU05XTkhWV2RWYlZaNFpGZFdlbVJHWkhCa1IyaERZakpTTlZCR1VTdEpSREJuVVZaU1NGcFhOSFZWYlZaNFpGZFdlbVJHWkhCa1IyaERZakpTTlZCR1VTdFBNWGg1V0VjMWJHVklRblpqYmxGblpFaHNkMXBUUWxOYVdFWXhZVmhLYkdKWFZuVmtTRTA0VmtOQk9VbEhSblZsVkRSblVGTkNRbFpGWkd4aWFUVlRXbGhHTVdGWVNteGlWMVoxWkVoTk9GWkVORGRZU0VwalltMVdOR05IT1hsa1EwSnJXbGRhYUdSWGVEQkpSVVpWVWpKV2RVOHhlSGxZUnpScFRFTktkR0l5VWpGaVIxVjFXbGhvZDJJelNqQmplVUU1U1VoS2JHTllWbkJqYlZWdldFTktiV041T1hkamJUbDBZVmhPYkdNeGQybExWSE5wVEVOSmRreDVRbFZoUjFWbllsYzVhMlJYZUd4SlIwNW9XVEpvYkZoSE5USlpXRWxuV0RFNU0xcFhTbmRaVjA1eVdESXhkbHBJVm5OYVZqbHFXVmRPYjFwV09XWkpSREJuWlRNd04xaEhOV05pYVRoMlNVWlNiMXBUUW5sYVdFWXhZVmhLYkVsSFdqRmliVTR3WVZjNWRWaEhOVzFrVnpWcVpFZHNkbUpwUW1aWU0yUnNXVzVDYUZreWRHWmpiVlo0WkZkc2VWcFdPV1pMUnpGMldraFdjMXBWYkd0TFUwSTNXRWMxWTJSRE9IWkpSVTV2V2xkT2NrbEhiRzFKUnpGMldraFdjMXBUUW5CamVVSndZbWxDYWxsWFRtOWFWbmgxV0VoU01sbFlTV2RaTWtacVlVZFdhMVJYT1d0a1YzaHNTVVF3WjFneE9UTmFWMHAzV1ZkT2NsZ3lNWFphU0ZaeldsWTVhbGxYVG05YVZqbG1Wekl4ZGxwSVZuTmFWV3hyV0ZSMFkySnNlREJoVjFsblMwZE9hRmt5YUd4YVJURjJXa2hXYzFwVFFXaFFWREJuWkZjMWExcFhXbkJpYlZaclMxTkNOMWhITldOa1JuZ3dZMjFXTUdSWVNuVkpSMDVvV1RKb2JGcEZNWFphU0ZaeldsTTFiR1ZJUW5aamJsSjZUekY0ZFZoSVVqbFlSelZqWkVNNGRrbEZUbmxhVjBZd1dsTkNhRWxITld4a2VVSjBZakpTTVdKSFZXZExSMFoxV2tOQ2QyUllVV2RoV0ZGbllWYzFNR0o1UWpCaFIxVm5XVEpHYW1GSFZYQllSelZqWkVoYWFHTnBRblJpTWxJeFlrZFZaMUJUUW1aWU0yUnNXVzVDYUZreWRHWmlWemxyWkZkNGJGZ3lUbWhaTW1oc1dERTVZbUpYT1d0a1YzaHNVMWRTWkVsRU1HZGxNWGgxV0VoU1kyUkRPSFpKUnpWMlNVY3hkbHBJVm5OYVV6VndXa05DZFZwWFZtdGFWMUpqWW14NE1GaElVWFpNZVVKMVlubENkR0l5VWpGaVIxVjFZa2M1YUZwSFZtdEpSelZzV2xkU2JGcEdlSFZZU0ZKalpFZFdOR05IT1hsa1NFMDJTVWgwT1ZoSE5XTmtTREEzV0VjMVkySnNlREJNZVRoblVsaG9iRmt6VmpCYVUwSXdZVWRWWjJKWE9XdGtWM2hzU1VkYU1XSnRUakJoVnpsMVdFYzFZMlJHT1daa01sWnBZMGRHYW1FeE9YUmlNbEl4WWtkV2VsZ3hPV0ppVnpsclpGZDRiRk5YVW1STWJVNW9Za2QzYjJKWE9XdGtWM2hzVEcxV05HTkhPWGxrU0UxelNVY3hkbHBJVm5OYVUzZG5ZbGM1YTJSWGVHeE1iVlkwWTBjNWVXUklUWE5KUmpsbVpESldhV05IUm1waE1UbDVXbGhHTVdGWVNteFlNVGh3VHpGNGRWaEhOV05rUXpoMlNVWktiR1JJVm5saWFVSXdZVWRWWjFwWWFIZGlNMG93WTNsQ2RscHBRakJoUjFWbllsYzVhMlJYZUd4WVJ6VmpaRWhLYkdSSVZubGlhVUowWWpKU01XSkhWWFZhV0doM1lqTktNR042ZEdOaWJqRmpZbXg0ZFVscGQybE1lVGhuWXpOU2FHTnVVakZqUm5oMVRIazRaMVJIT1doYVEwSnNZbTVTZVdWVFFuUmlNbEl4WWtkVloxbFhOV3RKU0Vwc1pFaFdlV0pwUW14bFNFSjJZMjVTZWxoSE5IWk1lVUpWWVVkc2VrbEhWblZrU0VvMVNVY3hkbHBJVm5OYVUwSndZM2xDZVZwWFdteGpiVloxV1RKV2EwbEhTalZKUnprd1lVZFdlVWxITVhaYVNGWnpXbGhOWjJNeU9HZGhXRkZuV1RKR2RVb3pVV2RaYlZWbllWYzFjMkZYTld4YVJuaDFaRzFHZVVsR09XWmtNbFpwWTBkR2FtRXhPV3hsU0VKMlkyNVNlbGd4T0dkUVUwSm1XRE5rYkZsdVFtaFpNblJtWTIxV2VHUlhiSGxhVmpsbVMwUlJOVTFwYXpkWVJ6UnBXRk4zYVdKdFJuUmFXRTFwVDJ4emFXTnRPWFprUTBselNXMWFhRmt6VW5aamJtdHBURU5LYkdWSVFuWmpibEo2U1dsM2FXSlhPV3RrVjNoc1NXbDNhVnBIVm0xaFZ6VnNTV2wzYVZsWE1XdEphWGRwWkVkb2NHTjVTWE5KYTBaM1lWVmtiR0p0Vm5sWldGSjJZMmxKYzBsdVRqQlpXRkp3V1hsSmMwbHVTblprV0ZKc1kzbEpjMGx1VWpWalIxWjZWVzFXYm1GWVRqQmFXRWxwVEVOS1ZXVllRbXhqTVVwc1dqSnNlbVJIVm5sSmFYZHBXakpXTUZOWE5YcGtSMFoxV1RKVmFVeERTazVaV0VGcFRFTktjR0p1VGpCWlZ6VnFXbE5KYzBsdVNteGFNbXg2WkVkV2VWVnRPVEZrUjFWcFRFTktkVmxYTVd4SmFYZHBZMjA1TVdSSFZXbE1RMHA2V2xoUmFVeERTbTVhVnpWc1kyMUdNRnBWUm5kaFZrcHNXakpzZW1SSFZubEphWGRwWkVoTmFVeERTbTVhVnpWc1kyMUdNRnBXU25aa1dGSnNWa2hzZDFwV1VsUkphWGRwV2pKV2RWcFlTbWhrUjFaT1dsaFNiMkl5VWtaaWJsWjBWa1pOYVV4RFNtNWFWelZzWTIxR01GcFdTbXhhTW14NlpFZFdlVnBYVWxWbFdFSnNZekZTVkVscGQybGpiVGt4WkVkV2VsWkliSGRhV0UxcFRFTktibHBZVVdsTVEwcDNZak5PTUVscGQybGFWelV3WTIxc2JHTjVTWE5KYldSc1ltMVdlVmxZVW14VmJUa3haRWRXVlZWNVNYTkpiVEZzWkVkb2RscERTWE5KYmtJeFl6Sm5hVXhEU201YVZ6VnNZMjFHTUZwV1NuWmtXRkpzWXpGU05XTkhWbnBKYVhkcFpETktjR1JIVmtKalIyeFRXbGRrY0dNelVteGpiRkoyVW0xc2MxcFRTWE5KYXpscFlXMVdhbVJEU1hOSmJscG9Za2hXYkdONVNYTkphekZzWkVkb2RscERTWE5KYlZwMlkydFdhRmt5WjJsTVEwcHNZbTVXZEdONVNYTkpibEkxWTBkVmFVeERTbkphV0d0cFRFTktNbGxYZURGYVUwbHpTVzVTTldOSFZucEphWGRwWkVjNVZtTklRbXhqYTA1b1l6SlZhVXhEU25GaU1teDFTV2wzYVZveVZqQlNSMFl3V1ZaU05XTkhWbFZWZVVselNXNUtiR05ZVm5CamJWWnJTV2wzYVZsdE9XdGxVMGx6U1cxa2JHSnRWbmxaV0ZKc1ZETldNR05JVmpCV1NHeDNXbFpTVkVscGQybGpiVlo2WTBjNWRXTXlWV2xNUTBwM1dWaFNiMGxwZDJsWldGWXdZVU5KYzBsdFpHeGliVlo1V1ZoU2JGTlhOWGRrV0ZKVlpWaENiRlpHVFdsTVEwcDNZMjA1ZDFwWVNqQmxVMGx6U1cxa2JHUkdRbmxpTTBKc1kyNVNOVlpJYkhkYVUwbHpTV3hDZVdJelFteGpibEkxVmtoc2QxcFRTWE5KYTBwQ1ZUQlZhVXhEU21aWU0wcHNZMWhXY0dOdFZtdFlNVGhwVEVOS1psZ3lOVEZpUjNob1dXMTRiRmd4T0dsTVEwcG1XRE5TTldOSFZtWlllVWx6U1d0R1UxVnJSbHBKYVhkcFdERTVhR051U21obFZqbG1TV2wzYVZRd1NrdFNWVTVWU1dsM2FXUXpTbkJrUjFaSFlWZDRiRWxwZDJsalNFcDJXVEpXZW1ONVNYTkpiVloxWkdsSmMwbHJSbFZTTUZaUFdERlNXbFZGVmxSWU1GcFFWRVZTUmxWc1FrSldSV2RwVEVOS2VWcFhaSEJqTTFKc1kydFdkV1JYTUdsTVEwb3dTV2wzYVZwVFNYTkpia2xwVEVOS2RVbHBkMmxZTVRsd1lsaENkbU51VWtWYVYxcG9aRmQ0TUVscGQybFlNVGxzWXpBeGRscElWbk5hVTBselNXMVNiRnB0UmpGaVNGRnBURU5LYTFwWFduQmliVlpSWTIwNWQxcFlTakJsVTBselNXMDRhVXhEU25wSmFYZHBXVk5KYzBsdGEybE1RMG94U1dsM2FWa3lPWFZqTTFKNVpGZE9NR0l6U1dsTVEwcEtZbTVhYUdKSGJHdFZiVlo0WkZkV2VtUkZWbmxqYlRsNVNXbDNhVkpZU25saU0wbHBURU5LYW1JeVVteEphWGRwWTIxV2MxbFlVbXhhUlZKb1pFZEZhVXhEU25SYVdFNTZXVmRrYkVscGQybGpNMVozV2xoSmFVeERTbTFpTTBwMFdWaFNUbHBZVG5wWlYyUnNTV2wzYVZOc1RsQlVhVWx6U1c1T01HTnRiSFZhTW14dFpWTkpjMGx0ZEd4bFdFMXBURU5LYzFwWE5XNWtSMmRwVEVOS2NHSnRUbk5rVjFKc1kzbEpjMGx0VmpKYVdFbzFTV2wzYVdORFNYTkphMVkwWTBoS2JHTXpUbEZqYlRreVlWZFNiR05wU1hOSmJYaDJXakprYkdOcFNYTkpiWGgyV25sSmMwbHVUakZaYms0d1kyMXNkVnA1U1hOSmJrcHNZMGQ0YUZreVZXbE1RMHA2WTBkNGNHUkRTWE5KYmtwc1draFdhbHBUU1hOSmJWRnBURU5LYUdNemJIVlplVWx6U1c1R01WcFlTalZKYVhkcFdESlNhR1JIUldsTVEwcDNXVmhLZWxwVFNYTkpiazVzWW0xU1JWbFlVbWhKYVhkcFl6SldkVnBGVm5samJUbDVTV2wzYVZoNVNYTkpiV1JzWkVWR2QyTkRTWE5KYm1Sd1pFZG9RbVJZVW05SmFYZHBXVmhDZDBscGQybFpXRll3WVVkV2RXUkhiR3BaV0ZKc1NXbDNhV015VmpCUldFSjNTV2wzYVdNeVZqQlJXRll3WVVVeGNGcEhVbk5hV0dSb1kyMVZhVXhEU25sYVdFVnBURU5LZW1SSFJqQmtXRTFwVEVOS2NXTXlPWFZKYVhkcFl6SldkVnBEU1hOSmJWWjVZMjA1ZVZReVNuRmFWMDR3U1dsM2FWcFlTbmxpTTBscFRFTktabGd5VG5sYVYwWXdXbFZLY0dKdFVuQmliV05wVEVOS2FtTnRWbWhrUjFWcFRFTktibHBZVWxCa01qVlJZMjA1ZDFwWVNqQmxWVkpzWXpKT2VXRllRakJpTTBscFRFTktNMk50YkRCWlYwcHpXbE5KYzBsdFRuWmliVnB3V2pOV2VWbFhTbk5hVTBselNXMVdkV1JYTVd4amJVWnBZa2RWYVV4RFNtWllNbFkwWTBjNWVXUkdUakJaV0VscFRFTktkMk50T1RCaU0xSTFZMGRWYVV4RFNtOVpXRTVRWkRJMVVXTnRPWGRhV0Vvd1pWTkpjMGx0VG1oaVIzZHBURU5LTVdKdFVteGFiV3gxV2xkUmFVeERTakpaVjNod1drZEdNRnBXVG1waFIxWjBXVk5KYzBsdVRtcGhSMVowV1ZOSmMwbHRPV2xoYlZacVpFTkpjMGx0Vm5OYVZ6QnBURU5LZDFsWVNqQkphWGRwV2pKV2RWcFlTbWhrUjFaRldsZGFhR1JYZURCVWJVWjBXbE5KYzBsdVVtaGpiV1JzWkVOSmMwbHVRbmxpTTBKc1kyNVNOVk15VmpWSmFYZHBXa2RXZWxrelNuQmpTRkoyWTJsSmMwbHVTbXhqZVVselNXMVNhR1JIUldsTVEwcHFZVWRXYW1FeFNteGpXRlp3WTIxV2RGcFhOVEJqZVVselNXMDVlV0ZYWkhCaWJVWnpTV2wzYVZwWVNubEphWGRwWXpKV2VXUnRWbmxKYVhkcFkyMVdlR1JYYkhsYVUwbHpTV3c1Wm1ReVZtbGpSMFpxWVRFNWRHSXlVakZpUjFabVdUSkdhbUZIVm1aWWVVbHpTV3c1Wm1ReVZtbGpSMFpxWVRFNWVWcFlSakZoV0Vwc1dERTRhVXhEU25SaU1sSXhZa2RXU2xwRFNYTkpiVTVvV1RKb2JGcEZNWFphU0ZaeldsTkpjMGxzT1daa01sWnBZMGRHYW1FeE9YUmlNbEl4WWtkV2VsZ3hPR2xZVTNkcFl6STVNV050VG14VmJUbDJaRU5KTmtscFNqa2lMQ0pwYlhCdmNuUWdleUJGY25KdmNpQmhjeUJLVGtWeWNtOXlJSDBnWm5KdmJTQmNJaTR2WlhKeWIzSnpYQ0k3WEhKY2JseHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1NXNTJZV3hwWkZKbGNYVmxjM1JGY25KdmNpQmxlSFJsYm1SeklFVnljbTl5SUdsdGNHeGxiV1Z1ZEhNZ1NrNUZjbkp2Y2lCN1hISmNiaUFnSUNCeVpXRmtiMjVzZVNCamIyUmxJRDBnTkRBd08xeHlYRzRnSUNBZ2NtVmhaRzl1YkhrZ2NtVnNZWFJsWkVSaGRHRS9PaUJoYm5rN1hISmNiaUFnSUNCdFpYTnpZV2RsT2lCemRISnBibWM3WEhKY2JseHlYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9iV1Z6YzJGblpUODZJSE4wY21sdVp5d2djbVZzWVhSbFpFUmhkR0UvT2lCaGJua3BJSHRjY2x4dUlDQWdJQ0FnSUNCemRYQmxjaWh0WlhOellXZGxLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbTVoYldVZ1BTQmNJa2x1ZG1Gc2FXUldZV3gxWlZ3aU8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVptOXliV0YwVFdWemMyRm5aU2h0WlhOellXZGxMQ0J5Wld4aGRHVmtSR0YwWVNrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXeGhkR1ZrUkdGMFlTQTlJSEpsYkdGMFpXUkVZWFJoTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lIQnlhWFpoZEdVZ1ptOXliV0YwVFdWemMyRm5aU2h0WlhOellXZGxQem9nYzNSeWFXNW5MQ0J5Wld4aGRHVmtSR0YwWVQ4NklHRnVlU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YldWemMyRm5aU0E5SUdCQ1lXUWdVbVZ4ZFdWemRDQTZJQ1I3YldWemMyRm5aWDFjWEc1Y1hIUlFjbTkyYVdSbFpDQkZjbkp2Y2lCRVlYUmhJRHBjWEc1Y1hIUmNYSFFrZTBwVFQwNHVjM1J5YVc1bmFXWjVLRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV3hoZEdWa1JHRjBZU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkVzVrWldacGJtVmtMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXlYSEpjYmlBZ0lDQWdJQ0FnS1gxY1hHNWdPMXh5WEc0Z0lDQWdmVnh5WEc1OVhISmNiaUlzSW1sdGNHOXlkQ0I3SUZKbGNYVmxjM1FzSUZKbGMzQnZibk5sSUgwZ1puSnZiU0JjSW1WNGNISmxjM05jSWp0Y2NseHVhVzF3YjNKMElIdGNjbHh1SUNBZ0lFbHVjSFYwVUhKdmNHVnlkSGtzWEhKY2JpQWdJQ0JRY205d1pYSjBlVlI1Y0dVc1hISmNiaUFnSUNCU1pYRjFaWE4wU1c1d2RYUXNYSEpjYmlBZ0lDQlNaWEYxYVhKbGJXVnVkSE1zWEhKY2JpQWdJQ0JTYjNWMFpTeGNjbHh1ZlNCbWNtOXRJRndpTGk0dkxpNWNJanRjY2x4dWFXMXdiM0owSUhzZ1FYQnBSMlZ1WlhKaGRHOXlJSDBnWm5KdmJTQmNJaTR1THk0dUwyTnZjbVV2WVhCcExtZGxibVZ5WVhSdmNsd2lPMXh5WEc1cGJYQnZjblFnZXlCSmJuWmhiR2xrVW1WeGRXVnpkRVZ5Y205eUlIMGdabkp2YlNCY0lpNHVMeTR1TDJWeWNtOXljeTlwYm5aaGJHbGtMWEpsY1hWbGMzUXVaWEp5YjNKY0lqdGNjbHh1YVcxd2IzSjBJSHNnUlhod2NtVnpjMUJ5YjNacFpHVnlJSDBnWm5KdmJTQmNJaTR1TDJWNGNISmxjM011Y0hKdmRtbGtaWEpjSWp0Y2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ5YjNWMFpUeEpiaUE5SUdGdWVTd2dUM1YwSUQwZ1lXNTVQaWg3WEhKY2JpQWdJQ0J1WVcxbExGeHlYRzRnSUNBZ2JXVjBhRzlrTEZ4eVhHNGdJQ0FnY0dGMGFDeGNjbHh1SUNBZ0lHRjFkR2dzWEhKY2JpQWdJQ0J5WlhGMWFYSmxaQ3hjY2x4dUlDQWdJSEpsYzNCdmJuTmxMRnh5WEc1OU9pQlNiM1YwWlR4SmJpd2dUM1YwUGlBbUlIc2dibUZ0WlQ4NklITjBjbWx1WnlCOUtUb2dUV1YwYUc5a1JHVmpiM0poZEc5eUlIdGNjbHh1SUNBZ0lFVjRjSEpsYzNOUWNtOTJhV1JsY2k1c2IyZG5aWEl1Ykc5bktGeHlYRzRnSUNBZ0lDQWdJR0JEY21WaGRHVWdKSHR0WlhSb2IyUjlPaVI3Y0dGMGFIMGdjbTkxZEdVZ2QybDBhQ0JoZFhSb09pUjdZWFYwYUgxZ1hISmNiaUFnSUNBcE8xeHlYRzRnSUNBZ1FYQnBSMlZ1WlhKaGRHOXlMbWRsZEVsdWMzUmhibU5sS0NrdWNtVm5hWE4wWlhKU2IzVjBaU2hjY2x4dUlDQWdJQ0FnSUNCdVlXMWxJSHg4SUdkbGJtVnlZWFJsUkdWbVlYVnNkRTVoYldVb2NHRjBhQ2tzWEhKY2JpQWdJQ0FnSUNBZ2V5QnRaWFJvYjJRc0lIQmhkR2dzSUdGMWRHZ3NJSEpsY1hWcGNtVmtMQ0J5WlhOd2IyNXpaU0I5WEhKY2JpQWdJQ0FwTzF4eVhHNGdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2hjY2x4dUlDQWdJQ0FnSUNCMFlYSm5aWFE2SUU5aWFtVmpkQ3hjY2x4dUlDQWdJQ0FnSUNCd2NtOXdaWEowZVV0bGVUb2djM1J5YVc1bklId2djM2x0WW05c0xGeHlYRzRnSUNBZ0lDQWdJR1JsYzJOeWFYQjBiM0k2SUZCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2x4eVhHNGdJQ0FnS1NCN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpjRzl1YzJVZ1BTQmhjM2x1WXlBb2NtVnhPaUJTWlhGMVpYTjBMQ0J5WlhNNklGSmxjM0J2Ym5ObEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WeGRXbHlaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnhkV2x5WldRdVltOWtlU0FtSmlCeVpYRXViV1YwYUc5a0lEMDlQU0JjSWtkRlZGd2lLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1JoZEdFZ1BTQnlaWEV1Y1hWbGNua3VYMlJoZEdFN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWkdGMFlTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCSmJuWmhiR2xrVW1WeGRXVnpkRVZ5Y205eUtGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lUbThnWkdGMFlTQm1iM0lnWW05a2VTQjNhWFJvSUVkRlZDQnlaWEYxWlhOMExsd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnWW05a2VUb2djbVZ4TG5GMVpYSjVMbDlrWVhSaElIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doS0hSNWNHVnZaaUJrWVhSaElEMDlQU0JjSW5OMGNtbHVaMXdpS1NsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJKYm5aaGJHbGtVbVZ4ZFdWemRFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aVJHRjBZU0IwZVhCbElHbHpJR2x1ZG1Gc2FXUXVYQ0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCaWIyUjVPaUJ5WlhFdWNYVmxjbmt1WDJSaGRHRWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ4TG1KdlpIa2dQU0JLVTA5T0xuQmhjbk5sS0dSaGRHRXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamFHVmphMUpsY1hWcGNtVnRaVzUwY3loeVpYRjFhWEpsWkN3Z2NtVnhLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5eWFXZHBibUZzSUQwZ1lYZGhhWFFnWkdWelkzSnBjSFJ2Y2k1MllXeDFaU2h5WlhFc0lISmxjeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRmVIQnlaWE56VUhKdmRtbGtaWEl1YzJWdVpFUmhkR0VvY21WekxDQnZjbWxuYVc1aGJDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JYaHdjbVZ6YzFCeWIzWnBaR1Z5TG5ObGJtUkZjbkp2Y2loeVpYTXNJR1Z5Y2lrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpYSjJaWElnUFNCRmVIQnlaWE56VUhKdmRtbGtaWEl1WjJWMFNXNXpkR0Z1WTJVb0tUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1lYVjBhQ2tnYzJWeWRtVnlMbWRsZEVGd2NDZ3BXMjFsZEdodlpGMG9jR0YwYUN3Z2MyVnlkbVZ5TG5kcGRHaEJkWFJvTENCeVpYTndiMjV6WlNrN1hISmNiaUFnSUNBZ0lDQWdaV3h6WlNCRmVIQnlaWE56VUhKdmRtbGtaWEl1WjJWMFNXNXpkR0Z1WTJVb0tTNW5aWFJCY0hBb0tWdHRaWFJvYjJSZEtIQmhkR2dzSUhKbGMzQnZibk5sS1R0Y2NseHVJQ0FnSUgwN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR05vWldOclVtVnhkV2x5WlcxbGJuUnpLSEpsY1hWcGNtVmtPaUJTWlhGMWFYSmxiV1Z1ZEhNc0lISmxjVG9nVW1WeGRXVnpkQ2tnZTF4eVhHNGdJQ0FnYVdZZ0tISmxjWFZwY21Wa0xtSnZaSGtwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ2gwZVhCbGIyWWdjbVZ4ZFdseVpXUXVZbTlrZVNBOVBUMGdYQ0ppYjI5c1pXRnVYQ0lnSmlaY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDRlBZbXBsWTNRdWEyVjVjeWh5WlhFdVltOWtlU2t1YkdWdVozUm9LU0I4ZkZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FvZEhsd1pXOW1JSEpsY1hWcGNtVmtMbUp2WkhrZ0lUMDlJRndpWW05dmJHVmhibHdpSUNZbVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWhkbUZzYVdSaGRHVlRZMmhsYldFb2NtVnhkV2x5WldRdVltOWtlU3dnY21WeExtSnZaSGtwS1Z4eVhHNGdJQ0FnSUNBZ0lDbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFbHVkbUZzYVdSU1pYRjFaWE4wUlhKeWIzSW9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWs1dklHSnZaSGtnYjNJZ1ltOWtlU0IwY25WamRIVnlaU0JwY3lCcGJuWmhiR2xrTGx3aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdleUJpYjJSNU9pQnlaWEV1WW05a2VTQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjY2x4dWZWeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z2RtRnNhV1JoZEdWVFkyaGxiV0VvYzJOb1pXMWhPaUJTWlhGMVpYTjBTVzV3ZFhROFlXNTVQaXdnYjJKcVpXTjBPaUJoYm5rcElIdGNjbHh1SUNBZ0lHWnZjaUFvYkdWMElGdHdjbTl3WlhKMGVTd2dkSGx3WlYwZ2IyWWdUMkpxWldOMExtVnVkSEpwWlhNb2MyTm9aVzFoS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJSE4zYVhSamFDQW9aMlYwVUhKdmNHVnlkSGxVZVhCbEtIUjVjR1VwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdVSEp2Y0dWeWRIbFVlWEJsTGtKQlUwVTZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXOWlhbVZqZEZ0d2NtOXdaWEowZVYwZ0ppWWdJWFI1Y0dVdVgxOXlaWEYxYVhKbFpGOWZLU0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjJKcVpXTjBXM0J5YjNCbGNuUjVYU0FoUFQwZ2RIbHdaUzVmWDNSNWNHVmZYeWtnY21WMGRYSnVJR1poYkhObE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdVSEp2Y0dWeWRIbFVlWEJsTGtGU1VrRlpPbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnZZbXBsWTNSYmNISnZjR1Z5ZEhsZElDWW1JSFI1Y0dVdVgxOXlaWEYxYVhKbFpGOWZLU0J5WlhSMWNtNGdabUZzYzJVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjJKcVpXTjBXM0J5YjNCbGNuUjVYU2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQmxiR1Z0SUc5bUlHOWlhbVZqZEZ0d2NtOXdaWEowZVYwcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNJRDBnZG1Gc2FXUmhkR1ZUWTJobGJXRW9kSGx3WlM1ZlgyRnljbUY1WDE4c0lHVnNaVzBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWFpoYkNrZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRkJ5YjNCbGNuUjVWSGx3WlM1UFFrcEZRMVE2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVzlpYW1WamRGdHdjbTl3WlhKMGVWMGdKaVlnSVhSNWNHVXVYMTl5WlhGMWFYSmxaRjlmS1NCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaGIySnFaV04wVzNCeWIzQmxjblI1WFNCOGZGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNGMllXeHBaR0YwWlZOamFHVnRZU2gwZVhCbExDQnZZbXBsWTNSYmNISnZjR1Z5ZEhsZEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwVUhKdmNHVnlkSGxVZVhCbEtIUjVjR1U2SUVsdWNIVjBVSEp2Y0dWeWRIazhZVzU1UGlrZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnYTJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0hSNWNHVXBPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaGNjbHh1SUNBZ0lDQWdJQ0JyWlhsekxteGxibWQwYUNBK1BTQXhJQ1ltWEhKY2JpQWdJQ0FnSUNBZ2EyVjVjeTVzWlc1bmRHZ2dQRDBnTXlBbUpseHlYRzRnSUNBZ0lDQWdJR3RsZVhNdWFXNWpiSFZrWlhNb1hDSmZYM1I1Y0dWZlgxd2lLU0FtSmx4eVhHNGdJQ0FnSUNBZ0lHdGxlWE11WlhabGNua29LR3RsZVNrZ1BUNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1cxd2lYMTkwZVhCbFgxOWNJaXdnWENKZlgzSmxjWFZwY21Wa1gxOWNJaXdnWENKZlgyNTFiR3hoWW14bFgxOWNJbDB1YVc1amJIVmtaWE1vYTJWNUtWeHlYRzRnSUNBZ0lDQWdJQ2xjY2x4dUlDQWdJQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXdaWEowZVZSNWNHVXVRa0ZUUlR0Y2NseHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1hISmNiaUFnSUNBZ0lDQWdhMlY1Y3k1c1pXNW5kR2dnUGowZ01TQW1KbHh5WEc0Z0lDQWdJQ0FnSUd0bGVYTXViR1Z1WjNSb0lEdzlJRE1nSmlaY2NseHVJQ0FnSUNBZ0lDQnJaWGx6TG1sdVkyeDFaR1Z6S0Z3aVgxOWhjbkpoZVY5ZlhDSXBJQ1ltWEhKY2JpQWdJQ0FnSUNBZ2EyVjVjeTVsZG1WeWVTZ29hMlY1S1NBOVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCYlhDSmZYMkZ5Y21GNVgxOWNJaXdnWENKZlgzSmxjWFZwY21Wa1gxOWNJaXdnWENKZlgyNTFiR3hoWW14bFgxOWNJbDB1YVc1amJIVmtaWE1vYTJWNUtWeHlYRzRnSUNBZ0lDQWdJQ2xjY2x4dUlDQWdJQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXdaWEowZVZSNWNHVXVRVkpTUVZrN1hISmNiaUFnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXdaWEowZVZSNWNHVXVUMEpLUlVOVU8xeHlYRzRnSUNBZ2ZWeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJuWlc1bGNtRjBaVVJsWm1GMWJIUk9ZVzFsS0hCaGRHZzZJSE4wY21sdVp5a2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2NIVnlaVkJoZEdnZ1BTQndZWFJvV3pCZElEMDlQU0JjSWk5Y0lpQS9JSEJoZEdndWMzVmljM1J5YVc1bktERXNJSEJoZEdndWJHVnVaM1JvS1NBNklIQmhkR2c3WEhKY2JpQWdJQ0JqYjI1emRDQnVZVzFsVUdGeWRITWdQU0J3ZFhKbFVHRjBhQzV5WlhCc1lXTmxLQzljWEM4NlcyRXRla0V0V2wwclhGd3ZMeXdnWENJdlhDSXBMbk53YkdsMEtGd2lMMXdpS1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtRnRaVkJoY25SekxuSmxaSFZqWlNnb2JtRnRaU3dnY0dGeWRDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhWd2NHVnlJRDBnY0dGeWRGc3dYUzUwYjFWd2NHVnlRMkZ6WlNncE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVZVzFsSUNzZ2RYQndaWElnS3lCd1lYSjBMbk4xWW5OMGNtbHVaeWd4TENCd1lYSjBMbXhsYm1kMGFDazdYSEpjYmlBZ0lDQjlMQ0JjSWx3aUtUdGNjbHh1ZlZ4eVhHNGlMQ0pwYlhCdmNuUWdleUJGZUhCeVpYTnpMQ0JTWlhOd2IyNXpaU3dnVG1WNGRFWjFibU4wYVc5dUxDQlNaWEYxWlhOMFNHRnVaR3hsY2lCOUlHWnliMjBnWENKbGVIQnlaWE56WENJN1hISmNibWx0Y0c5eWRDQjdJRWxTYjNWMFpYSk5ZWFJqYUdWeUlIMGdabkp2YlNCY0ltVjRjSEpsYzNNdGMyVnlkbVV0YzNSaGRHbGpMV052Y21WY0lqdGNjbHh1YVcxd2IzSjBJSHNnUlhKeWIzSWdmU0JtY205dElGd2lMaTR2WlhKeWIzSnpMMlZ5Y205eWMxd2lPMXh5WEc1cGJYQnZjblFnZXlCSlRHOW5aMlZ5SUgwZ1puSnZiU0JjSWk0dVhDSTdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nUlhod2NtVnpjMUJ5YjNacFpHVnlJSHRjY2x4dUlDQWdJSEJ5YVhaaGRHVWdjM1JoZEdsaklHbHVjM1JoYm1ObE9pQkZlSEJ5WlhOelVISnZkbWxrWlhJZ1BTQnVaWGNnUlhod2NtVnpjMUJ5YjNacFpHVnlLQ2s3WEhKY2JpQWdJQ0J6ZEdGMGFXTWdiRzluWjJWeU9pQkpURzluWjJWeU8xeHlYRzRnSUNBZ2NISnBkbUYwWlNCaGNIQTZJRVY0Y0hKbGMzTTdYSEpjYmlBZ0lDQndjbWwyWVhSbElHRjFkR2hsYm5ScFkyRjBaVG9nVW1WeGRXVnpkRWhoYm1Sc1pYSThZVzU1TENCaGJua3NJR0Z1ZVN3Z1lXNTVMQ0JTWldOdmNtUThjM1J5YVc1bkxDQmhibmsrUGp0Y2NseHVYSEpjYmlBZ0lDQndjbWwyWVhSbElHTnZibk4wY25WamRHOXlLQ2tnZTMxY2NseHVYSEpjYmlBZ0lDQnpkR0YwYVdNZ2MyVjBURzluWjJWeUtHeHZaMmRsY2pvZ1NVeHZaMmRsY2lrZ2UxeHlYRzRnSUNBZ0lDQWdJRVY0Y0hKbGMzTlFjbTkyYVdSbGNpNXNiMmRuWlhJZ1BTQnNiMmRuWlhJN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjMlYwUVhCd0tHRndjRG9nUlhod2NtVnpjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lFVjRjSEpsYzNOUWNtOTJhV1JsY2k1c2IyZG5aWEl1Ykc5bktGd2lSWGh3Y21WemN5QlFjbTkyYVdSbGNpQkJjSEFnVTJWMElDNHVMbHdpS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Gd2NDQTlJR0Z3Y0R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnpaWFJCZFhSb1RXbGtaR3hsZDJGeVpTaGhkWFJvWlc1MGFXTmhkR1U2SUZKbGNYVmxjM1JJWVc1a2JHVnlQR0Z1ZVN3Z1lXNTVMQ0JoYm5rc0lHRnVlU3dnVW1WamIzSmtQSE4wY21sdVp5d2dZVzU1UGo0cElIdGNjbHh1SUNBZ0lDQWdJQ0JGZUhCeVpYTnpVSEp2ZG1sa1pYSXViRzluWjJWeUxteHZaeWhjSWtWNGNISmxjM01nVUhKdmRtbGtaWElnUVhWMGFDQlRaWFFnTGk0dVhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZWFYwYUdWdWRHbGpZWFJsSUQwZ1lYVjBhR1Z1ZEdsallYUmxPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdkbGRDQjNhWFJvUVhWMGFDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhkWFJvWlc1MGFXTmhkR1U3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1oyVjBRWEJ3S0NrNklFVjRjSEpsYzNNZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1Gd2NEdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J6ZEdGMGFXTWdaMlYwU1c1emRHRnVZMlVvS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFVjRjSEpsYzNOUWNtOTJhV1JsY2k1cGJuTjBZVzVqWlR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnpkR0YwYVdNZ2MyVnVaRVJoZEdFb2NtVnpPaUJTWlhOd2IyNXpaU3dnWkdGMFlUb2dZVzU1S1NCN1hISmNiaUFnSUNBZ0lDQWdSWGh3Y21WemMxQnliM1pwWkdWeUxteHZaMmRsY2k1c2IyY29ZQ1I3Y21WekxuSmxjUzV3WVhSb2ZTQTZJQ1I3U2xOUFRpNXpkSEpwYm1kcFpua29aR0YwWVNsOVlDazdYSEpjYmlBZ0lDQWdJQ0FnY21WekxuTjBZWFIxY3lneU1EQXBMbXB6YjI0b1pHRjBZU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2MzUmhkR2xqSUhObGJtUlVaWGgwS0hKbGN6b2dVbVZ6Y0c5dWMyVXNJRzFsYzNOaFoyVTZJSE4wY21sdVp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGN5NXpkR0YwZFhNb01qQXdLUzV6Wlc1a0tHMWxjM05oWjJVcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSE4wWVhScFl5QnpaVzVrUlhKeWIzSW9jbVZ6T2lCU1pYTndiMjV6WlN3Z1pYSnliM0k2SUVWeWNtOXlLU0I3WEhKY2JpQWdJQ0FnSUNBZ1JYaHdjbVZ6YzFCeWIzWnBaR1Z5TG14dloyZGxjaTVsY25KdmNrOWlhbVZqZENobGNuSnZjaWs3WEhKY2JpQWdJQ0FnSUNBZ2NtVnpMbk4wWVhSMWN5aGxjbkp2Y2k1amIyUmxLUzVxYzI5dUtIc2daWEp5YjNJZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVJaXdpWlhod2IzSjBJQ29nWm5KdmJTQmNJaTR2ZEhsd1pYTmNJanRjY2x4dVhISmNibVY0Y0c5eWRDQXFJR1p5YjIwZ1hDSXVMMk52Y21VdllYQnBMbWRsYm1WeVlYUnZjbHdpTzF4eVhHNWxlSEJ2Y25RZ0tpQm1jbTl0SUZ3aUxpOWpiM0psTDNSNWNHVnpMbkpsWjJsemRHVnlYQ0k3WEhKY2JtVjRjRzl5ZENBcUlHWnliMjBnWENJdUwyVnljbTl5Y3k5cGJuWmhiR2xrTFhKbGNYVmxjM1F1WlhKeWIzSmNJanRjY2x4dVpYaHdiM0owSUNvZ1puSnZiU0JjSWk0dlpYaHdjbVZ6Y3k5a1pXTnZjbUYwYjNKekwzSnZkWFJsTG1SbFkyOXlZWFJ2Y2x3aU8xeHlYRzVsZUhCdmNuUWdLaUJtY205dElGd2lMaTlsZUhCeVpYTnpMMlY0Y0hKbGMzTXVjSEp2ZG1sa1pYSmNJanRjY2x4dVhISmNiaUlzSW1sdGNHOXlkQ0I3SUZKbGNYVmxjM1FnZlNCbWNtOXRJRndpWlhod2NtVnpjMXdpTzF4eVhHNWxlSEJ2Y25RZ2JtRnRaWE53WVdObElFRlVSMlZ1SUh0Y2NseHVJQ0FnSUhSNWNHVWdRbUZ6WlZSNWNHVk1hWE4wSUQwZ1hDSnpkSEpwYm1kY0lpQjhJRndpYm5WdFltVnlYQ0lnZkNCY0ltSnZiMnhsWVc1Y0lpQjhJRndpYjJKcVpXTjBYQ0k3WEhKY2JpQWdJQ0IwZVhCbElFSmhjMlZVZVhCbElEMGdjM1J5YVc1bklId2diblZ0WW1WeUlId2dZbTl2YkdWaGJpQjhJRzUxYkd3Z2ZDQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQjBlWEJsSUVKaGMyVlVlWEJsVFdGd1BGUWdaWGgwWlc1a2N5QkNZWE5sVkhsd1pUNGdQU0JVSUdWNGRHVnVaSE1nYzNSeWFXNW5YSEpjYmlBZ0lDQWdJQ0FnUHlCY0luTjBjbWx1WjF3aVhISmNiaUFnSUNBZ0lDQWdPaUJVSUdWNGRHVnVaSE1nYm5WdFltVnlYSEpjYmlBZ0lDQWdJQ0FnUHlCY0ltNTFiV0psY2x3aVhISmNiaUFnSUNBZ0lDQWdPaUJVSUdWNGRHVnVaSE1nWW05dmJHVmhibHh5WEc0Z0lDQWdJQ0FnSUQ4Z1hDSmliMjlzWldGdVhDSmNjbHh1SUNBZ0lDQWdJQ0E2SUZRZ1pYaDBaVzVrY3lCdWRXeHNYSEpjYmlBZ0lDQWdJQ0FnUHlCY0ltNTFiR3hjSWx4eVhHNGdJQ0FnSUNBZ0lEb2dWQ0JsZUhSbGJtUnpJSFZ1WkdWbWFXNWxaRnh5WEc0Z0lDQWdJQ0FnSUQ4Z1hDSjFibVJsWm1sdVpXUmNJbHh5WEc0Z0lDQWdJQ0FnSURvZ1hDSnZZbXBsWTNSY0lqdGNjbHh1SUNBZ0lHVjRjRzl5ZENCMGVYQmxJRWx1Y0hWMFVISnZjR1Z5ZEhrOFZENGdQU0JVSUdWNGRHVnVaSE1nUVhKeVlYazhZVzU1UGx4eVhHNGdJQ0FnSUNBZ0lEOGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjlmWVhKeVlYbGZYem9nU1c1d2RYUlFjbTl3WlhKMGVUeFVXMjUxYldKbGNsMCtPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJRG9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUZ0d2NtOXdaWEowZVNCcGJpQnJaWGx2WmlCVVhUb2dWRnR3Y205d1pYSjBlVjBnWlhoMFpXNWtjeUJDWVhObFZIbHdaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMTkwZVhCbFgxODZJRUpoYzJWVWVYQmxUV0Z3UEZSYmNISnZjR1Z5ZEhsZFBqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMTl5WlhGMWFYSmxaRjlmUHpvZ1ltOXZiR1ZoYmp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gxOXVkV3hzWVdKc1pWOWZQem9nWW05dmJHVmhianRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZDQW9TVzV3ZFhSUWNtOXdaWEowZVR4VVczQnliM0JsY25SNVhUNGdKaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlmY21WeGRXbHlaV1JmWHo4NklHSnZiMnhsWVc0N1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5ZmJuVnNiR0ZpYkdWZlh6ODZJR0p2YjJ4bFlXNDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOWZkSGx3WlY5Zk9pQkNZWE5sVkhsd1pVeHBjM1E3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlmY21WeGRXbHlaV1JmWHo4NklHSnZiMnhsWVc0N1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5ZmJuVnNiR0ZpYkdWZlh6ODZJR0p2YjJ4bFlXNDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2NseHVJQ0FnSUNBZ0lDQWdJSDA3WEhKY2JpQWdJQ0JsZUhCdmNuUWdkSGx3WlNCUGRYUndkWFJRY205d1pYSjBlVHhVUGlBOUlGUWdaWGgwWlc1a2N5QkJjbkpoZVR4aGJuaytYSEpjYmlBZ0lDQWdJQ0FnUHlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1gxOWhjbkpoZVY5Zk9pQlBkWFJ3ZFhSUWNtOXdaWEowZVR4VVcyNTFiV0psY2wwK08xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lEb2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRnR3Y205d1pYSjBlU0JwYmlCclpYbHZaaUJVWFRvZ1ZGdHdjbTl3WlhKMGVWMGdaWGgwWlc1a2N5QkNZWE5sVkhsd1pWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gxOTBlWEJsWDE4NklFSmhjMlZVZVhCbFRXRndQRlJiY0hKdmNHVnlkSGxkUGp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gxOXlaWEYxYVhKbFpGOWZQem9nWW05dmJHVmhianRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDE5dWRXeHNZV0pzWlY5ZlB6b2dZbTl2YkdWaGJqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkNBb1QzVjBjSFYwVUhKdmNHVnlkSGs4VkZ0d2NtOXdaWEowZVYwK0lDWWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZYM0psY1hWcGNtVmtYMTgvT2lCaWIyOXNaV0Z1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWDI1MWJHeGhZbXhsWDE4L09pQmliMjlzWldGdU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh3Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZlgzUjVjR1ZmWHpvZ1FtRnpaVlI1Y0dWTWFYTjBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZYM0psY1hWcGNtVmtYMTgvT2lCaWIyOXNaV0Z1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWDI1MWJHeGhZbXhsWDE4L09pQmliMjlzWldGdU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlPMXh5WEc0Z0lDQWdaWGh3YjNKMElIUjVjR1VnVW1WeGRXVnpkRWx1Y0hWMFBGUStJRDBnU1c1d2RYUlFjbTl3WlhKMGVUeFVQanRjY2x4dUlDQWdJR1Y0Y0c5eWRDQjBlWEJsSUZKbGNYVmxjM1JQZFhSd2RYUThWRDRnUFNCUGRYUndkWFJRY205d1pYSjBlVHhVUGp0Y2NseHVJQ0FnSUdWNGNHOXlkQ0JwYm5SbGNtWmhZMlVnVW1WeGRXVnpkRmRwZEdoQ2IyUjVQRlFnUFNCaGJuaytJR1Y0ZEdWdVpITWdVbVZ4ZFdWemRDQjdYSEpjYmlBZ0lDQWdJQ0FnWW05a2VUb2dWRHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR1Y0Y0c5eWRDQjBlWEJsSUZKbGNYVnBjbVZ0Wlc1MGN6eFVJRDBnWVc1NVBpQTlJSHRjY2x4dUlDQWdJQ0FnSUNCaWIyUjVQem9nWW05dmJHVmhiaUI4SUZKbGNYVmxjM1JKYm5CMWREeFVQanRjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0JsZUhCdmNuUWdkSGx3WlNCU2IzVjBaVHhKYmlBOUlHRnVlU3dnVDNWMElEMGdZVzU1UGlBOUlIdGNjbHh1SUNBZ0lDQWdJQ0J0WlhSb2IyUTZJRTFsZEdodlpEdGNjbHh1SUNBZ0lDQWdJQ0J3WVhSb09pQnpkSEpwYm1jN1hISmNiaUFnSUNBZ0lDQWdZWFYwYUQ4NklHSnZiMnhsWVc0N1hISmNiaUFnSUNBZ0lDQWdjbVZ4ZFdseVpXUS9PaUJTWlhGMWFYSmxiV1Z1ZEhNOFNXNCtPMXh5WEc0Z0lDQWdJQ0FnSUhKbGMzQnZibk5sUHpvZ1VtVnhkV1Z6ZEU5MWRIQjFkRHhQZFhRK08xeHlYRzRnSUNBZ2ZUdGNjbHh1ZlZ4eVhHNWxlSEJ2Y25RZ2FXNTBaWEptWVdObElFbE1iMmRuWlhJZ2UxeHlYRzRnSUNBZ2JHOW5LRzFsYzNOaFoyVS9PaUJoYm5rc0lDNHVMbTl3ZEdsdmJtRnNVR0Z5WVcxek9pQmhibmxiWFNrNklIWnZhV1E3WEhKY2JpQWdJQ0JsY25KdmNrOWlhbVZqZENobGNuSnZjam9nUlhKeWIzSXNJQzR1TG05d2RHbHZibUZzVUdGeVlXMXpPaUJoYm5sYlhTazZJSFp2YVdRN1hISmNibjFjY2x4dVpYaHdiM0owSUdWdWRXMGdVSEp2Y0dWeWRIbFVlWEJsSUh0Y2NseHVJQ0FnSUVKQlUwVWdQU0F3TEZ4eVhHNGdJQ0FnUVZKU1FWa2dQU0F4TEZ4eVhHNGdJQ0FnVDBKS1JVTlVJRDBnTWl4Y2NseHVmVnh5WEc1bGVIQnZjblFnWlc1MWJTQk5aWFJvYjJRZ2UxeHlYRzRnSUNBZ1IwVlVJRDBnWENKblpYUmNJaXhjY2x4dUlDQWdJRkJQVTFRZ1BTQmNJbkJ2YzNSY0lpeGNjbHh1ZlZ4eVhHNWxlSEJ2Y25RZ2RIbHdaU0JTYjNWMFpUeEpiaUE5SUdGdWVTd2dUM1YwSUQwZ1lXNTVQaUE5SUVGVVIyVnVMbEp2ZFhSbFBFbHVMQ0JQZFhRK08xeHlYRzVsZUhCdmNuUWdkSGx3WlNCSmJuQjFkRkJ5YjNCbGNuUjVQRlErSUQwZ1FWUkhaVzR1U1c1d2RYUlFjbTl3WlhKMGVUeFVQanRjY2x4dVpYaHdiM0owSUhSNWNHVWdUM1YwY0hWMFVISnZjR1Z5ZEhrOFZENGdQU0JCVkVkbGJpNVBkWFJ3ZFhSUWNtOXdaWEowZVR4VVBqdGNjbHh1Wlhod2IzSjBJSFI1Y0dVZ1VtVnhkV1Z6ZEVsdWNIVjBQRlErSUQwZ1FWUkhaVzR1VW1WeGRXVnpkRWx1Y0hWMFBGUStPMXh5WEc1bGVIQnZjblFnZEhsd1pTQlNaWEYxWlhOMFQzVjBjSFYwUEZRK0lEMGdRVlJIWlc0dVVtVnhkV1Z6ZEU5MWRIQjFkRHhVUGp0Y2NseHVaWGh3YjNKMElIUjVjR1VnVW1WeGRXVnpkRmRwZEdoQ2IyUjVQRlErSUQwZ1FWUkhaVzR1VW1WeGRXVnpkRmRwZEdoQ2IyUjVQRlErTzF4eVhHNWxlSEJ2Y25RZ2RIbHdaU0JTWlhGMWFYSmxiV1Z1ZEhNOFZDQTlJR0Z1ZVQ0Z1BTQkJWRWRsYmk1U1pYRjFhWEpsYldWdWRITThWRDQ3WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVGVVIyVnVPMXh5WEc0aUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb1hDSm1jeTl3Y205dGFYTmxjMXdpS1RzaUxDSXZMeUJVYUdVZ2JXOWtkV3hsSUdOaFkyaGxYRzUyWVhJZ1gxOTNaV0p3WVdOclgyMXZaSFZzWlY5allXTm9aVjlmSUQwZ2UzMDdYRzVjYmk4dklGUm9aU0J5WlhGMWFYSmxJR1oxYm1OMGFXOXVYRzVtZFc1amRHbHZiaUJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0cxdlpIVnNaVWxrS1NCN1hHNWNkQzh2SUVOb1pXTnJJR2xtSUcxdlpIVnNaU0JwY3lCcGJpQmpZV05vWlZ4dVhIUjJZWElnWTJGamFHVmtUVzlrZFd4bElEMGdYMTkzWldKd1lXTnJYMjF2WkhWc1pWOWpZV05vWlY5ZlcyMXZaSFZzWlVsa1hUdGNibHgwYVdZZ0tHTmhZMmhsWkUxdlpIVnNaU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUdOaFkyaGxaRTF2WkhWc1pTNWxlSEJ2Y25Sek8xeHVYSFI5WEc1Y2RDOHZJRU55WldGMFpTQmhJRzVsZHlCdGIyUjFiR1VnS0dGdVpDQndkWFFnYVhRZ2FXNTBieUIwYUdVZ1kyRmphR1VwWEc1Y2RIWmhjaUJ0YjJSMWJHVWdQU0JmWDNkbFluQmhZMnRmYlc5a2RXeGxYMk5oWTJobFgxOWJiVzlrZFd4bFNXUmRJRDBnZTF4dVhIUmNkQzh2SUc1dklHMXZaSFZzWlM1cFpDQnVaV1ZrWldSY2JseDBYSFF2THlCdWJ5QnRiMlIxYkdVdWJHOWhaR1ZrSUc1bFpXUmxaRnh1WEhSY2RHVjRjRzl5ZEhNNklIdDlYRzVjZEgwN1hHNWNibHgwTHk4Z1JYaGxZM1YwWlNCMGFHVWdiVzlrZFd4bElHWjFibU4wYVc5dVhHNWNkRjlmZDJWaWNHRmphMTl0YjJSMWJHVnpYMTliYlc5a2RXeGxTV1JkTG1OaGJHd29iVzlrZFd4bExtVjRjRzl5ZEhNc0lHMXZaSFZzWlN3Z2JXOWtkV3hsTG1WNGNHOXlkSE1zSUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4cE8xeHVYRzVjZEM4dklGSmxkSFZ5YmlCMGFHVWdaWGh3YjNKMGN5QnZaaUIwYUdVZ2JXOWtkV3hsWEc1Y2RISmxkSFZ5YmlCdGIyUjFiR1V1Wlhod2IzSjBjenRjYm4xY2JseHVJaXdpTHk4Z2MzUmhjblIxY0Z4dUx5OGdURzloWkNCbGJuUnllU0J0YjJSMWJHVWdZVzVrSUhKbGRIVnliaUJsZUhCdmNuUnpYRzR2THlCVWFHbHpJR1Z1ZEhKNUlHMXZaSFZzWlNCcGN5QnlaV1psY21WdVkyVmtJR0o1SUc5MGFHVnlJRzF2WkhWc1pYTWdjMjhnYVhRZ1kyRnVKM1FnWW1VZ2FXNXNhVzVsWkZ4dWRtRnlJRjlmZDJWaWNHRmphMTlsZUhCdmNuUnpYMThnUFNCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktEUTVNaWs3WEc0aVhTd2libUZ0WlhNaU9sc2ljbTl2ZENJc0ltWmhZM1J2Y25raUxDSmxlSEJ2Y25Seklpd2liVzlrZFd4bElpd2laR1ZtYVc1bElpd2lZVzFrSWl3aWRHaHBjeUlzSWtGd2FVZGxibVZ5WVhSdmNpSXNJbk4wWVhScFl5SXNJbkp2ZFhSbGN5SXNJblI1Y0dWelVtVm5hWE4wWlhJaUxDSlVlWEJsYzFKbFoybHpkR1Z5SWl3aVoyVjBTVzV6ZEdGdVkyVWlMQ0pOWVhBaUxDSnBibk4wWVc1alpTSXNJbkpsWjJsemRHVnlVbTkxZEdVaUxDSnVZVzFsSWl3aWNtOTFkR1VpTENKelpYUWlMQ0puWlc1bGNtRjBaVUZ3YVZKbFoybHpkR1Z5SWl3aWRITWlMQ0puWlc1bGNtRjBaVkp2ZFhSbFZIbHdaVlJUSWl3aVoyVnVaWEpoZEdWTlpYUm9iMlJGYm5WdFZGTWlMQ0puWlc1bGNtRjBaVkpsWjJsemRHVnlaV1JVZVhCbGMxUlRJaXdpY205MWRHVnpWSGx3WlhNaUxDSm5aWFFpTENKd2IzTjBJaXdpWlc1MGNtbGxjeUlzSW1kbGJtVnlZWFJsVW05MWRHVlVVeUlzSW0xbGRHaHZaQ0lzSW5CMWMyZ2lMQ0puWlc1bGNtRjBaVkp2ZFhSbGMxUjVjR1Z6SWl3aWQzSnBkR1ZCY0dsU1pXZHBjM1JsY2xSdlJtbHNaU0lzSWs5aWFtVmpkQ0lzSW5aaGJIVmxjeUlzSWsxbGRHaHZaQ0lzSW1admNrVmhZMmdpTENKbGJuVnRjeUlzSW5SNWNHVWlMQ0pyWlhraUxDSjJZV3gxWlNJc0luUjVjR1Z6SWl3aWRHOVZjSEJsY2tOaGMyVWlMQ0pxYjJsdUlpd2laMlYwUkdGMFlWUjVjR1ZVVXlJc0luSmxjWFZwY21Wa0lpd2lZbTlrZVNJc0ltZGxibVZ5WVhSbFQzVjBjSFYwVkhsd1pWUlRJaXdpY21WemNHOXVjMlVpTENKd1lYUm9JaXdpWVhWMGFDSXNJbWRsYm1WeVlYUmxTVzV3ZFhSVWVYQmxWRk1pTENKd2NtOXdaWEowZVNJc0ltZGxkRkJ5YjNCbGNuUjVWSGx3WlNJc0lsQnliM0JsY25SNVZIbHdaU0lzSWtKQlUwVWlMQ0pmWDNKbGNYVnBjbVZrWDE4aUxDSmZYMjUxYkd4aFlteGxYMThpTENKZlgzUjVjR1ZmWHlJc0lrRlNVa0ZaSWl3aVgxOWhjbkpoZVY5Zklpd2lUMEpLUlVOVUlpd2lkM0pwZEdWR2FXeGxJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJa0ZVUjBWT1gxUlpVRVZUWDBaUFRFUkZVbEJCVkVnaUxDSnlaV2RwYzNSbGNrVnVkVzBpTENKMElpd2laU0lzSW5JaUxDSnVJaXdpWDE5cGJYQnZjblJFWldaaGRXeDBJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmtaV1pwYm1WUWNtOXdaWEowZVNJc0ltOGlMQ0p6SWl3aVlTSXNJbWtpTENKMUlpd2lZMjl1YzNSeWRXTjBiM0lpTENKSmJuWmhiR2xrVW1WeGRXVnpkRVZ5Y205eUlpd2lSWEp5YjNJaUxDSmpiMlJsSWl3aWNtVnNZWFJsWkVSaGRHRWlMQ0p0WlhOellXZGxJaXdpYzNWd1pYSWlMQ0ptYjNKdFlYUk5aWE56WVdkbElpd2lTbE5QVGlJc0luTjBjbWx1WjJsbWVTSXNJbXRsZVhNaUxDSnNaVzVuZEdnaUxDSnBibU5zZFdSbGN5SXNJbVYyWlhKNUlpd2ljQ0lzSWtWNGNISmxjM05RY205MmFXUmxjaUlzSW14dloyZGxjaUlzSW14dlp5SXNJbk4xWW5OMGNtbHVaeUlzSW5KbGNHeGhZMlVpTENKemNHeHBkQ0lzSW5KbFpIVmpaU0lzSW1RaUxDSmhjM2x1WXlJc0luRjFaWEo1SWl3aVgyUmhkR0VpTENKd1lYSnpaU0lzSW5ObGJtUkVZWFJoSWl3aWMyVnVaRVZ5Y205eUlpd2lYeUlzSW1kbGRFRndjQ0lzSW5kcGRHaEJkWFJvSWl3aVlYQndJaXdpWVhWMGFHVnVkR2xqWVhSbElpd2ljMlYwUVhCd0lpd2ljMlYwUVhWMGFFMXBaR1JzWlhkaGNtVWlMQ0p5WlhFaUxDSnpkR0YwZFhNaUxDSnFjMjl1SWl3aWMyVnVaQ0lzSW1WeWNtOXlUMkpxWldOMElpd2laWEp5YjNJaUxDSmZYMk55WldGMFpVSnBibVJwYm1jaUxDSmpjbVZoZEdVaUxDSm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJaUxDSjNjbWwwWVdKc1pTSXNJbU52Ym1acFozVnlZV0pzWlNJc0ltVnVkVzFsY21GaWJHVWlMQ0pmWDJWNGNHOXlkRk4wWVhJaUxDSndjbTkwYjNSNWNHVWlMQ0pvWVhOUGQyNVFjbTl3WlhKMGVTSXNJbU5oYkd3aUxDSkhSVlFpTENKUVQxTlVJaXdpZFc1a1pXWnBibVZrSWl3aWRtRnNhV1JoZEdWVFkyaGxiV0VpTENKelkyaGxiV0VpTENKdlltcGxZM1FpTENKbGJHVnRJaXdpY0dGeWRDSXNJbWRsYm1WeVlYUmxSR1ZtWVhWc2RFNWhiV1VpTENKMFlYSm5aWFFpTENKd2NtOXdaWEowZVV0bGVTSXNJbVJsYzJOeWFYQjBiM0lpTENKeVpYTWlMQ0prWVhSaElpd2lZMmhsWTJ0U1pYRjFhWEpsYldWdWRITWlMQ0p2Y21sbmFXNWhiQ0lzSW1WeWNpSXNJbk5sY25abGNpSXNJbkpsY1hWcGNtVWlMQ0pmWDNkbFluQmhZMnRmYlc5a2RXeGxYMk5oWTJobFgxOGlMQ0pmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmSWl3aWJXOWtkV3hsU1dRaUxDSmpZV05vWldSTmIyUjFiR1VpTENKZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsYzE5ZklsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT0iLCJpbXBvcnQgZnMgZnJvbSBcImZzL3Byb21pc2VzXCI7XHJcbmltcG9ydCB7IE1ldGhvZCwgUHJvcGVydHlUeXBlLCBSZXF1ZXN0SW5wdXQsIFJlcXVlc3RPdXRwdXQsIFJvdXRlIH0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7IGdldFByb3BlcnR5VHlwZSB9IGZyb20gXCIuLi9leHByZXNzL2RlY29yYXRvcnMvcm91dGUuZGVjb3JhdG9yXCI7XHJcbmltcG9ydCB7IFR5cGVzUmVnaXN0ZXIgfSBmcm9tIFwiLi90eXBlcy5yZWdpc3RlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFwaUdlbmVyYXRvciB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogQXBpR2VuZXJhdG9yID0gbmV3IEFwaUdlbmVyYXRvcigpO1xyXG4gICAgcHJpdmF0ZSByb3V0ZXM6IE1hcDxzdHJpbmcsIFJvdXRlPjtcclxuICAgIHByaXZhdGUgdHlwZXNSZWdpc3RlcjogVHlwZXNSZWdpc3RlciA9IFR5cGVzUmVnaXN0ZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucm91dGVzID0gbmV3IE1hcDxzdHJpbmcsIFJvdXRlPigpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gQXBpR2VuZXJhdG9yLmluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyUm91dGUobmFtZTogc3RyaW5nLCByb3V0ZTogUm91dGUpIHtcclxuICAgICAgICB0aGlzLnJvdXRlcy5zZXQobmFtZSwgcm91dGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQXBpUmVnaXN0ZXIoKSB7XHJcbiAgICAgICAgbGV0IHRzID0gXCIvLyBHZW5lcmF0ZWQgY29udGVudCwgZG9uJ3QgdG91Y2hcXG5cXG5cIjtcclxuICAgICAgICB0cyArPSB0aGlzLmdlbmVyYXRlUm91dGVUeXBlVFMoKTtcclxuICAgICAgICB0cyArPSB0aGlzLmdlbmVyYXRlTWV0aG9kRW51bVRTKCk7XHJcbiAgICAgICAgdHMgKz0gdGhpcy5nZW5lcmF0ZVJlZ2lzdGVyZWRUeXBlc1RTKCk7XHJcbiAgICAgICAgY29uc3Qgcm91dGVzVHlwZXM6IHsgW3R5cGUgaW4gTWV0aG9kXTogc3RyaW5nW10gfSA9IHtcclxuICAgICAgICAgICAgZ2V0OiBbXSxcclxuICAgICAgICAgICAgcG9zdDogW10sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGxldCBbbmFtZSwgcm91dGVdIG9mIHRoaXMucm91dGVzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICB0cyArPSB0aGlzLmdlbmVyYXRlUm91dGVUUyhuYW1lLCByb3V0ZSk7XHJcbiAgICAgICAgICAgIHJvdXRlc1R5cGVzW3JvdXRlLm1ldGhvZF0ucHVzaChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHMgKz0gdGhpcy5nZW5lcmF0ZVJvdXRlc1R5cGVzKHJvdXRlc1R5cGVzKTtcclxuICAgICAgICB0aGlzLndyaXRlQXBpUmVnaXN0ZXJUb0ZpbGUodHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVNZXRob2RFbnVtVFMoKSB7XHJcbiAgICAgICAgbGV0IHRzID0gYFxcbmV4cG9ydCBlbnVtIE1ldGhvZCB7YDtcclxuICAgICAgICBPYmplY3QudmFsdWVzKE1ldGhvZCkuZm9yRWFjaCgobWV0aG9kKSA9PiAodHMgKz0gYFxcblxcdCR7bWV0aG9kfSxgKSk7XHJcbiAgICAgICAgdHMgKz0gXCJcXG59XFxuXFxuXCI7XHJcbiAgICAgICAgcmV0dXJuIHRzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVSZWdpc3RlcmVkVHlwZXNUUygpIHtcclxuICAgICAgICBsZXQgdHMgPSBcIlxcblwiO1xyXG4gICAgICAgIHRoaXMudHlwZXNSZWdpc3Rlci5lbnVtcy5mb3JFYWNoKCh0eXBlLCBuYW1lKSA9PiB7XHJcbiAgICAgICAgICAgIHRzICs9IGBcXG5leHBvcnQgZW51bSAke25hbWV9IHtgO1xyXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh0eXBlKS5mb3JFYWNoKFxyXG4gICAgICAgICAgICAgICAgKFtrZXksIHZhbHVlXSkgPT5cclxuICAgICAgICAgICAgICAgICAgICAodHMgKz0gYFxcblxcdCR7a2V5fSA9ICR7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiA/IHZhbHVlIDogYFwiJHt2YWx1ZX1cImBcclxuICAgICAgICAgICAgICAgICAgICB9LGApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRzICs9IFwiXFxufVxcblwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0cztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdlbmVyYXRlUm91dGVUeXBlVFMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGBcXG50eXBlIFJvdXRlID0ge25hbWU6IHN0cmluZzsgbWV0aG9kOiBNZXRob2Q7IHBhdGg6IHN0cmluZzsgcmVxdWlyZUF1dGg/OiBib29sZWFuIHwgdW5kZWZpbmVkOyBkYXRhPzogYW55IHwgdW5kZWZpbmVkOyByZXM6YW55fTtcXG5cXG5gO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVSb3V0ZXNUeXBlcyhyb3V0ZXNUeXBlczogeyBbdHlwZSBpbiBNZXRob2RdOiBzdHJpbmdbXSB9KSB7XHJcbiAgICAgICAgbGV0IHR5cGVzID0gXCJcIjtcclxuICAgICAgICBPYmplY3QuZW50cmllcyhyb3V0ZXNUeXBlcykuZm9yRWFjaCgoW21ldGhvZCwgcm91dGVzXSkgPT4ge1xyXG4gICAgICAgICAgICB0eXBlcyArPSBgXFxuZXhwb3J0IHR5cGUgVCR7bWV0aG9kLnRvVXBwZXJDYXNlKCl9Um91dGVzID0gUm91dGUke3JvdXRlcy5qb2luKFxyXG4gICAgICAgICAgICAgICAgXCIgfCBSb3V0ZVwiXHJcbiAgICAgICAgICAgICl9O2A7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVSb3V0ZVRTKG5hbWU6IHN0cmluZywgcm91dGU6IFJvdXRlKSB7XHJcbiAgICAgICAgbGV0IHRzID0gYGV4cG9ydCB0eXBlIFRSb3V0ZSR7bmFtZX1JbnB1dCA9ICR7dGhpcy5nZXREYXRhVHlwZVRTKFxyXG4gICAgICAgICAgICByb3V0ZS5yZXF1aXJlZD8uYm9keVxyXG4gICAgICAgICl9O1xcbmA7XHJcbiAgICAgICAgdHMgKz0gYGV4cG9ydCB0eXBlIFRSb3V0ZSR7bmFtZX1PdXRwdXQgPSAke3RoaXMuZ2VuZXJhdGVPdXRwdXRUeXBlVFMoXHJcbiAgICAgICAgICAgIHJvdXRlLnJlc3BvbnNlXHJcbiAgICAgICAgKX07XFxuYDtcclxuICAgICAgICB0cyArPSBgXHJcbmV4cG9ydCB0eXBlIFJvdXRlJHtuYW1lfSA9IHtcclxuICAgIG5hbWU6IFwiJHtuYW1lfVwiO1xyXG4gICAgbWV0aG9kOiBNZXRob2QuJHtyb3V0ZS5tZXRob2R9O1xyXG4gICAgcGF0aDogXCIke3JvdXRlLnBhdGh9XCI7XHJcbiAgICByZXF1aXJlQXV0aDogJHtyb3V0ZS5hdXRofTtcclxuICAgICR7XHJcbiAgICAgICAgcm91dGUucmVxdWlyZWQ/LmJvZHlcclxuICAgICAgICAgICAgPyBgZGF0YTogVFJvdXRlJHtuYW1lfUlucHV0YFxyXG4gICAgICAgICAgICA6IGBkYXRhPzogVFJvdXRlJHtuYW1lfUlucHV0YFxyXG4gICAgfVxyXG4gICAgcmVzOiBUUm91dGUke25hbWV9T3V0cHV0O1xyXG59O1xyXG5leHBvcnQgY29uc3QgZ2V0UmVxdWVzdCR7bmFtZX0gPSAoJHtcclxuICAgICAgICAgICAgcm91dGUucmVxdWlyZWQ/LmJvZHkgPyBgZGF0YTogUm91dGUke25hbWV9W1wiZGF0YVwiXWAgOiBcIlwiXHJcbiAgICAgICAgfSk6IE9taXQ8Um91dGUke25hbWV9LCBcInJlc1wiPiA9PiAoe1xyXG4gICAgbmFtZTogXCIke25hbWV9XCIsXHJcbiAgICBtZXRob2Q6IE1ldGhvZC4ke3JvdXRlLm1ldGhvZH0sXHJcbiAgICBwYXRoOiBcIiR7cm91dGUucGF0aH1cIixcclxuICAgIHJlcXVpcmVBdXRoOiAke3JvdXRlLmF1dGh9LFxyXG4gICAgJHtyb3V0ZS5yZXF1aXJlZD8uYm9keSA/IFwiZGF0YSxcIiA6IFwiXCJ9XHJcbn0pO1xcblxcbmA7XHJcbiAgICAgICAgcmV0dXJuIHRzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0RGF0YVR5cGVUUyhib2R5PzogYm9vbGVhbiB8IFJlcXVlc3RJbnB1dDxhbnk+KSB7XHJcbiAgICAgICAgaWYgKGJvZHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBib2R5ID09PSBcImJvb2xlYW5cIlxyXG4gICAgICAgICAgICAgICAgPyBcImFueVwiXHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuZ2VuZXJhdGVJbnB1dFR5cGVUUyhib2R5KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJ1JvdXRlW1wiZGF0YVwiXSc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVJbnB1dFR5cGVUUyh0eXBlOiBSZXF1ZXN0SW5wdXQ8YW55Pikge1xyXG4gICAgICAgIGxldCB0cyA9IFwie1wiO1xyXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHR5cGUpLmZvckVhY2goKFtwcm9wZXJ0eSwgdHlwZV0pID0+IHtcclxuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSBcIl9fcmVxdWlyZWRfX1wiKVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChnZXRQcm9wZXJ0eVR5cGUodHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFByb3BlcnR5VHlwZS5CQVNFOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cyArPSBgXFxuXFx0XFx0JHtwcm9wZXJ0eX0ke1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZS5fX3JlcXVpcmVkX18gPyBcIjpcIiA6IFwiPzpcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9JHt0eXBlLl9fbnVsbGFibGVfXyA/IFwiIG51bGwgfFwiIDogXCJcIn0gJHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUuX190eXBlX19cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFByb3BlcnR5VHlwZS5BUlJBWTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHMgKz0gYFxcblxcdFxcdCR7cHJvcGVydHl9JHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUuX19yZXF1aXJlZF9fICE9PSBmYWxzZSA/IFwiOlwiIDogXCI/OlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gJHt0aGlzLmdlbmVyYXRlSW5wdXRUeXBlVFModHlwZS5fX2FycmF5X18pfVtdO2A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUHJvcGVydHlUeXBlLk9CSkVDVDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHMgKz0gYFxcblxcdFxcdCR7cHJvcGVydHl9JHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUuX19yZXF1aXJlZF9fICE9PSBmYWxzZSA/IFwiOlwiIDogXCI/OlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0ke1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZS5fX251bGxhYmxlX18gPyBcIiBudWxsIHxcIiA6IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAke3RoaXMuZ2VuZXJhdGVJbnB1dFR5cGVUUyh0eXBlKX07YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdHMgKz0gXCJcXG5cXHR9XCI7XHJcbiAgICAgICAgcmV0dXJuIHRzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVPdXRwdXRUeXBlVFModHlwZT86IFJlcXVlc3RPdXRwdXQ8YW55Pikge1xyXG4gICAgICAgIGlmICghdHlwZSkgcmV0dXJuIFwiYW55XCI7XHJcbiAgICAgICAgbGV0IHRzID0gXCJ7XCI7XHJcbiAgICAgICAgT2JqZWN0LmVudHJpZXModHlwZSkuZm9yRWFjaCgoW3Byb3BlcnR5LCB0eXBlXSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocHJvcGVydHkgIT09IFwiX19yZXF1aXJlZF9fXCIpXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGdldFByb3BlcnR5VHlwZSh0eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUHJvcGVydHlUeXBlLkJBU0U6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRzICs9IGBcXG5cXHRcXHQke3Byb3BlcnR5fSR7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlLl9fcmVxdWlyZWRfXyA/IFwiOlwiIDogXCI/OlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0ke3R5cGUuX19udWxsYWJsZV9fID8gXCIgbnVsbCB8XCIgOiBcIlwifSAke1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZS5fX3R5cGVfX1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O2A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUHJvcGVydHlUeXBlLkFSUkFZOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cyArPSBgXFxuXFx0XFx0JHtwcm9wZXJ0eX0ke1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZS5fX3JlcXVpcmVkX18gIT09IGZhbHNlID8gXCI6XCIgOiBcIj86XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAke3RoaXMuZ2VuZXJhdGVPdXRwdXRUeXBlVFModHlwZS5fX2FycmF5X18pfVtdO2A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUHJvcGVydHlUeXBlLk9CSkVDVDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHMgKz0gYFxcblxcdFxcdCR7cHJvcGVydHl9JHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUuX19yZXF1aXJlZF9fICE9PSBmYWxzZSA/IFwiOlwiIDogXCI/OlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0ke1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZS5fX251bGxhYmxlX18gPyBcIiBudWxsIHxcIiA6IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAke3RoaXMuZ2VuZXJhdGVPdXRwdXRUeXBlVFModHlwZSl9O2A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRzICs9IFwiXFxuXFx0fVwiO1xyXG4gICAgICAgIHJldHVybiB0cztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHdyaXRlQXBpUmVnaXN0ZXJUb0ZpbGUodHM6IHN0cmluZykge1xyXG4gICAgICAgIGZzLndyaXRlRmlsZShwcm9jZXNzLmVudi5BVEdFTl9UWVBFU19GT0xERVJQQVRIICsgXCIvYXBpLmQudHNcIiwgdHMpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFJvdXRlIH0gZnJvbSBcIi4uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVHlwZXNSZWdpc3RlciB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogVHlwZXNSZWdpc3RlciA9IG5ldyBUeXBlc1JlZ2lzdGVyKCk7XHJcbiAgICByZWFkb25seSBlbnVtczogTWFwPHN0cmluZywgYW55PjtcclxuXHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZW51bXMgPSBuZXcgTWFwPHN0cmluZywgUm91dGU+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgICAgIHJldHVybiBUeXBlc1JlZ2lzdGVyLmluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyRW51bShuYW1lOiBzdHJpbmcsIHR5cGU6IGFueSkge1xyXG4gICAgICAgIHRoaXMuZW51bXMuc2V0KG5hbWUsIHR5cGUpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEVycm9yIGFzIEpORXJyb3IgfSBmcm9tIFwiLi9lcnJvcnNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBJbnZhbGlkUmVxdWVzdEVycm9yIGV4dGVuZHMgRXJyb3IgaW1wbGVtZW50cyBKTkVycm9yIHtcclxuICAgIHJlYWRvbmx5IGNvZGUgPSA0MDA7XHJcbiAgICByZWFkb25seSByZWxhdGVkRGF0YT86IGFueTtcclxuICAgIG1lc3NhZ2U6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nLCByZWxhdGVkRGF0YT86IGFueSkge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZFZhbHVlXCI7XHJcbiAgICAgICAgdGhpcy5mb3JtYXRNZXNzYWdlKG1lc3NhZ2UsIHJlbGF0ZWREYXRhKTtcclxuICAgICAgICB0aGlzLnJlbGF0ZWREYXRhID0gcmVsYXRlZERhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmb3JtYXRNZXNzYWdlKG1lc3NhZ2U/OiBzdHJpbmcsIHJlbGF0ZWREYXRhPzogYW55KSB7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gYEJhZCBSZXF1ZXN0IDogJHttZXNzYWdlfVxcblxcdFByb3ZpZGVkIEVycm9yIERhdGEgOlxcblxcdFxcdCR7SlNPTi5zdHJpbmdpZnkoXHJcbiAgICAgICAgICAgIHJlbGF0ZWREYXRhLFxyXG4gICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIDJcclxuICAgICAgICApfVxcbmA7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgSW5wdXRQcm9wZXJ0eSxcclxuICAgIFByb3BlcnR5VHlwZSxcclxuICAgIFJlcXVlc3RJbnB1dCxcclxuICAgIFJlcXVpcmVtZW50cyxcclxuICAgIFJvdXRlLFxyXG59IGZyb20gXCIuLi8uLlwiO1xyXG5pbXBvcnQgeyBBcGlHZW5lcmF0b3IgfSBmcm9tIFwiLi4vLi4vY29yZS9hcGkuZ2VuZXJhdG9yXCI7XHJcbmltcG9ydCB7IEludmFsaWRSZXF1ZXN0RXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3JzL2ludmFsaWQtcmVxdWVzdC5lcnJvclwiO1xyXG5pbXBvcnQgeyBFeHByZXNzUHJvdmlkZXIgfSBmcm9tIFwiLi4vZXhwcmVzcy5wcm92aWRlclwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdXRlPEluID0gYW55LCBPdXQgPSBhbnk+KHtcclxuICAgIG5hbWUsXHJcbiAgICBtZXRob2QsXHJcbiAgICBwYXRoLFxyXG4gICAgYXV0aCxcclxuICAgIHJlcXVpcmVkLFxyXG4gICAgcmVzcG9uc2UsXHJcbn06IFJvdXRlPEluLCBPdXQ+ICYgeyBuYW1lPzogc3RyaW5nIH0pOiBNZXRob2REZWNvcmF0b3Ige1xyXG4gICAgRXhwcmVzc1Byb3ZpZGVyLmxvZ2dlci5sb2coXHJcbiAgICAgICAgYENyZWF0ZSAke21ldGhvZH06JHtwYXRofSByb3V0ZSB3aXRoIGF1dGg6JHthdXRofWBcclxuICAgICk7XHJcbiAgICBBcGlHZW5lcmF0b3IuZ2V0SW5zdGFuY2UoKS5yZWdpc3RlclJvdXRlKFxyXG4gICAgICAgIG5hbWUgfHwgZ2VuZXJhdGVEZWZhdWx0TmFtZShwYXRoKSxcclxuICAgICAgICB7IG1ldGhvZCwgcGF0aCwgYXV0aCwgcmVxdWlyZWQsIHJlc3BvbnNlIH1cclxuICAgICk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKFxyXG4gICAgICAgIHRhcmdldDogT2JqZWN0LFxyXG4gICAgICAgIHByb3BlcnR5S2V5OiBzdHJpbmcgfCBzeW1ib2wsXHJcbiAgICAgICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yXHJcbiAgICApIHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlZC5ib2R5ICYmIHJlcS5tZXRob2QgPT09IFwiR0VUXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlcS5xdWVyeS5fZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRSZXF1ZXN0RXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJObyBkYXRhIGZvciBib2R5IHdpdGggR0VUIHJlcXVlc3QuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBib2R5OiByZXEucXVlcnkuX2RhdGEgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRSZXF1ZXN0RXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJEYXRhIHR5cGUgaXMgaW52YWxpZC5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGJvZHk6IHJlcS5xdWVyeS5fZGF0YSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXEuYm9keSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrUmVxdWlyZW1lbnRzKHJlcXVpcmVkLCByZXEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWwgPSBhd2FpdCBkZXNjcmlwdG9yLnZhbHVlKHJlcSwgcmVzKTtcclxuICAgICAgICAgICAgICAgIEV4cHJlc3NQcm92aWRlci5zZW5kRGF0YShyZXMsIG9yaWdpbmFsKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBFeHByZXNzUHJvdmlkZXIuc2VuZEVycm9yKHJlcywgZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHNlcnZlciA9IEV4cHJlc3NQcm92aWRlci5nZXRJbnN0YW5jZSgpO1xyXG4gICAgICAgIGlmIChhdXRoKSBzZXJ2ZXIuZ2V0QXBwKClbbWV0aG9kXShwYXRoLCBzZXJ2ZXIud2l0aEF1dGgsIHJlc3BvbnNlKTtcclxuICAgICAgICBlbHNlIEV4cHJlc3NQcm92aWRlci5nZXRJbnN0YW5jZSgpLmdldEFwcCgpW21ldGhvZF0ocGF0aCwgcmVzcG9uc2UpO1xyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tSZXF1aXJlbWVudHMocmVxdWlyZWQ6IFJlcXVpcmVtZW50cywgcmVxOiBSZXF1ZXN0KSB7XHJcbiAgICBpZiAocmVxdWlyZWQuYm9keSkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgKHR5cGVvZiByZXF1aXJlZC5ib2R5ID09PSBcImJvb2xlYW5cIiAmJlxyXG4gICAgICAgICAgICAgICAgIU9iamVjdC5rZXlzKHJlcS5ib2R5KS5sZW5ndGgpIHx8XHJcbiAgICAgICAgICAgICh0eXBlb2YgcmVxdWlyZWQuYm9keSAhPT0gXCJib29sZWFuXCIgJiZcclxuICAgICAgICAgICAgICAgICF2YWxpZGF0ZVNjaGVtYShyZXF1aXJlZC5ib2R5LCByZXEuYm9keSkpXHJcbiAgICAgICAgKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFJlcXVlc3RFcnJvcihcclxuICAgICAgICAgICAgICAgIFwiTm8gYm9keSBvciBib2R5IHRydWN0dXJlIGlzIGludmFsaWQuXCIsXHJcbiAgICAgICAgICAgICAgICB7IGJvZHk6IHJlcS5ib2R5IH1cclxuICAgICAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZVNjaGVtYShzY2hlbWE6IFJlcXVlc3RJbnB1dDxhbnk+LCBvYmplY3Q6IGFueSkge1xyXG4gICAgZm9yIChsZXQgW3Byb3BlcnR5LCB0eXBlXSBvZiBPYmplY3QuZW50cmllcyhzY2hlbWEpKSB7XHJcbiAgICAgICAgc3dpdGNoIChnZXRQcm9wZXJ0eVR5cGUodHlwZSkpIHtcclxuICAgICAgICAgICAgY2FzZSBQcm9wZXJ0eVR5cGUuQkFTRTpcclxuICAgICAgICAgICAgICAgIGlmICghb2JqZWN0W3Byb3BlcnR5XSAmJiAhdHlwZS5fX3JlcXVpcmVkX18pIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmplY3RbcHJvcGVydHldICE9PSB0eXBlLl9fdHlwZV9fKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQcm9wZXJ0eVR5cGUuQVJSQVk6XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9iamVjdFtwcm9wZXJ0eV0gJiYgdHlwZS5fX3JlcXVpcmVkX18pIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChvYmplY3RbcHJvcGVydHldKVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGVsZW0gb2Ygb2JqZWN0W3Byb3BlcnR5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSB2YWxpZGF0ZVNjaGVtYSh0eXBlLl9fYXJyYXlfXywgZWxlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUHJvcGVydHlUeXBlLk9CSkVDVDpcclxuICAgICAgICAgICAgICAgIGlmICghb2JqZWN0W3Byb3BlcnR5XSAmJiAhdHlwZS5fX3JlcXVpcmVkX18pIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICFvYmplY3RbcHJvcGVydHldIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgIXZhbGlkYXRlU2NoZW1hKHR5cGUsIG9iamVjdFtwcm9wZXJ0eV0pXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9wZXJ0eVR5cGUodHlwZTogSW5wdXRQcm9wZXJ0eTxhbnk+KSB7XHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModHlwZSk7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICAgIGtleXMubGVuZ3RoID49IDEgJiZcclxuICAgICAgICBrZXlzLmxlbmd0aCA8PSAzICYmXHJcbiAgICAgICAga2V5cy5pbmNsdWRlcyhcIl9fdHlwZV9fXCIpICYmXHJcbiAgICAgICAga2V5cy5ldmVyeSgoa2V5KSA9PlxyXG4gICAgICAgICAgICBbXCJfX3R5cGVfX1wiLCBcIl9fcmVxdWlyZWRfX1wiLCBcIl9fbnVsbGFibGVfX1wiXS5pbmNsdWRlcyhrZXkpXHJcbiAgICAgICAgKVxyXG4gICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb3BlcnR5VHlwZS5CQVNFO1xyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgICBrZXlzLmxlbmd0aCA+PSAxICYmXHJcbiAgICAgICAga2V5cy5sZW5ndGggPD0gMyAmJlxyXG4gICAgICAgIGtleXMuaW5jbHVkZXMoXCJfX2FycmF5X19cIikgJiZcclxuICAgICAgICBrZXlzLmV2ZXJ5KChrZXkpID0+XHJcbiAgICAgICAgICAgIFtcIl9fYXJyYXlfX1wiLCBcIl9fcmVxdWlyZWRfX1wiLCBcIl9fbnVsbGFibGVfX1wiXS5pbmNsdWRlcyhrZXkpXHJcbiAgICAgICAgKVxyXG4gICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb3BlcnR5VHlwZS5BUlJBWTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFByb3BlcnR5VHlwZS5PQkpFQ1Q7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRGVmYXVsdE5hbWUocGF0aDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBwdXJlUGF0aCA9IHBhdGhbMF0gPT09IFwiL1wiID8gcGF0aC5zdWJzdHJpbmcoMSwgcGF0aC5sZW5ndGgpIDogcGF0aDtcclxuICAgIGNvbnN0IG5hbWVQYXJ0cyA9IHB1cmVQYXRoLnJlcGxhY2UoL1xcLzpbYS16QS1aXStcXC8vLCBcIi9cIikuc3BsaXQoXCIvXCIpO1xyXG5cclxuICAgIHJldHVybiBuYW1lUGFydHMucmVkdWNlKChuYW1lLCBwYXJ0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXBwZXIgPSBwYXJ0WzBdLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgcmV0dXJuIG5hbWUgKyB1cHBlciArIHBhcnQuc3Vic3RyaW5nKDEsIHBhcnQubGVuZ3RoKTtcclxuICAgIH0sIFwiXCIpO1xyXG59XHJcbiIsImltcG9ydCB7IEV4cHJlc3MsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24sIFJlcXVlc3RIYW5kbGVyIH0gZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0IHsgSVJvdXRlck1hdGNoZXIgfSBmcm9tIFwiZXhwcmVzcy1zZXJ2ZS1zdGF0aWMtY29yZVwiO1xyXG5pbXBvcnQgeyBFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvZXJyb3JzXCI7XHJcbmltcG9ydCB7IElMb2dnZXIgfSBmcm9tIFwiLi5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFeHByZXNzUHJvdmlkZXIge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEV4cHJlc3NQcm92aWRlciA9IG5ldyBFeHByZXNzUHJvdmlkZXIoKTtcclxuICAgIHN0YXRpYyBsb2dnZXI6IElMb2dnZXI7XHJcbiAgICBwcml2YXRlIGFwcDogRXhwcmVzcztcclxuICAgIHByaXZhdGUgYXV0aGVudGljYXRlOiBSZXF1ZXN0SGFuZGxlcjxhbnksIGFueSwgYW55LCBhbnksIFJlY29yZDxzdHJpbmcsIGFueT4+O1xyXG5cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAgIHN0YXRpYyBzZXRMb2dnZXIobG9nZ2VyOiBJTG9nZ2VyKSB7XHJcbiAgICAgICAgRXhwcmVzc1Byb3ZpZGVyLmxvZ2dlciA9IGxvZ2dlcjtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBcHAoYXBwOiBFeHByZXNzKSB7XHJcbiAgICAgICAgRXhwcmVzc1Byb3ZpZGVyLmxvZ2dlci5sb2coXCJFeHByZXNzIFByb3ZpZGVyIEFwcCBTZXQgLi4uXCIpO1xyXG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEF1dGhNaWRkbGV3YXJlKGF1dGhlbnRpY2F0ZTogUmVxdWVzdEhhbmRsZXI8YW55LCBhbnksIGFueSwgYW55LCBSZWNvcmQ8c3RyaW5nLCBhbnk+Pikge1xyXG4gICAgICAgIEV4cHJlc3NQcm92aWRlci5sb2dnZXIubG9nKFwiRXhwcmVzcyBQcm92aWRlciBBdXRoIFNldCAuLi5cIik7XHJcbiAgICAgICAgdGhpcy5hdXRoZW50aWNhdGUgPSBhdXRoZW50aWNhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHdpdGhBdXRoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF1dGhlbnRpY2F0ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBcHAoKTogRXhwcmVzcyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gRXhwcmVzc1Byb3ZpZGVyLmluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzZW5kRGF0YShyZXM6IFJlc3BvbnNlLCBkYXRhOiBhbnkpIHtcclxuICAgICAgICBFeHByZXNzUHJvdmlkZXIubG9nZ2VyLmxvZyhgJHtyZXMucmVxLnBhdGh9IDogJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gKTtcclxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc2VuZFRleHQocmVzOiBSZXNwb25zZSwgbWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQobWVzc2FnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNlbmRFcnJvcihyZXM6IFJlc3BvbnNlLCBlcnJvcjogRXJyb3IpIHtcclxuICAgICAgICBFeHByZXNzUHJvdmlkZXIubG9nZ2VyLmVycm9yT2JqZWN0KGVycm9yKTtcclxuICAgICAgICByZXMuc3RhdHVzKGVycm9yLmNvZGUpLmpzb24oeyBlcnJvciB9KTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgKiBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vY29yZS9hcGkuZ2VuZXJhdG9yXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2NvcmUvdHlwZXMucmVnaXN0ZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZXJyb3JzL2ludmFsaWQtcmVxdWVzdC5lcnJvclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9leHByZXNzL2RlY29yYXRvcnMvcm91dGUuZGVjb3JhdG9yXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2V4cHJlc3MvZXhwcmVzcy5wcm92aWRlclwiO1xyXG5cclxuIiwiaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gXCJleHByZXNzXCI7XHJcbmV4cG9ydCBuYW1lc3BhY2UgQVRHZW4ge1xyXG4gICAgdHlwZSBCYXNlVHlwZUxpc3QgPSBcInN0cmluZ1wiIHwgXCJudW1iZXJcIiB8IFwiYm9vbGVhblwiIHwgXCJvYmplY3RcIjtcclxuICAgIHR5cGUgQmFzZVR5cGUgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZDtcclxuICAgIHR5cGUgQmFzZVR5cGVNYXA8VCBleHRlbmRzIEJhc2VUeXBlPiA9IFQgZXh0ZW5kcyBzdHJpbmdcclxuICAgICAgICA/IFwic3RyaW5nXCJcclxuICAgICAgICA6IFQgZXh0ZW5kcyBudW1iZXJcclxuICAgICAgICA/IFwibnVtYmVyXCJcclxuICAgICAgICA6IFQgZXh0ZW5kcyBib29sZWFuXHJcbiAgICAgICAgPyBcImJvb2xlYW5cIlxyXG4gICAgICAgIDogVCBleHRlbmRzIG51bGxcclxuICAgICAgICA/IFwibnVsbFwiXHJcbiAgICAgICAgOiBUIGV4dGVuZHMgdW5kZWZpbmVkXHJcbiAgICAgICAgPyBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgOiBcIm9iamVjdFwiO1xyXG4gICAgZXhwb3J0IHR5cGUgSW5wdXRQcm9wZXJ0eTxUPiA9IFQgZXh0ZW5kcyBBcnJheTxhbnk+XHJcbiAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgX19hcnJheV9fOiBJbnB1dFByb3BlcnR5PFRbbnVtYmVyXT47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgOiB7XHJcbiAgICAgICAgICAgICAgW3Byb3BlcnR5IGluIGtleW9mIFRdOiBUW3Byb3BlcnR5XSBleHRlbmRzIEJhc2VUeXBlXHJcbiAgICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX3R5cGVfXzogQmFzZVR5cGVNYXA8VFtwcm9wZXJ0eV0+O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX3JlcXVpcmVkX18/OiBib29sZWFuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX251bGxhYmxlX18/OiBib29sZWFuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8IChJbnB1dFByb3BlcnR5PFRbcHJvcGVydHldPiAmIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19yZXF1aXJlZF9fPzogYm9vbGVhbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19udWxsYWJsZV9fPzogYm9vbGVhbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX190eXBlX186IEJhc2VUeXBlTGlzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19yZXF1aXJlZF9fPzogYm9vbGVhbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19udWxsYWJsZV9fPzogYm9vbGVhbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfTtcclxuICAgIGV4cG9ydCB0eXBlIE91dHB1dFByb3BlcnR5PFQ+ID0gVCBleHRlbmRzIEFycmF5PGFueT5cclxuICAgICAgICA/IHtcclxuICAgICAgICAgICAgICBfX2FycmF5X186IE91dHB1dFByb3BlcnR5PFRbbnVtYmVyXT47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgOiB7XHJcbiAgICAgICAgICAgICAgW3Byb3BlcnR5IGluIGtleW9mIFRdOiBUW3Byb3BlcnR5XSBleHRlbmRzIEJhc2VUeXBlXHJcbiAgICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX3R5cGVfXzogQmFzZVR5cGVNYXA8VFtwcm9wZXJ0eV0+O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX3JlcXVpcmVkX18/OiBib29sZWFuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX251bGxhYmxlX18/OiBib29sZWFuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8IChPdXRwdXRQcm9wZXJ0eTxUW3Byb3BlcnR5XT4gJiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fcmVxdWlyZWRfXz86IGJvb2xlYW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fbnVsbGFibGVfXz86IGJvb2xlYW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fdHlwZV9fOiBCYXNlVHlwZUxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fcmVxdWlyZWRfXz86IGJvb2xlYW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fbnVsbGFibGVfXz86IGJvb2xlYW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH07XHJcbiAgICBleHBvcnQgdHlwZSBSZXF1ZXN0SW5wdXQ8VD4gPSBJbnB1dFByb3BlcnR5PFQ+O1xyXG4gICAgZXhwb3J0IHR5cGUgUmVxdWVzdE91dHB1dDxUPiA9IE91dHB1dFByb3BlcnR5PFQ+O1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0V2l0aEJvZHk8VCA9IGFueT4gZXh0ZW5kcyBSZXF1ZXN0IHtcclxuICAgICAgICBib2R5OiBUO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IHR5cGUgUmVxdWlyZW1lbnRzPFQgPSBhbnk+ID0ge1xyXG4gICAgICAgIGJvZHk/OiBib29sZWFuIHwgUmVxdWVzdElucHV0PFQ+O1xyXG4gICAgfTtcclxuICAgIGV4cG9ydCB0eXBlIFJvdXRlPEluID0gYW55LCBPdXQgPSBhbnk+ID0ge1xyXG4gICAgICAgIG1ldGhvZDogTWV0aG9kO1xyXG4gICAgICAgIHBhdGg6IHN0cmluZztcclxuICAgICAgICBhdXRoPzogYm9vbGVhbjtcclxuICAgICAgICByZXF1aXJlZD86IFJlcXVpcmVtZW50czxJbj47XHJcbiAgICAgICAgcmVzcG9uc2U/OiBSZXF1ZXN0T3V0cHV0PE91dD47XHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgSUxvZ2dlciB7XHJcbiAgICBsb2cobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogdm9pZDtcclxuICAgIGVycm9yT2JqZWN0KGVycm9yOiBFcnJvciwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKTogdm9pZDtcclxufVxyXG5leHBvcnQgZW51bSBQcm9wZXJ0eVR5cGUge1xyXG4gICAgQkFTRSA9IDAsXHJcbiAgICBBUlJBWSA9IDEsXHJcbiAgICBPQkpFQ1QgPSAyLFxyXG59XHJcbmV4cG9ydCBlbnVtIE1ldGhvZCB7XHJcbiAgICBHRVQgPSBcImdldFwiLFxyXG4gICAgUE9TVCA9IFwicG9zdFwiLFxyXG59XHJcbmV4cG9ydCB0eXBlIFJvdXRlPEluID0gYW55LCBPdXQgPSBhbnk+ID0gQVRHZW4uUm91dGU8SW4sIE91dD47XHJcbmV4cG9ydCB0eXBlIElucHV0UHJvcGVydHk8VD4gPSBBVEdlbi5JbnB1dFByb3BlcnR5PFQ+O1xyXG5leHBvcnQgdHlwZSBPdXRwdXRQcm9wZXJ0eTxUPiA9IEFUR2VuLk91dHB1dFByb3BlcnR5PFQ+O1xyXG5leHBvcnQgdHlwZSBSZXF1ZXN0SW5wdXQ8VD4gPSBBVEdlbi5SZXF1ZXN0SW5wdXQ8VD47XHJcbmV4cG9ydCB0eXBlIFJlcXVlc3RPdXRwdXQ8VD4gPSBBVEdlbi5SZXF1ZXN0T3V0cHV0PFQ+O1xyXG5leHBvcnQgdHlwZSBSZXF1ZXN0V2l0aEJvZHk8VD4gPSBBVEdlbi5SZXF1ZXN0V2l0aEJvZHk8VD47XHJcbmV4cG9ydCB0eXBlIFJlcXVpcmVtZW50czxUID0gYW55PiA9IEFUR2VuLlJlcXVpcmVtZW50czxUPjtcclxuZXhwb3J0IGRlZmF1bHQgQVRHZW47XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzL3Byb21pc2VzXCIpOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL2luZGV4LnRzXCIpO1xuIiwiIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9