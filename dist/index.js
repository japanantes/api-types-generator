!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("ATGen",[],t):"object"==typeof exports?exports.ATGen=t():e.ATGen=t()}(this,(()=>{return e={442:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ApiGenerator=void 0;const o=n(r(292)),s=r(812),a=r(650),i=r(179);class u{static instance=new u;routes;typesRegister=i.TypesRegister.getInstance();constructor(){this.routes=new Map}static getInstance(){return u.instance}registerRoute(e,t){this.routes.set(e,t)}generateApiRegister(){let e="// Generated content, don't touch\n\n";e+=this.generateRouteTypeTS(),e+=this.generateMethodEnumTS(),e+=this.generateRegisteredTypesTS();const t={get:[],post:[]};for(let[r,n]of this.routes.entries())e+=this.generateRouteTS(r,n),t[n.method].push(r);e+=this.generateRoutesTypes(t),this.writeApiRegisterToFile(e)}generateMethodEnumTS(){let e="\nexport enum Method {";return Object.values(s.Method).forEach((t=>e+=`\n\t${t},`)),e+="\n}\n\n",e}generateRegisteredTypesTS(){let e="\n";return this.typesRegister.enums.forEach(((t,r)=>{e+=`\nexport enum ${r} {`,Object.entries(t).forEach((([t,r])=>e+=`\n\t${t} = ${"number"==typeof r?r:`"${r}"`},`)),e+="\n}\n"})),e}generateRouteTypeTS(){return"\ntype Route = {name: string; method: Method; path: string; requireAuth?: boolean | undefined; data?: any | undefined; res:any};\n\n"}generateRoutesTypes(e){let t="";return Object.entries(e).forEach((([e,r])=>{t+=`\nexport type T${e.toUpperCase()}Routes = Route${r.join(" | Route")};`})),t}generateRouteTS(e,t){let r=`export type TRoute${e}Input = ${this.getDataTypeTS(t.required?.body)};\n`;return r+=`export type TRoute${e}Output = ${this.generateOutputTypeTS(t.response)};\n`,r+=`\nexport type Route${e} = {\n    name: "${e}";\n    method: Method.${t.method};\n    path: "${t.path}";\n    requireAuth: ${t.auth};\n    ${t.required?.body?`data: TRoute${e}Input`:`data?: TRoute${e}Input`}\n    res: TRoute${e}Output;\n};\nexport const getRequest${e} = (${t.required?.body?`data: Route${e}["data"]`:""}): Omit<Route${e}, "res"> => ({\n    name: "${e}",\n    method: Method.${t.method},\n    path: "${t.path}",\n    requireAuth: ${t.auth},\n    ${t.required?.body?"data,":""}\n});\n\n`,r}getDataTypeTS(e){return e?"boolean"==typeof e?"any":this.generateInputTypeTS(e):'Route["data"]'}generateInputTypeTS(e){let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateInputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateInputTypeTS(r)};`}})),t+="\n\t}",t}generateOutputTypeTS(e){if(!e)return"any";let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateOutputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateOutputTypeTS(r)};`}})),t+="\n\t}",t}writeApiRegisterToFile(e){o.default.writeFile(process.env.ATGEN_TYPES_FOLDERPATH+"/api.d.ts",e)}}t.ApiGenerator=u},179:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TypesRegister=void 0;class r{static instance=new r;enums;constructor(){this.enums=new Map}static getInstance(){return r.instance}registerEnum(e,t){this.enums.set(e,t)}}t.TypesRegister=r},812:function(e,t,r){var n;n=()=>{return e={442:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ApiGenerator=void 0;const o=n(r(292)),s=r(812),a=r(650),i=r(179);class u{static instance=new u;routes;typesRegister=i.TypesRegister.getInstance();constructor(){this.routes=new Map}static getInstance(){return u.instance}registerRoute(e,t){this.routes.set(e,t)}generateApiRegister(){let e="// Generated content, don't touch\n\n";e+=this.generateRouteTypeTS(),e+=this.generateMethodEnumTS(),e+=this.generateRegisteredTypesTS();const t={get:[],post:[]};for(let[r,n]of this.routes.entries())e+=this.generateRouteTS(r,n),t[n.method].push(r);e+=this.generateRoutesTypes(t),this.writeApiRegisterToFile(e)}generateMethodEnumTS(){let e="\nexport enum Method {";return Object.values(s.Method).forEach((t=>e+=`\n\t${t},`)),e+="\n}\n\n",e}generateRegisteredTypesTS(){let e="\n";return this.typesRegister.enums.forEach(((t,r)=>{e+=`\nexport enum ${r} {`,Object.entries(t).forEach((([t,r])=>e+=`\n\t${t} = ${"number"==typeof r?r:`"${r}"`},`)),e+="\n}\n"})),e}generateRouteTypeTS(){return"\ntype Route = {name: string; method: Method; path: string; requireAuth?: boolean | undefined; data?: any | undefined; res:any};\n\n"}generateRoutesTypes(e){let t="";return Object.entries(e).forEach((([e,r])=>{t+=`\nexport type T${e.toUpperCase()}Routes = Route${r.join(" | Route")};`})),t}generateRouteTS(e,t){let r=`export type TRoute${e}Input = ${this.getDataTypeTS(t.required?.body)};\n`;return r+=`export type TRoute${e}Output = ${this.generateOutputTypeTS(t.response)};\n`,r+=`\nexport type Route${e} = {\n    name: "${e}";\n    method: Method.${t.method};\n    path: "${t.path}";\n    requireAuth: ${t.auth};\n    ${t.required?.body?`data: TRoute${e}Input`:`data?: TRoute${e}Input`}\n    res: TRoute${e}Output;\n};\nexport const getRequest${e} = (${t.required?.body?`data: Route${e}["data"]`:""}): Omit<Route${e}, "res"> => ({\n    name: "${e}",\n    method: Method.${t.method},\n    path: "${t.path}",\n    requireAuth: ${t.auth},\n    ${t.required?.body?"data,":""}\n});\n\n`,r}getDataTypeTS(e){return e?"boolean"==typeof e?"any":this.generateInputTypeTS(e):'Route["data"]'}generateInputTypeTS(e){let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateInputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateInputTypeTS(r)};`}})),t+="\n\t}",t}generateOutputTypeTS(e){if(!e)return"any";let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateOutputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateOutputTypeTS(r)};`}})),t+="\n\t}",t}writeApiRegisterToFile(e){o.default.writeFile(process.env.ATGEN_TYPES_FOLDERPATH+"/api.d.ts",e)}}t.ApiGenerator=u},179:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TypesRegister=void 0;class r{static instance=new r;enums;constructor(){this.enums=new Map}static getInstance(){return r.instance}registerEnum(e,t){this.enums.set(e,t)}}t.TypesRegister=r},812:function(e,t,r){var n;n=()=>(()=>{"use strict";var e={442:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ApiGenerator=void 0;const o=n(r(292)),s=r(492),a=r(650),i=r(179);class u{static instance=new u;routes;typesRegister=i.TypesRegister.getInstance();constructor(){this.routes=new Map}static getInstance(){return u.instance}registerRoute(e,t){this.routes.set(e,t)}generateApiRegister(){let e="// Generated content, don't touch\n\n";e+=this.generateRouteTypeTS(),e+=this.generateMethodEnumTS(),e+=this.generateRegisteredTypesTS();const t={get:[],post:[]};for(let[r,n]of this.routes.entries())e+=this.generateRouteTS(r,n),t[n.method].push(r);e+=this.generateRoutesTypes(t),this.writeApiRegisterToFile(e)}generateMethodEnumTS(){let e="\nexport enum Method {";return Object.values(s.Method).forEach((t=>e+=`\n\t${t},`)),e+="\n}\n\n",e}generateRegisteredTypesTS(){let e="\n";return this.typesRegister.enums.forEach(((t,r)=>{e+=`\nexport enum ${r} {`,Object.entries(t).forEach((([t,r])=>e+=`\n\t${t} = ${"number"==typeof r?r:`"${r}"`},`)),e+="\n}\n"})),e}generateRouteTypeTS(){return"\ntype Route = {name: string; method: Method; path: string; requireAuth?: boolean | undefined; data?: any | undefined; res:any};\n\n"}generateRoutesTypes(e){let t="";return Object.entries(e).forEach((([e,r])=>{t+=`\nexport type T${e.toUpperCase()}Routes = Route${r.join(" | Route")};`})),t}generateRouteTS(e,t){let r=`export type TRoute${e}Input = ${this.getDataTypeTS(t.required?.body)};\n`;return r+=`export type TRoute${e}Output = ${this.generateOutputTypeTS(t.response)};\n`,r+=`\nexport type Route${e} = {\n    name: "${e}";\n    method: Method.${t.method};\n    path: "${t.path}";\n    requireAuth: ${t.auth};\n    ${t.required?.body?`data: TRoute${e}Input`:`data?: TRoute${e}Input`}\n    res: TRoute${e}Output;\n};\nexport const getRequest${e} = (${t.required?.body?`data: Route${e}["data"]`:""}): Omit<Route${e}, "res"> => ({\n    name: "${e}",\n    method: Method.${t.method},\n    path: "${t.path}",\n    requireAuth: ${t.auth},\n    ${t.required?.body?"data,":""}\n});\n\n`,r}getDataTypeTS(e){return e?"boolean"==typeof e?"any":this.generateInputTypeTS(e):'Route["data"]'}generateInputTypeTS(e){let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateInputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateInputTypeTS(r)};`}})),t+="\n\t}",t}generateOutputTypeTS(e){if(!e)return"any";let t="{";return Object.entries(e).forEach((([e,r])=>{if("__required__"!==e)switch((0,a.getPropertyType)(r)){case s.PropertyType.BASE:t+=`\n\t\t${e}${r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${r.__type__};`;break;case s.PropertyType.ARRAY:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"} ${this.generateOutputTypeTS(r.__array__)}[];`;break;case s.PropertyType.OBJECT:t+=`\n\t\t${e}${!1!==r.__required__?":":"?:"}${r.__nullable__?" null |":""} ${this.generateOutputTypeTS(r)};`}})),t+="\n\t}",t}writeApiRegisterToFile(e){o.default.writeFile(process.env.ATGEN_TYPES_FOLDERPATH+"/api.d.ts",e)}}t.ApiGenerator=u},179:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TypesRegister=void 0;class r{static instance=new r;enums;constructor(){this.enums=new Map}static getInstance(){return r.instance}registerEnum(e,t){this.enums.set(e,t)}}t.TypesRegister=r},485:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidRequestError=void 0;class r extends Error{code=400;relatedData;message;constructor(e,t){super(e),this.name="InvalidValue",this.formatMessage(e,t),this.relatedData=t}formatMessage(e,t){this.message=`Bad Request : ${e}\n\tProvided Error Data :\n\t\t${JSON.stringify(t,void 0,2)}\n`}}t.InvalidRequestError=r},650:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getPropertyType=t.route=void 0;const n=r(492),o=r(442),s=r(485),a=r(507);function i(e,t){for(let[r,o]of Object.entries(e))switch(u(o)){case n.PropertyType.BASE:if(!t[r]&&!o.__required__)break;if(typeof t[r]!==o.__type__)return!1;break;case n.PropertyType.ARRAY:if(!t[r]&&o.__required__)return!1;if(t[r])for(let e of t[r])if(!i(o.__array__,e))return!1;break;case n.PropertyType.OBJECT:if(!t[r]&&!o.__required__)break;if(!t[r]||!i(o,t[r]))return!1}return!0}function u(e){const t=Object.keys(e);return t.length>=1&&t.length<=3&&t.includes("__type__")&&t.every((e=>["__type__","__required__","__nullable__"].includes(e)))?n.PropertyType.BASE:t.length>=1&&t.length<=3&&t.includes("__array__")&&t.every((e=>["__array__","__required__","__nullable__"].includes(e)))?n.PropertyType.ARRAY:n.PropertyType.OBJECT}t.route=function({name:e,method:t,path:r,auth:n,required:u,response:p}){return a.ExpressProvider.logger.log(`Create ${t}:${r} route with auth:${n}`),o.ApiGenerator.getInstance().registerRoute(e||function(e){return("/"===e[0]?e.substring(1,e.length):e).replace(/\/:[a-zA-Z]+\//,"/").split("/").reduce(((e,t)=>e+t[0].toUpperCase()+t.substring(1,t.length)),"")}(r),{method:t,path:r,auth:n,required:u,response:p}),function(e,o,p){const d=async(e,t)=>{try{if(u){if(u.body&&"GET"===e.method){const t=e.query._data;if(!t)throw new s.InvalidRequestError("No data for body with GET request.",{body:e.query._data});if("string"!=typeof t)throw new s.InvalidRequestError("Data type is invalid.",{body:e.query._data});e.body=JSON.parse(t)}!function(e,t){if(e.body&&("boolean"==typeof e.body&&!Object.keys(t.body).length||"boolean"!=typeof e.body&&!i(e.body,t.body)))throw new s.InvalidRequestError("No body or body tructure is invalid.",{body:t.body})}(u,e)}const r=await p.value(e,t);a.ExpressProvider.sendData(t,r)}catch(e){a.ExpressProvider.sendError(t,e)}},_=a.ExpressProvider.getInstance();n?_.getApp()[t](r,_.withAuth,d):a.ExpressProvider.getInstance().getApp()[t](r,d)}},t.getPropertyType=u},507:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExpressProvider=void 0;class r{static instance=new r;static logger;app;authenticate;constructor(){}static setLogger(e){r.logger=e}setApp(e){r.logger.log("Express Provider App Set ..."),this.app=e}setAuthMiddleware(e){r.logger.log("Express Provider Auth Set ..."),this.authenticate=e}get withAuth(){return this.authenticate}getApp(){return this.app}static getInstance(){return r.instance}static sendData(e,t){r.logger.log(`${e.req.path} : ${JSON.stringify(t)}`),e.status(200).json(t)}static sendText(e,t){e.status(200).send(t)}static sendError(e,t){r.logger.errorObject(t),e.status(t.code).json({error:t})}}t.ExpressProvider=r},492:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(442),t),o(r(179),t),o(r(485),t),o(r(507),t),o(r(650),t)},292:e=>{e.exports=r(292)}},t={};return function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}(492)})(),e.exports=n()},485:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidRequestError=void 0;class r extends Error{code=400;relatedData;message;constructor(e,t){super(e),this.name="InvalidValue",this.formatMessage(e,t),this.relatedData=t}formatMessage(e,t){this.message=`Bad Request : ${e}\n\tProvided Error Data :\n\t\t${JSON.stringify(t,void 0,2)}\n`}}t.InvalidRequestError=r},650:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPropertyType=t.route=void 0;const n=r(812),o=r(442),s=r(485),a=r(507);function i(e,t){for(let[r,o]of Object.entries(e))switch(u(o)){case n.PropertyType.BASE:if(!t[r]&&!o.__required__)break;if(typeof t[r]!==o.__type__)return!1;break;case n.PropertyType.ARRAY:if(!t[r]&&o.__required__)return!1;if(t[r])for(let e of t[r])if(!i(o.__array__,e))return!1;break;case n.PropertyType.OBJECT:if(!t[r]&&!o.__required__)break;if(!t[r]||!i(o,t[r]))return!1}return!0}function u(e){const t=Object.keys(e);return t.length>=1&&t.length<=3&&t.includes("__type__")&&t.every((e=>["__type__","__required__","__nullable__"].includes(e)))?n.PropertyType.BASE:t.length>=1&&t.length<=3&&t.includes("__array__")&&t.every((e=>["__array__","__required__","__nullable__"].includes(e)))?n.PropertyType.ARRAY:n.PropertyType.OBJECT}t.route=function({name:e,method:t,path:r,auth:n,required:u,response:p}){return a.ExpressProvider.logger.log(`Create ${t}:${r} route with auth:${n}`),o.ApiGenerator.getInstance().registerRoute(e||function(e){return("/"===e[0]?e.substring(1,e.length):e).replace(/\/:[a-zA-Z]+\//,"/").split("/").reduce(((e,t)=>e+t[0].toUpperCase()+t.substring(1,t.length)),"")}(r),{method:t,path:r,auth:n,required:u,response:p}),function(e,o,p){const d=async(e,t)=>{try{if(u){if(u.body&&"GET"===e.method){const t=e.query._data;if(!t)throw new s.InvalidRequestError("No data for body with GET request.",{body:e.query._data});if("string"!=typeof t)throw new s.InvalidRequestError("Data type is invalid.",{body:e.query._data});e.body=JSON.parse(t)}!function(e,t){if(e.body&&("boolean"==typeof e.body&&!Object.keys(t.body).length||"boolean"!=typeof e.body&&!i(e.body,t.body)))throw new s.InvalidRequestError("No body or body tructure is invalid.",{body:t.body})}(u,e)}const r=await p.value(e,t);a.ExpressProvider.sendData(t,r)}catch(e){a.ExpressProvider.sendError(t,e)}},_=a.ExpressProvider.getInstance();n?_.getApp()[t](r,_.withAuth,d):a.ExpressProvider.getInstance().getApp()[t](r,d)}},t.getPropertyType=u},507:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExpressProvider=void 0;class r{static instance=new r;static logger;app;authenticate;constructor(){}static setLogger(e){r.logger=e}setApp(e){r.logger.log("Express Provider App Set ..."),this.app=e}setAuthMiddleware(e){r.logger.log("Express Provider Auth Set ..."),this.authenticate=e}get withAuth(){return this.authenticate}getApp(){return this.app}static getInstance(){return r.instance}static sendData(e,t){r.logger.log(`${e.req.path} : ${JSON.stringify(t)}`),e.status(200).json(t)}static sendText(e,t){e.status(200).send(t)}static sendError(e,t){r.logger.errorObject(t),e.status(t.code).json({error:t})}}t.ExpressProvider=r},492:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(442),t),o(r(179),t),o(r(485),t),o(r(507),t),o(r(650),t),o(r(676),t)},676:(e,t)=>{"use strict";var r,n;Object.defineProperty(t,"__esModule",{value:!0}),t.Method=t.PropertyType=void 0,(n=t.PropertyType||(t.PropertyType={}))[n.BASE=0]="BASE",n[n.ARRAY=1]="ARRAY",n[n.OBJECT=2]="OBJECT",(r=t.Method||(t.Method={})).GET="get",r.POST="post"},292:e=>{"use strict";e.exports=r(292)}},t={},function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}(492);var e,t},e.exports=n()},485:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidRequestError=void 0;class r extends Error{code=400;relatedData;message;constructor(e,t){super(e),this.name="InvalidValue",this.formatMessage(e,t),this.relatedData=t}formatMessage(e,t){this.message=`Bad Request : ${e}\n\tProvided Error Data :\n\t\t${JSON.stringify(t,void 0,2)}\n`}}t.InvalidRequestError=r},650:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPropertyType=t.route=void 0;const n=r(812),o=r(442),s=r(485),a=r(507);function i(e,t){for(let[r,o]of Object.entries(e))switch(u(o)){case n.PropertyType.BASE:if(!t[r]&&!o.__required__)break;if(typeof t[r]!==o.__type__)return!1;break;case n.PropertyType.ARRAY:if(!t[r]&&o.__required__)return!1;if(t[r])for(let e of t[r])if(!i(o.__array__,e))return!1;break;case n.PropertyType.OBJECT:if(!t[r]&&!o.__required__)break;if(!t[r]||!i(o,t[r]))return!1}return!0}function u(e){const t=Object.keys(e);return t.length>=1&&t.length<=3&&t.includes("__type__")&&t.every((e=>["__type__","__required__","__nullable__"].includes(e)))?n.PropertyType.BASE:t.length>=1&&t.length<=3&&t.includes("__array__")&&t.every((e=>["__array__","__required__","__nullable__"].includes(e)))?n.PropertyType.ARRAY:n.PropertyType.OBJECT}t.route=function({name:e,method:t,path:r,auth:n,required:u,response:p}){return a.ExpressProvider.logger.log(`Create ${t}:${r} route with auth:${n}`),o.ApiGenerator.getInstance().registerRoute(e||function(e){return("/"===e[0]?e.substring(1,e.length):e).replace(/\/:[a-zA-Z]+\//,"/").split("/").reduce(((e,t)=>e+t[0].toUpperCase()+t.substring(1,t.length)),"")}(r),{method:t,path:r,auth:n,required:u,response:p}),function(e,o,p){const d=async(e,t)=>{try{if(u){if(u.body&&"GET"===e.method){const t=e.query._data;if(!t)throw new s.InvalidRequestError("No data for body with GET request.",{body:e.query._data});if("string"!=typeof t)throw new s.InvalidRequestError("Data type is invalid.",{body:e.query._data});e.body=JSON.parse(t)}!function(e,t){if(e.body&&("boolean"==typeof e.body&&!Object.keys(t.body).length||"boolean"!=typeof e.body&&!i(e.body,t.body)))throw new s.InvalidRequestError("No body or body tructure is invalid.",{body:t.body})}(u,e)}const r=await p.value(e,t);a.ExpressProvider.sendData(t,r)}catch(e){a.ExpressProvider.sendError(t,e)}},_=a.ExpressProvider.getInstance();n?_.getApp()[t](r,_.withAuth,d):a.ExpressProvider.getInstance().getApp()[t](r,d)}},t.getPropertyType=u},507:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExpressProvider=void 0;class r{static instance=new r;static logger;app;authenticate;constructor(){}static setLogger(e){r.logger=e}setApp(e){r.logger.log("Express Provider App Set ..."),this.app=e}setAuthMiddleware(e){r.logger.log("Express Provider Auth Set ..."),this.authenticate=e}get withAuth(){return this.authenticate}getApp(){return this.app}static getInstance(){return r.instance}static sendData(e,t){r.logger.log(`${e.req.path} : ${JSON.stringify(t)}`),e.status(200).json(t)}static sendText(e,t){e.status(200).send(t)}static sendError(e,t){r.logger.errorObject(t),e.status(t.code).json({error:t})}}t.ExpressProvider=r},492:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(676),t),o(r(442),t),o(r(179),t),o(r(485),t),o(r(650),t),o(r(507),t)},676:(e,t)=>{"use strict";var r,n;Object.defineProperty(t,"__esModule",{value:!0}),t.Method=t.PropertyType=void 0,(n=t.PropertyType||(t.PropertyType={}))[n.BASE=0]="BASE",n[n.ARRAY=1]="ARRAY",n[n.OBJECT=2]="OBJECT",(r=t.Method||(t.Method={})).GET="get",r.POST="post"},292:e=>{"use strict";e.exports=require("fs/promises")}},t={},function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}(492);var e,t}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,